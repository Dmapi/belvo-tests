{"version":3,"file":"arquero.min.js","sources":["../src/util/is-array.js","../src/util/to-array.js","../src/helpers/slice.js","../src/table/transformable.js","../src/util/error.js","../src/util/is-number.js","../src/util/is-function.js","../src/util/repeat.js","../src/table/table.js","../src/table/column.js","../src/util/is-date.js","../src/util/is-object.js","../src/util/is-regexp.js","../src/util/is-string.js","../src/table/columns-from.js","../src/util/has.js","../src/table/column-set.js","../src/util/null.js","../src/util/is-typed-array.js","../src/util/is-array-type.js","../src/util/is-valid.js","../src/op/functions/array.js","../src/util/pad.js","../src/util/format-date.js","../src/util/is-iso-date-string.js","../src/op/functions/date.js","../src/util/parse-iso-date.js","../src/op/functions/equal.js","../src/op/functions/json.js","../src/util/random.js","../src/util/is-map.js","../src/util/is-map-or-set.js","../src/util/is-set.js","../src/op/functions/object.js","../src/op/functions/sequence.js","../src/op/functions/index.js","../src/op/functions/bin.js","../src/op/functions/recode.js","../src/op/functions/math.js","../src/op/functions/string.js","../src/util/is-bigint.js","../src/util/to-string.js","../src/op/op.js","../src/op/op-api.js","../src/table/regroup.js","../src/util/unique-name.js","../src/expression/ast/constants.js","../src/expression/codegen.js","../src/util/key-function.js","../src/util/no-op.js","../src/op/aggregate-functions.js","../src/util/distinct-map.js","../src/util/product.js","../src/util/bins.js","../src/op/window-functions.js","../src/op/index.js","../src/expression/compile.js","../src/expression/rewrite.js","../src/util/entries.js","../src/expression/row-object.js","../src/arrow/arrow-types.js","../src/arrow/builder/util.js","../src/arrow/builder/array-builder.js","../src/arrow/builder/bool-builder.js","../src/arrow/builder/date-day-builder.js","../src/arrow/builder/date-millis-builder.js","../src/arrow/builder/dictionary-builder.js","../src/arrow/builder/utf8-builder.js","../src/arrow/builder/index.js","../src/arrow/builder/default-builder.js","../src/arrow/builder/valid-builder.js","../src/arrow/encode/data-from.js","../src/arrow/builder/resolve-type.js","../src/arrow/encode/profiler.js","../src/util/is-exact-utc-date.js","../src/arrow/encode/data-from-objects.js","../src/arrow/encode/data-from-table.js","../src/arrow/encode/scan.js","../src/arrow/arrow-table.js","../src/arrow/encode/index.js","../src/format/util.js","../src/format/infer.js","../src/format/value.js","../src/util/map-object.js","../src/format/to-html.js","../src/util/default-true.js","../src/format/to-json.js","../src/util/assign.js","../src/util/escape-regexp.js","../src/helpers/selection.js","../src/table/column-table.js","../src/util/array-type.js","../src/format/to-csv.js","../src/format/to-markdown.js","../src/engine/reduce/reducer.js","../src/expression/ast/walk.js","../src/expression/ast/clean.js","../src/expression/ast/util.js","../src/expression/parse-escape.js","../src/util/to-function.js","../node_modules/acorn/dist/acorn.mjs","../src/expression/constants.js","../src/expression/parse-expression.js","../src/expression/parse.js","../src/query/constants.js","../src/helpers/wrap.js","../src/helpers/desc.js","../src/helpers/field.js","../src/helpers/rolling.js","../src/query/util.js","../src/query/to-ast.js","../src/query/verb.js","../src/query/query.js","../src/arrow/arrow-dictionary.js","../src/util/unroll.js","../src/arrow/arrow-column.js","../src/table/bit-set.js","../src/format/from-arrow.js","../src/util/identity.js","../src/util/parse-values.js","../src/format/from-text-rows.js","../src/format/parse/constants.js","../src/format/parse/text-filter.js","../src/format/from-csv.js","../src/format/parse/parse-delimited.js","../src/format/from-fixed.js","../src/format/parse/parse-lines.js","../src/util/is-digit-string.js","../src/format/from-json.js","../src/engine/select.js","../src/verbs/relocate.js","../src/util/concat.js","../src/util/ascending.js","../src/util/to-numeric.js","../src/util/value-list.js","../src/util/min.js","../src/util/max.js","../src/util/quantile.js","../src/engine/reduce/field-reducer.js","../src/engine/reduce/util.js","../src/util/bisector.js","../src/engine/window/window-state.js","../src/engine/window/window.js","../src/engine/derive.js","../src/engine/unroll.js","../src/verbs/util/parse.js","../src/engine/impute.js","../src/engine/rollup.js","../src/verbs/impute.js","../src/engine/join/lookup.js","../src/engine/join.js","../src/verbs/util/parse-key.js","../src/verbs/util/join-keys.js","../src/util/intersect.js","../src/verbs/join.js","../src/engine/join-filter.js","../src/verbs/join-filter.js","../src/engine/pivot.js","../src/verbs/pivot.js","../src/verbs/rollup.js","../src/util/sample.js","../src/engine/sample.js","../src/util/shuffle.js","../src/verbs/sample.js","../src/engine/spread.js","../src/engine/groupby.js","../src/expression/compare.js","../src/verbs/index.js","../src/engine/concat.js","../src/verbs/dedupe.js","../src/verbs/derive.js","../src/verbs/except.js","../src/verbs/filter.js","../src/engine/filter.js","../src/verbs/fold.js","../src/engine/fold.js","../src/verbs/intersect.js","../src/verbs/lookup.js","../src/engine/lookup.js","../src/verbs/rename.js","../src/verbs/select.js","../src/verbs/spread.js","../src/verbs/union.js","../src/verbs/unroll.js","../src/verbs/groupby.js","../src/verbs/orderby.js","../src/engine/orderby.js","../src/engine/ungroup.js","../src/engine/unorder.js","../src/engine/reduce.js","../src/table/index.js","../src/format/load-url.js","../src/register.js","../src/index.js","../src/verbs/helpers/agg.js","../src/helpers/bin.js","../src/helpers/escape.js","../src/helpers/frac.js","../src/helpers/names.js"],"sourcesContent":["export default Array.isArray;\n","import isArray from './is-array';\n\nexport default function(value) {\n  return value != null\n    ? (isArray(value) ? value : [value])\n    : [];\n}","/**\n * Generate a table expression that filters a table based on ordered row\n * indices from start to end (end not included), where start and end\n * represent per-group ordered row numbers in the table. The resulting\n * string can be used as the input to the filter verb.\n * @param {number} [start] Zero-based index at which to start extraction.\n *  A negative index indicates an offset from the end of the group.\n *  If start is undefined, slice starts from the index 0.\n * @param {number} [end] Zero-based index before which to end extraction.\n *  A negative index indicates an offset from the end of the group.\n *  If end is omitted, slice extracts through the end of the group.\n * @return {string} A table expression string for slicing values.\n * @example slice(1, -1)\n */\nexport default function(start = 0, end = Infinity) {\n  return `${prep(start)} < row_number() && row_number() <= ${prep(end)}`;\n}\n\nfunction prep(index) {\n  return index < 0 ? `count() + ${index}` : index;\n}","import toArray from '../util/to-array';\nimport slice from '../helpers/slice';\n\n/**\n * Abstract base class for transforming data.\n */\nexport default class Transformable {\n\n  /**\n   * Instantiate a new Transformable instance.\n   * @param {Params} [params] The parameter values.\n   */\n  constructor(params) {\n    if (params) this._params = params;\n  }\n\n  /**\n   * Get or set table expression parameter values.\n   * If called with no arguments, returns the current parameter values\n   * as an object. Otherwise, adds the provided parameters to this\n   * table's parameter set and returns the table. Any prior parameters\n   * with names matching the input parameters are overridden.\n   * @param {Params} [values] The parameter values.\n   * @return {this|Params} The current parameters values (if called with\n   *  no arguments) or this table.\n   */\n  params(values) {\n    if (arguments.length) {\n      if (values) {\n        this._params = { ...this._params, ...values };\n      }\n      return this;\n    } else {\n      return this._params;\n    }\n  }\n\n  /**\n   * Create a new fully-materialized instance of this table.\n   * All filter and orderby settings are removed from the new table.\n   * Instead, the backing data itself is filtered and ordered as needed.\n   * @param {number[]} [indices] Ordered row indices to materialize.\n   *  If unspecified, all rows passing the table filter are used.\n   * @return {this} A reified table.\n   */\n  reify(indices) {\n    return this.__reify(this, indices);\n  }\n\n  // -- Transformation Verbs ------------------------------------------------\n\n  /**\n   * Count the number of values in a group. This method is a shorthand\n   * for {@link Transformable#rollup} with a count aggregate function.\n   * @param {CountOptions} [options] Options for the count.\n   * @return {this} A new table with groupby and count columns.\n   * @example table.groupby('colA').count()\n   * @example table.groupby('colA').count({ as: 'num' })\n   */\n  count(options) {\n    return this.__count(this, options);\n  }\n\n  /**\n   * Derive new column values based on the provided expressions. By default,\n   * new columns are added after (higher indices than) existing columns. Use\n   * the before or after options to place new columns elsewhere.\n   * @param {ExprObject} values Object of name-value pairs defining the\n   *  columns to derive. The input object should have output column\n   *  names for keys and table expressions for values.\n   * @param {DeriveOptions} [options] Options for dropping or relocating\n   *  derived columns. Use either a before or after property to indicate\n   *  where to place derived columns. Specifying both before and after is an\n   *  error. Unlike the relocate verb, this option affects only new columns;\n   *  updated columns with existing names are excluded from relocation.\n   * @return {this} A new table with derived columns added.\n   * @example table.derive({ sumXY: d => d.x + d.y })\n   * @example table.derive({ z: d => d.x * d.y }, { before: 'x' })\n   */\n  derive(values, options) {\n    return this.__derive(this, values, options);\n  }\n\n  /**\n   * Filter a table to a subset of rows based on the input criteria.\n   * The resulting table provides a filtered view over the original data; no\n   * data copy is made. To create a table that copies only filtered data to\n   * new data structures, call {@link Transformable#reify} on the output table.\n   * @param {TableExpr} criteria Filter criteria as a table expression.\n   *  Both aggregate and window functions are permitted, taking into account\n   *  {@link Transformable#groupby} or {@link Transformable#orderby} settings.\n   * @return {this} A new table with filtered rows.\n   * @example table.filter(d => abs(d.value) < 5)\n   */\n  filter(criteria) {\n    return this.__filter(this, criteria);\n  }\n\n  /**\n   * Extract rows with indices from start to end (end not included), where\n   * start and end represent per-group ordered row numbers in the table.\n   * @param {number} [start] Zero-based index at which to start extraction.\n   *  A negative index indicates an offset from the end of the group.\n   *  If start is undefined, slice starts from the index 0.\n   * @param {number} [end] Zero-based index before which to end extraction.\n   *  A negative index indicates an offset from the end of the group.\n   *  If end is omitted, slice extracts through the end of the group.\n   * @return {this} A new table with sliced rows.\n   * @example table.slice(1, -1)\n   */\n  slice(start, end) {\n    return this.filter(slice(start, end)).reify();\n  }\n\n  /**\n   * Group table rows based on a set of column values.\n   * Subsequent operations that are sensitive to grouping (such as\n   * aggregate functions) will operate over the grouped rows.\n   * To undo grouping, use {@link Transformable#ungroup}.\n   * @param  {...ExprList} keys Key column values to group by.\n   *  The keys may be specified using column name strings, column index\n   *  numbers, value objects with output column names for keys and table\n   *  expressions for values, or selection helper functions.\n   * @return {this} A new table with grouped rows.\n   * @example table.groupby('colA', 'colB')\n   * @example table.groupby({ key: d => d.colA + d.colB })\n   */\n  groupby(...keys) {\n    return this.__groupby(this, keys.flat());\n  }\n\n  /**\n   * Order table rows based on a set of column values.\n   * Subsequent operations sensitive to ordering (such as window functions)\n   * will operate over sorted values.\n   * The resulting table provides an view over the original data, without\n   * any copying. To create a table with sorted data copied to new data\n   * strucures, call {@link Transformable#reify} on the result of this method.\n   * To undo ordering, use {@link Transformable#unorder}.\n   * @param  {...OrderKeys} keys Key values to sort by, in precedence order.\n   *  By default, sorting is done in ascending order.\n   *  To sort in descending order, wrap values using {@link desc}.\n   *  If a string, order by the column with that name.\n   *  If a number, order by the column with that index.\n   *  If a function, must be a valid table expression; aggregate functions\n   *  are permitted, but window functions are not.\n   *  If an object, object values must be valid values parameters\n   *  with output column names for keys and table expressions\n   *  for values (the output names will be ignored).\n   *  If an array, array values must be valid key parameters.\n   * @return {this} A new ordered table.\n   * @example table.orderby('a', desc('b'))\n   * @example table.orderby({ a: 'a', b: desc('b') )})\n   * @example table.orderby(desc(d => d.a))\n   */\n  orderby(...keys) {\n    return this.__orderby(this, keys.flat());\n  }\n\n  /**\n   * Relocate a subset of columns to change their positions, also\n   * potentially renaming them.\n   * @param {Selection} columns An ordered selection of columns to relocate.\n   *  The input may consist of column name strings, column integer indices,\n   *  rename objects with current column names as keys and new column names\n   *  as values, or functions that take a table as input and returns a valid\n   *  selection parameter (typically the output of selection helper functions\n   *  such as {@link all}, {@link not}, or {@link range}).\n   * @param {RelocateOptions} options Options for relocating. Must include\n   *  either the before or after property to indicate where to place the\n   *  relocated columns. Specifying both before and after is an error.\n   * @return {this} A new table with relocated columns.\n   * @example table.relocate(['colY', 'colZ'], { after: 'colX' })\n   * @example table.relocate(not('colB', 'colC'), { before: 'colA' })\n   * @example table.relocate({ colA: 'newA', colB: 'newB' }, { after: 'colC' })\n   */\n  relocate(columns, options) {\n    return this.__relocate(this, toArray(columns), options);\n  }\n\n  /**\n   * Rename one or more columns, preserving column order.\n   * @param {...Select} columns One or more rename objects with current\n   *  column names as keys and new column names as values.\n   * @return {this} A new table with renamed columns.\n   * @example table.rename({ oldName: 'newName' })\n   * @example table.rename({ a: 'a2', b: 'b2' })\n   */\n  rename(...columns) {\n    return this.__rename(this, columns.flat());\n  }\n\n  /**\n   * Rollup a table to produce an aggregate summary.\n   * Often used in conjunction with {@link Transformable#groupby}.\n   * To produce counts only, {@link Transformable#count} is a shortcut.\n   * @param {ExprObject} [values] Object of name-value pairs defining aggregate\n   *  output columns. The input object should have output column names for\n   *  keys and table expressions for values. The expressions must be valid\n   *  aggregate expressions: window functions are not allowed and column\n   *  references must be arguments to aggregate functions.\n   * @return {this} A new table of aggregate summary values.\n   * @example table.groupby('colA').rollup({ mean: d => mean(d.colB) })\n   * @example table.groupby('colA').rollup({ mean: op.median('colB') })\n   */\n  rollup(values) {\n    return this.__rollup(this, values);\n  }\n\n  /**\n   * Generate a table from a random sample of rows.\n   * If the table is grouped, performs a stratified sample by\n   * sampling from each group separately.\n   * @param {number|TableExpr} size The number of samples to draw per group.\n   *  If number-valued, the same sample size is used for each group.\n   *  If function-valued, the input should be an aggregate table\n   *  expression compatible with {@link Transformable#rollup}.\n   * @param {SampleOptions} [options] Options for sampling.\n   * @return {this} A new table with sampled rows.\n   * @example table.sample(50)\n   * @example table.sample(100, { replace: true })\n   * @example table.groupby('colA').sample(() => op.floor(0.5 * op.count()))\n   */\n  sample(size, options) {\n    return this.__sample(this, size, options);\n  }\n\n  /**\n   * Select a subset of columns into a new table, potentially renaming them.\n   * @param {...Select} columns An ordered selection of columns.\n   *  The input may consist of column name strings, column integer indices,\n   *  rename objects with current column names as keys and new column names\n   *  as values, or functions that take a table as input and returns a valid\n   *  selection parameter (typically the output of selection helper functions\n   *  such as {@link all}, {@link not}, or {@link range}).\n   * @return {this} A new table of selected columns.\n   * @example table.select('colA', 'colB')\n   * @example table.select(not('colB', 'colC'))\n   * @example table.select({ colA: 'newA', colB: 'newB' })\n   */\n  select(...columns) {\n    return this.__select(this, columns.flat());\n  }\n\n  /**\n   * Ungroup a table, removing any grouping criteria.\n   * Undoes the effects of {@link Transformable#groupby}.\n   * @return {this} A new ungrouped table, or this table if not grouped.\n   * @example table.ungroup()\n   */\n  ungroup() {\n    return this.__ungroup(this);\n  }\n\n  /**\n   * Unorder a table, removing any sorting criteria.\n   * Undoes the effects of {@link Transformable#orderby}.\n   * @return {this} A new unordered table, or this table if not ordered.\n   * @example table.unorder()\n   */\n  unorder() {\n    return this.__unorder(this);\n  }\n\n  // -- Cleaning Verbs ------------------------------------------------------\n\n  /**\n   * De-duplicate table rows by removing repeated row values.\n   * @param {...ExprList} keys Key columns to check for duplicates.\n   *  Two rows are considered duplicates if they have matching values for\n   *  all keys. If keys are unspecified, all columns are used.\n   *  The keys may be specified using column name strings, column index\n   *  numbers, value objects with output column names for keys and table\n   *  expressions for values, or selection helper functions.\n   * @return {this} A new de-duplicated table.\n   * @example table.dedupe()\n   * @example table.dedupe('a', 'b')\n   * @example table.dedupe({ abs: d => op.abs(d.a) })\n   */\n  dedupe(...keys) {\n    return this.__dedupe(this, keys.flat());\n  }\n\n  /**\n   * Impute missing values or rows. Accepts a set of column-expression pairs\n   * and evaluates the expressions to replace any missing (null, undefined,\n   * or NaN) values in the original column.\n   * If the expand option is specified, imputes new rows for missing\n   * combinations of values. All combinations of key values (a full cross\n   * product) are considered for each level of grouping (specified by\n   * {@link Transformable#groupby}). New rows will be added for any combination\n   * of key and groupby values not already contained in the table. For all\n   * non-key and non-group columns the new rows are populated with imputation\n   * values (first argument) if specified, otherwise undefined.\n   * If the expand option is specified, any filter or orderby settings are\n   * removed from the output table, but groupby settings persist.\n   * @param {ExprObject} values Object of name-value pairs for the column values\n   *  to impute. The input object should have existing column names for keys\n   *  and table expressions for values. The expressions will be evaluated to\n   *  determine replacements for any missing values.\n   * @param {ImputeOptions} [options] Imputation options. The expand\n   *  property specifies a set of column values to consider for imputing\n   *  missing rows. All combinations of expanded values are considered, and\n   *  new rows are added for each combination that does not appear in the\n   *  input table.\n   * @return {this} A new table with imputed values and/or rows.\n   * @example table.impute({ v: () => 0 })\n   * @example table.impute({ v: d => op.mean(d.v) })\n   * @example table.impute({ v: () => 0 }, { expand: ['x', 'y'] })\n   */\n  impute(values, options) {\n    return this.__impute(this, values, options);\n  }\n\n  // -- Reshaping Verbs -----------------------------------------------------\n\n  /**\n   * Fold one or more columns into two key-value pair columns.\n   * The fold transform is an inverse of the {@link Transformable#pivot} transform.\n   * The resulting table has two new columns, one containing the column\n   * names (named \"key\") and the other the column values (named \"value\").\n   * The number of output rows equals the original row count multiplied\n   * by the number of folded columns.\n   * @param {ExprList} values The columns to fold.\n   *  The columns may be specified using column name strings, column index\n   *  numbers, value objects with output column names for keys and table\n   *  expressions for values, or selection helper functions.\n   * @param {FoldOptions} [options] Options for folding.\n   * @return {this} A new folded table.\n   * @example table.fold('colA')\n   * @example table.fold(['colA', 'colB'])\n   * @example table.fold(range(5, 8))\n   */\n  fold(values, options) {\n    return this.__fold(this, values, options);\n  }\n\n  /**\n   * Pivot columns into a cross-tabulation.\n   * The pivot transform is an inverse of the {@link Transformable#fold} transform.\n   * The resulting table has new columns for each unique combination\n   * of the provided *keys*, populated with the provided *values*.\n   * The provided *values* must be aggregates, as a single set of keys may\n   * include more than one row. If string-valued, the *any* aggregate is used.\n   * If only one *values* column is defined, the new pivoted columns will\n   * be named using key values directly. Otherwise, input value column names\n   * will be included as a component of the output column names.\n   * @param {ExprList} keys Key values to map to new column names.\n   *  The keys may be specified using column name strings, column index\n   *  numbers, value objects with output column names for keys and table\n   *  expressions for values, or selection helper functions.\n   * @param {ExprList} values Output values for pivoted columns.\n   *  Column references will be wrapped in an *any* aggregate.\n   *  If object-valued, the input object should have output value\n   *  names for keys and aggregate table expressions for values.\n   * @param {PivotOptions} [options] Options for pivoting.\n   * @return {this} A new pivoted table.\n   * @example table.pivot('key', 'value')\n   * @example table.pivot(['keyA', 'keyB'], ['valueA', 'valueB'])\n   * @example table.pivot({ key: d => d.key }, { value: d => sum(d.value) })\n   */\n  pivot(keys, values, options) {\n    return this.__pivot(this, keys, values, options);\n  }\n\n  /**\n   * Spread array elements into a set of new columns.\n   * Output columns are named based on the value key and array index.\n   * @param {ExprList} values The column values to spread.\n   *  The values may be specified using column name strings, column index\n   *  numbers, value objects with output column names for keys and table\n   *  expressions for values, or selection helper functions.\n   * @param {SpreadOptions} [options] Options for spreading.\n   * @return {this} A new table with the spread columns added.\n   * @example table.spread({ a: split(d.text, '') })\n   * @example table.spread('arrayCol', { limit: 100 })\n   */\n  spread(values, options) {\n    return this.__spread(this, values, options);\n  }\n\n  /**\n   * Unroll one or more array-valued columns into new rows.\n   * If more than one array value is used, the number of new rows\n   * is the smaller of the limit and the largest length.\n   * Values for all other columns are copied over.\n   * @param {ExprList} values The column values to unroll.\n   *  The values may be specified using column name strings, column index\n   *  numbers, value objects with output column names for keys and table\n   *  expressions for values, or selection helper functions.\n   * @param {UnrollOptions} [options] Options for unrolling.\n   * @return {this} A new unrolled table.\n   * @example table.unroll('colA', { limit: 1000 })\n   */\n  unroll(values, options) {\n    return this.__unroll(this, values, options);\n  }\n\n  // -- Joins ---------------------------------------------------------------\n\n  /**\n   * Lookup values from a secondary table and add them as new columns.\n   * A lookup occurs upon matching key values for rows in both tables.\n   * If the secondary table has multiple rows with the same key, only\n   * the last observed instance will be considered in the lookup.\n   * Lookup is similar to {@link Transformable#join_left}, but with a simpler\n   * syntax and the added constraint of allowing at most one match only.\n   * @param {TableRef} other The secondary table to look up values from.\n   * @param {JoinKeys} [on] Lookup keys (column name strings or table\n   *  expressions) for this table and the secondary table, respectively.\n   * @param {...ExprList} values The column values to add from the\n   *  secondary table. Can be column name strings or objects with column\n   *  names as keys and table expressions as values.\n   * @return {this} A new table with lookup values added.\n   * @example table.lookup(other, ['key1', 'key2'], 'value1', 'value2')\n   */\n  lookup(other, on, ...values) {\n    return this.__lookup(this, other, on, values.flat());\n  }\n\n  /**\n   * Join two tables, extending the columns of one table with\n   * values from the other table. The current table is considered\n   * the \"left\" table in the join, and the new table input is\n   * considered the \"right\" table in the join. By default an inner\n   * join is performed, removing all rows that do not match the\n   * join criteria. To perform left, right, or full outer joins, use\n   * the {@link Transformable#join_left}, {@link Transformable#join_right}, or\n   * {@link Transformable#join_full} methods, or provide an options argument.\n   * @param {TableRef} other The other (right) table to join with.\n   * @param {JoinPredicate} [on] The join criteria for matching table rows.\n   *  If unspecified, the values of all columns with matching names\n   *  are compared.\n   *  If array-valued, a two-element array should be provided, containing\n   *  the columns to compare for the left and right tables, respectively.\n   *  If a one-element array or a string value is provided, the same\n   *  column names will be drawn from both tables.\n   *  If function-valued, should be a two-table table expression that\n   *  returns a boolean value. When providing a custom predicate, note that\n   *  join key values can be arrays or objects, and that normal join\n   *  semantics do not consider null or undefined values to be equal (that is,\n   *  null !== null). Use the op.equal function to handle these cases.\n   * @param {JoinValues} [values] The columns to include in the join output.\n   *  If unspecified, all columns from both tables are included; paired\n   *  join keys sharing the same column name are included only once.\n   *  If array-valued, a two element array should be provided, containing\n   *  the columns to include for the left and right tables, respectively.\n   *  Array input may consist of column name strings, objects with output\n   *  names as keys and single-table table expressions as values, or the\n   *  selection helper functions {@link all}, {@link not}, or {@link range}.\n   *  If object-valued, specifies the key-value pairs for each output,\n   *  defined using two-table table expressions.\n   * @param {JoinOptions} [options] Options for the join.\n   * @return {this} A new joined table.\n   * @example table.join(other, ['keyL', 'keyR'])\n   * @example table.join(other, (a, b) => equal(a.keyL, b.keyR))\n   */\n  join(other, on, values, options) {\n    return this.__join(this, other, on, values, options);\n  }\n\n  /**\n   * Perform a left outer join on two tables. Rows in the left table\n   * that do not match a row in the right table will be preserved.\n   * This is a convenience method with fixed options for {@link Transformable#join}.\n   * @param {TableRef} other The other (right) table to join with.\n   * @param {JoinPredicate} [on] The join criteria for matching table rows.\n   *  If unspecified, the values of all columns with matching names\n   *  are compared.\n   *  If array-valued, a two-element array should be provided, containing\n   *  the columns to compare for the left and right tables, respectively.\n   *  If a one-element array or a string value is provided, the same\n   *  column names will be drawn from both tables.\n   *  If function-valued, should be a two-table table expression that\n   *  returns a boolean value. When providing a custom predicate, note that\n   *  join key values can be arrays or objects, and that normal join\n   *  semantics do not consider null or undefined values to be equal (that is,\n   *  null !== null). Use the op.equal function to handle these cases.\n   * @param {JoinValues} [values] The columns to include in the join output.\n   *  If unspecified, all columns from both tables are included; paired\n   *  join keys sharing the same column name are included only once.\n   *  If array-valued, a two element array should be provided, containing\n   *  the columns to include for the left and right tables, respectively.\n   *  Array input may consist of column name strings, objects with output\n   *  names as keys and single-table table expressions as values, or the\n   *  selection helper functions {@link all}, {@link not}, or {@link range}.\n   *  If object-valued, specifies the key-value pairs for each output,\n   *  defined using two-table table expressions.\n   * @param {JoinOptions} [options] Options for the join. With this method,\n   *  any options will be overridden with {left: true, right: false}.\n   * @return {this} A new joined table.\n   * @example table.join_left(other, ['keyL', 'keyR'])\n   * @example table.join_left(other, (a, b) => equal(a.keyL, b.keyR))\n   */\n  join_left(other, on, values, options) {\n    const opt = { ...options, left: true, right: false };\n    return this.__join(this, other, on, values, opt);\n  }\n\n  /**\n   * Perform a right outer join on two tables. Rows in the right table\n   * that do not match a row in the left table will be preserved.\n   * This is a convenience method with fixed options for {@link Transformable#join}.\n   * @param {TableRef} other The other (right) table to join with.\n   * @param {JoinPredicate} [on] The join criteria for matching table rows.\n   *  If unspecified, the values of all columns with matching names\n   *  are compared.\n   *  If array-valued, a two-element array should be provided, containing\n   *  the columns to compare for the left and right tables, respectively.\n   *  If a one-element array or a string value is provided, the same\n   *  column names will be drawn from both tables.\n   *  If function-valued, should be a two-table table expression that\n   *  returns a boolean value. When providing a custom predicate, note that\n   *  join key values can be arrays or objects, and that normal join\n   *  semantics do not consider null or undefined values to be equal (that is,\n   *  null !== null). Use the op.equal function to handle these cases.\n   * @param {JoinValues} [values] The columns to include in the join output.\n   *  If unspecified, all columns from both tables are included; paired\n   *  join keys sharing the same column name are included only once.\n   *  If array-valued, a two element array should be provided, containing\n   *  the columns to include for the left and right tables, respectively.\n   *  Array input may consist of column name strings, objects with output\n   *  names as keys and single-table table expressions as values, or the\n   *  selection helper functions {@link all}, {@link not}, or {@link range}.\n   *  If object-valued, specifies the key-value pairs for each output,\n   *  defined using two-table table expressions.\n   * @param {JoinOptions} [options] Options for the join. With this method,\n   *  any options will be overridden with {left: false, right: true}.\n   * @return {this} A new joined table.\n   * @example table.join_right(other, ['keyL', 'keyR'])\n   * @example table.join_right(other, (a, b) => equal(a.keyL, b.keyR))\n   */\n  join_right(other, on, values, options) {\n    const opt = { ...options, left: false, right: true };\n    return this.__join(this, other, on, values, opt);\n  }\n\n  /**\n   * Perform a full outer join on two tables. Rows in either the left or\n   * right table that do not match a row in the other will be preserved.\n   * This is a convenience method with fixed options for {@link Transformable#join}.\n   * @param {TableRef} other The other (right) table to join with.\n   * @param {JoinPredicate} [on] The join criteria for matching table rows.\n   *  If unspecified, the values of all columns with matching names\n   *  are compared.\n   *  If array-valued, a two-element array should be provided, containing\n   *  the columns to compare for the left and right tables, respectively.\n   *  If a one-element array or a string value is provided, the same\n   *  column names will be drawn from both tables.\n   *  If function-valued, should be a two-table table expression that\n   *  returns a boolean value. When providing a custom predicate, note that\n   *  join key values can be arrays or objects, and that normal join\n   *  semantics do not consider null or undefined values to be equal (that is,\n   *  null !== null). Use the op.equal function to handle these cases.\n   * @param {JoinValues} [values] The columns to include in the join output.\n   *  If unspecified, all columns from both tables are included; paired\n   *  join keys sharing the same column name are included only once.\n   *  If array-valued, a two element array should be provided, containing\n   *  the columns to include for the left and right tables, respectively.\n   *  Array input may consist of column name strings, objects with output\n   *  names as keys and single-table table expressions as values, or the\n   *  selection helper functions {@link all}, {@link not}, or {@link range}.\n   *  If object-valued, specifies the key-value pairs for each output,\n   *  defined using two-table table expressions.\n   * @param {JoinOptions} [options] Options for the join. With this method,\n   *  any options will be overridden with {left: true, right: true}.\n   * @return {this} A new joined table.\n   * @example table.join_full(other, ['keyL', 'keyR'])\n   * @example table.join_full(other, (a, b) => equal(a.keyL, b.keyR))\n   */\n  join_full(other, on, values, options) {\n    const opt = { ...options, left: true, right: true };\n    return this.__join(this, other, on, values, opt);\n  }\n\n  /**\n   * Produce the Cartesian cross product of two tables. The output table\n   * has one row for every pair of input table rows. Beware that outputs\n   * may be quite large, as the number of output rows is the product of\n   * the input row counts.\n   * This is a convenience method for {@link Transformable#join} in which the\n   * join criteria is always true.\n   * @param {TableRef} other The other (right) table to join with.\n   * @param {JoinValues} [values] The columns to include in the output.\n   *  If unspecified, all columns from both tables are included.\n   *  If array-valued, a two element array should be provided, containing\n   *  the columns to include for the left and right tables, respectively.\n   *  Array input may consist of column name strings, objects with output\n   *  names as keys and single-table table expressions as values, or the\n   *  selection helper functions {@link all}, {@link not}, or {@link range}.\n   *  If object-valued, specifies the key-value pairs for each output,\n   *  defined using two-table table expressions.\n   * @param {JoinOptions} [options] Options for the join.\n   * @return {this} A new joined table.\n   * @example table.cross(other)\n   * @example table.cross(other, [['leftKey', 'leftVal'], ['rightVal']])\n   */\n  cross(other, values, options) {\n    return this.__cross(this, other, values, options);\n  }\n\n  /**\n   * Perform a semi-join, filtering the left table to only rows that\n   * match a row in the right table.\n   * @param {TableRef} other The other (right) table to join with.\n   * @param {JoinPredicate} [on] The join criteria for matching table rows.\n   *  If unspecified, the values of all columns with matching names\n   *  are compared.\n   *  If array-valued, a two-element array should be provided, containing\n   *  the columns to compare for the left and right tables, respectively.\n   *  If a one-element array or a string value is provided, the same\n   *  column names will be drawn from both tables.\n   *  If function-valued, should be a two-table table expression that\n   *  returns a boolean value. When providing a custom predicate, note that\n   *  join key values can be arrays or objects, and that normal join\n   *  semantics do not consider null or undefined values to be equal (that is,\n   *  null !== null). Use the op.equal function to handle these cases.\n   * @return {this} A new filtered table.\n   * @example table.semijoin(other)\n   * @example table.semijoin(other, ['keyL', 'keyR'])\n   * @example table.semijoin(other, (a, b) => equal(a.keyL, b.keyR))\n   */\n  semijoin(other, on) {\n    return this.__semijoin(this, other, on);\n  }\n\n  /**\n   * Perform an anti-join, filtering the left table to only rows that\n   * do *not* match a row in the right table.\n   * @param {TableRef} other The other (right) table to join with.\n   * @param {JoinPredicate} [on] The join criteria for matching table rows.\n   *  If unspecified, the values of all columns with matching names\n   *  are compared.\n   *  If array-valued, a two-element array should be provided, containing\n   *  the columns to compare for the left and right tables, respectively.\n   *  If a one-element array or a string value is provided, the same\n   *  column names will be drawn from both tables.\n   *  If function-valued, should be a two-table table expression that\n   *  returns a boolean value. When providing a custom predicate, note that\n   *  join key values can be arrays or objects, and that normal join\n   *  semantics do not consider null or undefined values to be equal (that is,\n   *  null !== null). Use the op.equal function to handle these cases.\n   * @return {this} A new filtered table.\n   * @example table.antijoin(other)\n   * @example table.antijoin(other, ['keyL', 'keyR'])\n   * @example table.antijoin(other, (a, b) => equal(a.keyL, b.keyR))\n   */\n  antijoin(other, on) {\n    return this.__antijoin(this, other, on);\n  }\n\n  // -- Set Operations ------------------------------------------------------\n\n  /**\n   * Concatenate multiple tables into a single table, preserving all rows.\n   * This transformation mirrors the UNION_ALL operation in SQL.\n   * Only named columns in this table are included in the output.\n   * @see Transformable#union\n   * @param  {...TableRef} tables A list of tables to concatenate.\n   * @return {this} A new concatenated table.\n   * @example table.concat(other)\n   * @example table.concat(other1, other2)\n   * @example table.concat([other1, other2])\n   */\n  concat(...tables) {\n    return this.__concat(this, tables.flat());\n  }\n\n  /**\n   * Union multiple tables into a single table, deduplicating all rows.\n   * This transformation mirrors the UNION operation in SQL. It is\n   * similar to {@link Transformable#concat} but suppresses duplicate rows with\n   * values identical to another row.\n   * Only named columns in this table are included in the output.\n   * @see Transformable#concat\n   * @param  {...TableRef} tables A list of tables to union.\n   * @return {this} A new unioned table.\n   * @example table.union(other)\n   * @example table.union(other1, other2)\n   * @example table.union([other1, other2])\n   */\n  union(...tables) {\n    return this.__union(this, tables.flat());\n  }\n\n  /**\n   * Intersect multiple tables, keeping only rows whose with identical\n   * values for all columns in all tables, and deduplicates the rows.\n   * This transformation is similar to a series of {@link Transformable#semijoin}\n   * calls, but additionally suppresses duplicate rows.\n   * @see Transformable#semijoin\n   * @param  {...TableRef} tables A list of tables to intersect.\n   * @return {this} A new filtered table.\n   * @example table.intersect(other)\n   * @example table.intersect(other1, other2)\n   * @example table.intersect([other1, other2])\n   */\n  intersect(...tables) {\n    return this.__intersect(this, tables.flat());\n  }\n\n  /**\n   * Compute the set difference with multiple tables, keeping only rows in\n   * this table that whose values do not occur in the other tables.\n   * This transformation is similar to a series of {@link Transformable#antijoin}\n   * calls, but additionally suppresses duplicate rows.\n   * @see Transformable#antijoin\n   * @param  {...TableRef} tables A list of tables to difference.\n   * @return {this} A new filtered table.\n   * @example table.except(other)\n   * @example table.except(other1, other2)\n   * @example table.except([other1, other2])\n   */\n  except(...tables) {\n    return this.__except(this, tables.flat());\n  }\n}\n\n// -- Parameter Types -------------------------------------------------------\n\n/**\n * Table expression parameters.\n * @typedef {Object.<string, *>} Params\n */\n\n/**\n * A reference to a column by string name or integer index.\n * @typedef {string|number} ColumnRef\n */\n\n/**\n * A value that can be coerced to a string.\n * @typedef {object} Stringable\n * @property {() => string} toString String coercion method.\n */\n\n/**\n * A table expression provided as a string or string-coercible value.\n * @typedef {string|Stringable} TableExprString\n */\n\n/**\n * A struct object with arbitraty named properties.\n * @typedef {Object.<string, *>} Struct\n */\n\n/**\n * A function defined over a table row.\n * @typedef {(d?: Struct, $?: Params) => any} TableExprFunc\n */\n\n/**\n * A table expression defined over a single table.\n * @typedef {TableExprFunc|TableExprString} TableExpr\n */\n\n/**\n * A function defined over rows from two tables.\n * @typedef {(a?: Struct, b?: Struct, $?: Params) => any} TableFunc2\n */\n\n/**\n * A table expression defined over two tables.\n * @typedef {TableExprFunc2|TableExprString} TableExpr2\n */\n\n/**\n * An object that maps current column names to new column names.\n * @typedef {{ [name: string]: string }} RenameMap\n */\n\n/**\n * A selection helper function.\n * @typedef {(table: any) => string[]} SelectHelper\n */\n\n/**\n * One or more column selections, potentially with renaming.\n * The input may consist of a column name string, column integer index, a\n * rename map object with current column names as keys and new column names\n * as values, or a select helper function that takes a table as input and\n * returns a valid selection parameter.\n * @typedef {ColumnRef|RenameMap|SelectHelper} SelectEntry\n */\n\n/**\n * An ordered set of column selections, potentially with renaming.\n * @typedef {SelectEntry|SelectEntry[]} Select\n */\n\n/**\n * An object of column name / table expression pairs.\n * @typedef {{ [name: string]: TableExpr }} ExprObject\n */\n\n/**\n * An object of column name / two-table expression pairs.\n * @typedef {{ [name: string]: TableExpr2 }} Expr2Object\n */\n\n/**\n * An ordered set of one or more column values.\n * @typedef {ColumnRef|SelectHelper|ExprObject} ListEntry\n */\n\n/**\n * An ordered set of column values.\n * Entries may be column name strings, column index numbers, value objects\n * with output column names for keys and table expressions for values,\n * or a selection helper function.\n * @typedef {ListEntry|ListEntry[]} ExprList\n */\n\n/**\n * A reference to a data table or transformable instance.\n * @typedef {Transformable|string} TableRef\n */\n\n/**\n * One or more orderby sort criteria.\n * If a string, order by the column with that name.\n * If a number, order by the column with that index.\n * If a function, must be a valid table expression; aggregate functions\n *  are permitted, but window functions are not.\n * If an object, object values must be valid values parameters\n *  with output column names for keys and table expressions\n *  for values. The output name keys will subsequently be ignored.\n * @typedef {ColumnRef|TableExpr|ExprObject} OrderKey\n */\n\n/**\n * An ordered set of orderby sort criteria, in precedence order.\n * @typedef {OrderKey|OrderKey[]} OrderKeys\n */\n\n/**\n * Column values to use as a join key.\n * @typedef {ColumnRef|TableExprFunc} JoinKey\n */\n\n/**\n * An ordered set of join keys.\n * @typedef {JoinKey|[JoinKey[]]|[JoinKey[], JoinKey[]]} JoinKeys\n */\n\n/**\n * A predicate specification for joining two tables.\n * @typedef {JoinKeys|TableExprFunc2|null} JoinPredicate\n */\n\n/**\n * An array of per-table join values to extract.\n * @typedef {[ExprList]|[ExprList, ExprList]|[ExprList, ExprList, Expr2Object]} JoinList\n */\n\n/**\n * A specification of join values to extract.\n * @typedef {JoinList|Expr2Object} JoinValues\n */\n\n// -- Transform Options -----------------------------------------------------\n\n/**\n * Options for count transformations.\n * @typedef {object} CountOptions\n * @property {string} [as='count'] The name of the output count column.\n */\n\n/**\n * Options for derive transformations.\n * @typedef {object} DeriveOptions\n * @property {boolean} [drop=false] A flag indicating if the original\n *  columns should be dropped, leaving only the derived columns. If true,\n *  the before and after options are ignored.\n * @property {Select} [before]\n *  An anchor column that relocated columns should be placed before.\n *  The value can be any legal column selection. If multiple columns are\n *  selected, only the first column will be used as an anchor.\n *  It is an error to specify both before and after options.\n * @property {Select} [after]\n *  An anchor column that relocated columns should be placed after.\n *  The value can be any legal column selection. If multiple columns are\n *  selected, only the last column will be used as an anchor.\n *  It is an error to specify both before and after options.\n */\n\n/**\n * Options for relocate transformations.\n * @typedef {object} RelocateOptions\n * @property {Selection} [before]\n *  An anchor column that relocated columns should be placed before.\n *  The value can be any legal column selection. If multiple columns are\n *  selected, only the first column will be used as an anchor.\n *  It is an error to specify both before and after options.\n * @property {Selection} [after]\n *  An anchor column that relocated columns should be placed after.\n *  The value can be any legal column selection. If multiple columns are\n *  selected, only the last column will be used as an anchor.\n *  It is an error to specify both before and after options.\n */\n\n/**\n * Options for sample transformations.\n * @typedef {object} SampleOptions\n * @property {boolean} [replace=false] Flag for sampling with replacement.\n * @property {boolean} [shuffle=true] Flag to ensure randomly ordered rows.\n * @property {string|TableExprFunc} [weight] Column values to use as weights\n *  for sampling. Rows will be sampled with probability proportional to\n *  their relative weight. The input should be a column name string or\n *  a table expression compatible with {@link Transformable#derive}.\n */\n\n/**\n * Options for impute transformations.\n * @typedef {object} ImputeOptions\n * @property {ExprList} [expand] Column values to combine to impute missing\n *  rows. For column names and indices, all unique column values are\n *  considered. Otherwise, each entry should be an object of name-expresion\n *  pairs, with valid table expressions for {@link Transformable#rollup}.\n *  All combinations of values are checked for each set of unique groupby\n *  values.\n */\n\n/**\n * Options for fold transformations.\n * @typedef {object} FoldOptions\n * @property {string[]} [as=['key', 'value']] An array indicating the\n *  output column names to use for the key and value columns, respectively.\n */\n\n/**\n * Options for pivot transformations.\n * @typedef {object} PivotOptions\n * @property {number} [limit=Infinity] The maximum number of new columns to generate.\n * @property {string} [keySeparator='_'] A string to place between multiple key names.\n * @property {string} [valueSeparator='_'] A string to place between key and value names.\n * @property {boolean} [sort=true] Flag for alphabetical sorting of new column names.\n */\n\n/**\n * Options for spread transformations.\n * @typedef {object} SpreadOptions\n * @property {boolean} [drop=true] Flag indicating if input columns to the\n *  spread operation should be dropped in the output table.\n * @property {number} [limit=Infinity] The maximum number of new columns to\n *  generate.\n * @property {string[]} [as] Output column names to use. This option only\n *  applies when a single column is spread. If the given array of names is\n *  shorter than the number of generated columns and no limit option is\n *  specified, the additional generated columns will be dropped.\n */\n\n/**\n * Options for unroll transformations.\n * @typedef {object} UnrollOptions\n * @property {number} [limit=Infinity] The maximum number of new rows\n *  to generate per array value.\n * @property {boolean|string} [index=false] Flag or column name for adding\n *  zero-based array index values as an output column. If true, a new column\n *  named \"index\" will be included. If string-valued, a new column with\n *  the given name will be added.\n * @property {Select} [drop] Columns to drop from the output. The input may\n *  consist of column name strings, column integer indices, objects with\n *  column names as keys, or functions that take a table as input and\n *  return a valid selection parameter (typically the output of selection\n *  helper functions such as {@link all}, {@link not}, or {@link range}).\n */\n\n/**\n * Options for join transformations.\n * @typedef {object} JoinOptions\n * @property {boolean} [left=false] Flag indicating a left outer join.\n *  If both the *left* and *right* are true, indicates a full outer join.\n * @property {boolean} [right=false] Flag indicating a right outer join.\n *  If both the *left* and *right* are true, indicates a full outer join.\n * @property {string[]} [suffix=['_1', '_2']] Column name suffixes to\n *  append if two columns with the same name are produced by the join.\n */","export default function(message) {\n  throw Error(message);\n}","export default function(value) {\n  return typeof value === 'number';\n}","export default function(value) {\n  return typeof value === 'function';\n}","import isFunction from './is-function';\n\nexport default function(reps, value) {\n  const result = Array(reps);\n  if (isFunction(value)) {\n    for (let i = 0; i < reps; ++i) {\n      result[i] = value(i);\n    }\n  } else {\n    result.fill(value);\n  }\n  return result;\n}","import Transformable from './transformable';\nimport error from '../util/error';\nimport isNumber from '../util/is-number';\nimport repeat from '../util/repeat';\n\n/**\n * Abstract class representing a data table.\n */\nexport default class Table extends Transformable {\n\n  /**\n   * Instantiate a new Table instance.\n   * @param {string[]} names An ordered list of column names.\n   * @param {number} nrows The number of rows.\n   * @param {TableData} data The backing data, which can vary by implementation.\n   * @param {BitSet} [filter] A bit mask for which rows to include.\n   * @param {GroupBySpec} [groups] A groupby specification for grouping ows.\n   * @param {RowComparator} [order] A comparator function for sorting rows.\n   * @param {Params} [params] Parameter values for table expressions.\n   */\n  constructor(names, nrows, data, filter, groups, order, params) {\n    super(params);\n    this._names = Object.freeze(names);\n    this._data = data;\n    this._total = nrows;\n    this._nrows = filter ? filter.count() : nrows;\n    this._mask = (nrows !== this._nrows && filter) || null;\n    this._group = groups || null;\n    this._order = order || null;\n  }\n\n  /**\n   * Create a new table with the same type as this table.\n   * The new table may have different data, filter, grouping, or ordering\n   * based on the values of the optional configuration argument. If a\n   * setting is not specified, it is inherited from the current table.\n   * @param {CreateOptions} [options] Creation options for the new table.\n   * @return {this} A newly created table.\n   */\n  create(options) { // eslint-disable-line no-unused-vars\n    error('Not implemented');\n  }\n\n  /**\n   * Provide an informative object string tag.\n   */\n  get [Symbol.toStringTag]() {\n    if (!this._names) return 'Object'; // bail if called on prototype\n    const nr = this.numRows() + ' row' + (this.numRows() !== 1 ? 's' : '');\n    const nc = this.numCols() + ' col' + (this.numCols() !== 1 ? 's' : '');\n    return `Table: ${nc} x ${nr}`\n      + (this.isFiltered() ? ` (${this.totalRows()} backing)` : '')\n      + (this.isGrouped() ? `, ${this._group.size} groups` : '')\n      + (this.isOrdered() ? ', ordered' : '');\n  }\n\n  /**\n   * Indicates if the table has a filter applied.\n   * @return {boolean} True if filtered, false otherwise.\n   */\n  isFiltered() {\n    return !!this._mask;\n  }\n\n  /**\n   * Indicates if the table has a groupby specification.\n   * @return {boolean} True if grouped, false otherwise.\n   */\n  isGrouped() {\n    return !!this._group;\n  }\n\n  /**\n   * Indicates if the table has a row order comparator.\n   * @return {boolean} True if ordered, false otherwise.\n   */\n  isOrdered() {\n    return !!this._order;\n  }\n\n  /**\n   * Returns the internal table storage data structure.\n   * @return {TableData} The backing table storage data structure.\n   */\n  data() {\n    return this._data;\n  }\n\n  /**\n   * Returns the filter bitset mask, if defined.\n   * @return {BitSet} The filter bitset mask.\n   */\n  mask() {\n    return this._mask;\n  }\n\n  /**\n   * Returns the groupby specification, if defined.\n   * @return {GroupBySpec} The groupby specification.\n   */\n  groups() {\n    return this._group;\n  }\n\n  /**\n   * Returns the row order comparator function, if specified.\n   * @return {RowComparator} The row order comparator function.\n   */\n  comparator() {\n    return this._order;\n  }\n\n  /**\n   * The total number of rows in this table, counting both\n   * filtered and unfiltered rows.\n   * @return {number} The number of total rows.\n   */\n  totalRows() {\n    return this._total;\n  }\n\n  /**\n   * The number of active rows in this table. This number may be\n   * less than the total rows if the table has been filtered.\n   * @see Table.totalRows\n   * @return {number} The number of rows.\n   */\n  numRows() {\n    return this._nrows;\n  }\n\n  /**\n   * The number of active rows in this table. This number may be\n   * less than the total rows if the table has been filtered.\n   * @see Table.totalRows\n   * @return {number} The number of rows.\n   */\n  get size() {\n    return this._nrows;\n  }\n\n  /**\n   * The number of columns in this table.\n   * @return {number} The number of columns.\n   */\n  numCols() {\n    return this._names.length;\n  }\n\n  /**\n   * Filter function invoked for each column name.\n   * @callback NameFilter\n   * @param {string} name The column name.\n   * @param {number} index The column index.\n   * @param {string[]} array The array of names.\n   * @return {boolean} Returns true to retain the column name.\n   */\n\n  /**\n   * The table column names, optionally filtered.\n   * @param {NameFilter} [filter] An optional filter function.\n   *  If unspecified, all column names are returned.\n   * @return {string[]} An array of matching column names.\n   */\n  columnNames(filter) {\n    return filter ? this._names.filter(filter) : this._names.slice();\n  }\n\n  /**\n   * The column name at the given index.\n   * @param {number} index The column index.\n   * @return {string} The column name,\n   *  or undefined if the index is out of range.\n   */\n  columnName(index) {\n    return this._names[index];\n  }\n\n  /**\n   * The column index for the given name.\n   * @param {string} name The column name.\n   * @return {number} The column index, or -1 if the name is not found.\n   */\n  columnIndex(name) {\n    return this._names.indexOf(name);\n  }\n\n  /**\n   * Deprecated alias for the table array() method: use table.array()\n   * instead. Get an array of values contained in a column. The resulting\n   * array respects any table filter or orderby criteria.\n   * @param {string} name The column name.\n   * @param {ArrayConstructor|TypedArrayConstructor} [constructor=Array]\n   *  The array constructor for instantiating the output array.\n   * @return {DataValue[]|TypedArray} The array of column values.\n   */\n  columnArray(name, constructor) {\n    return this.array(name, constructor);\n  }\n\n  /**\n   * Get an array of values contained in a column. The resulting array\n   * respects any table filter or orderby criteria.\n   * @param {string} name The column name.\n   * @param {ArrayConstructor|TypedArrayConstructor} [constructor=Array]\n   *  The array constructor for instantiating the output array.\n   * @return {DataValue[]|TypedArray} The array of column values.\n   */\n  array(name, constructor) { // eslint-disable-line no-unused-vars\n    error('Not implemented');\n  }\n\n  /**\n   * Returns an iterator over column values.\n   * @return {Iterator<object>} An iterator over row objects.\n   */\n  *values(name) {\n    const get = this.getter(name);\n    const n = this.numRows();\n    for (let i = 0; i < n; ++i) {\n      yield get(i);\n    }\n  }\n\n  /**\n   * Get the value for the given column and row.\n   * @param {string} name The column name.\n   * @param {number} [row=0] The row index, defaults to zero if not specified.\n   * @return {DataValue} The data value at (column, row).\n   */\n  get(name, row = 0) { // eslint-disable-line no-unused-vars\n    error('Not implemented');\n  }\n\n  /**\n   * Returns an accessor (\"getter\") function for a column. The returned\n   * function takes a row index as its single argument and returns the\n   * corresponding column value.\n   * @param {string} name The column name.\n   * @return {ColumnGetter} The column getter function.\n   */\n  getter(name) { // eslint-disable-line no-unused-vars\n    error('Not implemented');\n  }\n\n  /**\n   * Returns an array of objects representing table rows.\n   * @param {ObjectsOptions} [options] The options for row object generation.\n   * @return {RowObject[]} An array of row objects.\n   */\n  objects(options) { // eslint-disable-line no-unused-vars\n    error('Not implemented');\n  }\n\n  /**\n   * Returns an object representing a table row.\n   * @param {number} [row=0] The row index, defaults to zero if not specified.\n   * @return {object} A row object with named properties for each column.\n   */\n   object(row) { // eslint-disable-line no-unused-vars\n    error('Not implemented');\n  }\n\n  /**\n   * Returns an iterator over objects representing table rows.\n   * @return {Iterator<object>} An iterator over row objects.\n   */\n  [Symbol.iterator]() {\n    error('Not implemented');\n  }\n\n  /**\n   * Print the contents of this table using the console.table() method.\n   * @param {PrintOptions|number} options The options for row object\n   *  generation, determining which rows and columns are printed. If\n   *  number-valued, specifies the row limit.\n   */\n  print(options = {}) {\n    if (isNumber(options)) {\n      options = { limit: options };\n    } else if (options.limit == null) {\n      options.limit = 10;\n    }\n\n    const obj = this.objects({ ...options, grouped: false });\n    const msg = `${this[Symbol.toStringTag]}. Showing ${obj.length} rows.`;\n\n    console.log(msg);   // eslint-disable-line no-console\n    console.table(obj); // eslint-disable-line no-console\n  }\n\n  /**\n   * Returns an array of indices for all rows passing the table filter.\n   * @param {boolean} [order=true] A flag indicating if the returned\n   *  indices should be sorted if this table is ordered. If false, the\n   *  returned indices may or may not be sorted.\n   * @return {Uint32Array} An array of row indices.\n   */\n  indices(order = true) {\n    if (this._index) return this._index;\n\n    const n = this.numRows();\n    const index = new Uint32Array(n);\n    const ordered = this.isOrdered();\n    const bits = this.mask();\n    let row = -1;\n\n    // inline the following for performance:\n    // this.scan(row => index[++i] = row);\n    if (bits) {\n      for (let i = bits.next(0); i >= 0; i = bits.next(i + 1)) {\n        index[++row] = i;\n      }\n    } else {\n      for (let i = 0; i < n; ++i) {\n        index[++row] = i;\n      }\n    }\n\n    // sort index vector\n    if (order && ordered) {\n      const compare = this._order;\n      const data = this._data;\n      index.sort((a, b) => compare(a, b, data));\n    }\n\n    // save indices if they reflect table metadata\n    if (order || !ordered) {\n      this._index = index;\n    }\n\n    return index;\n  }\n\n  /**\n   * Returns an array of indices for each group in the table.\n   * If the table is not grouped, the result is the same as\n   * {@link indices}, but wrapped within an array.\n   * @param {boolean} [order=true] A flag indicating if the returned\n   *  indices should be sorted if this table is ordered. If false, the\n   *  returned indices may or may not be sorted.\n   * @return {number[][]} An array of row index arrays, one per group.\n   *  The indices will be filtered if the table is filtered.\n   */\n  partitions(order = true) {\n    // return partitions if already generated\n    if (this._partitions) {\n      return this._partitions;\n    }\n\n    // if not grouped, return a single partition\n    if (!this.isGrouped()) {\n      return [ this.indices(order) ];\n    }\n\n    // generate partitions\n    const { keys, size } = this._group;\n    const part = repeat(size, () => []);\n\n    // populate partitions, don't sort if indices don't exist\n    // inline the following for performance:\n    // this.scan(row => part[keys[row]].push(row), sort);\n    const sort = this._index;\n    const bits = this.mask();\n    const n = this.numRows();\n    if (sort && this.isOrdered()) {\n      for (let i = 0, r; i < n; ++i) {\n        r = sort[i];\n        part[keys[r]].push(r);\n      }\n    } else if (bits) {\n      for (let i = bits.next(0); i >= 0; i = bits.next(i + 1)) {\n        part[keys[i]].push(i);\n      }\n    } else {\n      for (let i = 0; i < n; ++i) {\n        part[keys[i]].push(i);\n      }\n    }\n\n    // if ordered but not yet sorted, sort partitions directly\n    if (order && !sort && this.isOrdered()) {\n      const compare = this._order;\n      const data = this._data;\n      for (let i = 0; i < size; ++i) {\n        part[i].sort((a, b) => compare(a, b, data));\n      }\n    }\n\n    // save partitions if they reflect table metadata\n    if (order || !this.isOrdered()) {\n      this._partitions = part;\n    }\n\n    return part;\n  }\n\n  /**\n   * Callback function to cancel a table scan.\n   * @callback ScanStop\n   * @return {void}\n   */\n\n  /**\n   * Callback function invoked for each row of a table scan.\n   * @callback ScanVisitor\n   * @param {number} [row] The table row index.\n   * @param {TableData} [data] The backing table data store.\n   * @param {ScanStop} [stop] Function to stop the scan early.\n   *  Callees can invoke this function to prevent future calls.\n   * @return {void}\n   */\n\n  /**\n   * Perform a table scan, visiting each row of the table.\n   * If this table is filtered, only rows passing the filter are visited.\n   * @param {ScanVisitor} fn Callback invoked for each row of the table.\n   * @param {boolean} [order=false] Indicates if the table should be\n   *  scanned in the order determined by {@link Table#orderby}. This\n   *  argument has no effect if the table is unordered.\n   * @property {number} [limit=Infinity] The maximum number of objects to create.\n   * @property {number} [offset=0] The row offset indicating how many initial rows to skip.\n   */\n  scan(fn, order, limit = Infinity, offset = 0) {\n    const filter = this._mask;\n    const nrows = this._nrows;\n    const data = this._data;\n\n    let i = offset || 0;\n    if (i > nrows) return;\n\n    const n = Math.min(nrows, i + limit);\n    const stop = () => i = this._total;\n\n    if (order && this.isOrdered() || filter && this._index) {\n      const index = this.indices();\n      const data = this._data;\n      for (; i < n; ++i) {\n        fn(index[i], data, stop);\n      }\n    } else if (filter) {\n      let c = n - i + 1;\n      for (i = filter.nth(i); --c && i > -1; i = filter.next(i + 1)) {\n        fn(i, data, stop);\n      }\n    } else {\n      for (; i < n; ++i) {\n        fn(i, data, stop);\n      }\n    }\n  }\n\n  /**\n   * Extract rows with indices from start to end (end not included), where\n   * start and end represent per-group ordered row numbers in the table.\n   * @param {number} [start] Zero-based index at which to start extraction.\n   *  A negative index indicates an offset from the end of the group.\n   *  If start is undefined, slice starts from the index 0.\n   * @param {number} [end] Zero-based index before which to end extraction.\n   *  A negative index indicates an offset from the end of the group.\n   *  If end is omitted, slice extracts through the end of the group.\n   * @return {this} A new table with sliced rows.\n   * @example table.slice(1, -1)\n   */\n  slice(start = 0, end = Infinity) {\n    if (this.isGrouped()) return super.slice(start, end);\n\n    // if not grouped, scan table directly\n    const indices = [];\n    const nrows = this.numRows();\n    start = Math.max(0, start + (start < 0 ? nrows : 0));\n    end = Math.min(nrows, Math.max(0, end + (end < 0 ? nrows : 0)));\n    this.scan(row => indices.push(row), true, end - start, start);\n    return this.reify(indices);\n  }\n\n  /**\n   * Reduce a table, processing all rows to produce a new table.\n   * To produce standard aggregate summaries, use {@link rollup}.\n   * This method allows the use of custom reducer implementations,\n   * for example to produce multiple rows for an aggregate.\n   * @param {Reducer} reducer The reducer to apply.\n   * @return {Table} A new table of reducer outputs.\n   */\n  reduce(reducer) {\n    return this.__reduce(this, reducer);\n  }\n}\n\n/**\n * A typed array constructor.\n * @typedef {Uint8ArrayConstructor|Uint16ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor|Int8ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|Float32ArrayConstructor|Float64ArrayConstructor} TypedArrayConstructor\n */\n\n/**\n * A typed array instance.\n * @typedef {Uint8Array|Uint16Array|Uint32Array|BigUint64Array|Int8Array|Int16Array|Int32Array|BigInt64Array|Float32Array|Float64Array} TypedArray\n */\n\n/**\n * Backing table data.\n * @typedef {object|Array} TableData\n */\n\n/**\n * Table value.\n * @typedef {*} DataValue\n */\n\n/**\n * Table row object.\n * @typedef {Object.<string, DataValue>} RowObject\n */\n\n/**\n * Table expression parameters.\n * @typedef {import('./transformable').Params} Params\n */\n\n/**\n * Proxy type for BitSet class.\n * @typedef {import('./bit-set').default} BitSet\n */\n\n/**\n * A table groupby specification.\n * @typedef {object} GroupBySpec\n * @property {number} size The number of groups.\n * @property {string[]} names Column names for each group.\n * @property {RowExpression[]} get Value accessor functions for each group.\n * @property {number[]} rows Indices of an example table row for each group.\n * @property {number[]} keys Per-row group indices, length is total rows of table.\n */\n\n/**\n * Column value accessor.\n * @callback ColumnGetter\n * @param {number} [row] The table row.\n * @return {DataValue}\n */\n\n/**\n * An expression evaluated over a table row.\n * @callback RowExpression\n * @param {number} [row] The table row.\n * @param {TableData} [data] The backing table data store.\n * @return {DataValue}\n */\n\n/**\n * Comparator function for sorting table rows.\n * @callback RowComparator\n * @param {number} rowA The table row index for the first row.\n * @param {number} rowB The table row index for the second row.\n * @param {TableData} data The backing table data store.\n * @return {number} Negative if rowA < rowB, positive if\n *  rowA > rowB, otherwise zero.\n */\n\n/**\n * Options for derived table creation.\n * @typedef {object} CreateOptions\n * @property {TableData} [data] The backing column data.\n * @property {string[]} [names] An ordered list of column names.\n * @property {BitSet} [filter] An additional filter BitSet to apply.\n * @property {GroupBySpec} [groups] The groupby specification to use, or null for no groups.\n * @property {RowComparator} [order] The orderby comparator function to use, or null for no order.\n */\n\n/**\n * Options for generating row objects.\n * @typedef {object} PrintOptions\n * @property {number} [limit=Infinity] The maximum number of objects to create.\n * @property {number} [offset=0] The row offset indicating how many initial rows to skip.\n * @property {import('../table/transformable').Select} [columns]\n *  An ordered set of columns to include. The input may consist of column name\n *  strings, column integer indices, objects with current column names as keys\n *  and new column names as values (for renaming), or selection helper\n *  functions such as {@link all}, {@link not}, or {@link range}.\n */\n\n/**\n * Options for generating row objects.\n * @typedef {object} ObjectsOptions\n * @property {number} [limit=Infinity] The maximum number of objects to create.\n * @property {number} [offset=0] The row offset indicating how many initial rows to skip.\n * @property {import('../table/transformable').Select} [columns]\n *  An ordered set of columns to include. The input may consist of column name\n *  strings, column integer indices, objects with current column names as keys\n *  and new column names as values (for renaming), or selection helper\n *  functions such as {@link all}, {@link not}, or {@link range}.\n * @property {'map'|'entries'|'object'|boolean} [grouped=false]\n *  The export format for groups of rows. The default (false) is to ignore\n *  groups, returning a flat array of objects. The valid values are 'map' or\n *  true (for Map instances), 'object' (for standard objects), or 'entries'\n *  (for arrays in the style of Object.entries). For the 'object' format,\n *  groupby keys are coerced to strings to use as object property names; note\n *  that this can lead to undesirable behavior if the groupby keys are object\n *  values. The 'map' and 'entries' options preserve the groupby key values.\n */\n","import isFunction from '../util/is-function';\n\n/**\n * Class representing an array-backed data column.\n */\nexport default class Column {\n  /**\n   * Create a new column instance.\n   * @param {Array} data The backing array (or array-like object)\n   *  containing the column data.\n   */\n  constructor(data) {\n    this.data = data;\n  }\n\n  /**\n   * Get the length (number of rows) of the column.\n   * @return {number} The length of the column array.\n   */\n  get length() {\n    return this.data.length;\n  }\n\n  /**\n   * Get the column value at the given row index.\n   * @param {number} row The row index of the value to retrieve.\n   * @return {import('./table').DataValue} The column value.\n   */\n  get(row) {\n    return this.data[row];\n  }\n\n  /**\n   * Returns an iterator over the column values.\n   * @return {Iterator<object>} An iterator over column values.\n   */\n  [Symbol.iterator]() {\n    return this.data[Symbol.iterator]();\n  }\n}\n\n/**\n * Column interface. Any object that adheres to this interface\n * can be used as a data column within a {@link ColumnTable}.\n * @typedef {object} ColumnType\n * @property {number} length\n *  The length (number of rows) of the column.\n * @property {import('./table').ColumnGetter} get\n *  Column value getter.\n */\n\n/**\n * Column factory function interface.\n * @callback ColumnFactory\n * @param {*} data The input column data.\n * @return {ColumnType} A column instance.\n */\n\n/**\n * Create a new column from the given input data.\n * @param {any} data The backing column data. If the value conforms to\n *  the Column interface it is returned directly. If the value is an\n *  array, it will be wrapped in a new Column instance.\n * @return {ColumnType} A compatible column instance.\n */\nexport let defaultColumnFactory = function(data) {\n  return data && isFunction(data.get) ? data : new Column(data);\n};\n\n/**\n * Get or set the default factory function for instantiating table columns.\n * @param {ColumnFactory} [factory] The new default factory.\n * @return {ColumnFactory} The current default column factory.\n */\nexport function columnFactory(factory) {\n  return arguments.length\n    ? (defaultColumnFactory = factory)\n    : defaultColumnFactory;\n}","export default function(value) {\n  return value instanceof Date;\n}","export default function(value) {\n  return value === Object(value);\n}","export default function(value) {\n  return value instanceof RegExp;\n}","export default function(value) {\n  return typeof value === 'string';\n}\n","import error from '../util/error';\nimport isArray from '../util/is-array';\nimport isDate from '../util/is-date';\nimport isFunction from '../util/is-function';\nimport isObject from '../util/is-object';\nimport isRegExp from '../util/is-regexp';\nimport isString from '../util/is-string';\n\nexport default function(values, names) {\n  const raise = type => error(`Illegal argument type: ${type || typeof values}`);\n  return values instanceof Map ? fromKeyValuePairs(values.entries(), names)\n    : isDate(values) ? raise('Date')\n    : isRegExp(values) ? raise('RegExp')\n    : isString(values) ? raise()\n    : isArray(values) ? fromArray(values, names)\n    : isFunction(values[Symbol.iterator]) ? fromIterable(values, names)\n    : isObject(values) ? fromKeyValuePairs(Object.entries(values), names)\n    : raise();\n}\n\nfunction fromKeyValuePairs(entries, names = ['key', 'value']) {\n  const keys = [];\n  const vals = [];\n\n  for (const [key, val] of entries) {\n    keys.push(key);\n    vals.push(val);\n  }\n\n  const columns = {};\n  if (names[0]) columns[names[0]] = keys;\n  if (names[1]) columns[names[1]] = vals;\n  return columns;\n}\n\nfunction fromArray(values, names) {\n  const len = values.length;\n  const columns = {};\n  const add = name => columns[name] = Array(len);\n\n  if (len) {\n    names = names || Object.keys(values[0]);\n    const cols = names.map(add);\n    const n = cols.length;\n    for (let idx = 0; idx < len; ++idx) {\n      const row = values[idx];\n      for (let i = 0; i < n; ++i) {\n        cols[i][idx] = row[names[i]];\n      }\n    }\n  } else if (names) {\n    names.forEach(add);\n  }\n\n  return columns;\n}\n\nfunction fromIterable(values, names) {\n  const columns = {};\n  const add = name => columns[name] = [];\n\n  let cols;\n  let n;\n  for (const row of values) {\n    if (!cols) {\n      names = names || Object.keys(row);\n      cols = names.map(add);\n      n = cols.length;\n    }\n    for (let i = 0; i < n; ++i) {\n      cols[i].push(row[names[i]]);\n    }\n  }\n\n  if (!cols && names) {\n    names.forEach(add);\n  }\n\n  return columns;\n}","const { hasOwnProperty } = Object.prototype;\n\nexport default function(object, property) {\n  return hasOwnProperty.call(object, property);\n}","import has from '../util/has';\n\nexport default function(table) {\n  return table\n    ? new ColumnSet({ ...table.data() }, table.columnNames())\n    : new ColumnSet();\n}\n\nclass ColumnSet {\n  constructor(data, names) {\n    this.data = data || {};\n    this.names = names || [];\n  }\n\n  add(name, values) {\n    if (!this.has(name)) this.names.push(name + '');\n    return this.data[name] = values;\n  }\n\n  has(name) {\n    return has(this.data, name);\n  }\n\n  new() {\n    this.filter = null;\n    this.groups = this.groups || null;\n    this.order = null;\n    return this;\n  }\n\n  groupby(groups) {\n    this.groups = groups;\n    return this;\n  }\n}","/**\n * Default NULL (missing) value to use.\n */\nexport default undefined;","const TypedArray = Object.getPrototypeOf(Int8Array);\n\nexport default function(value) {\n  return value instanceof TypedArray;\n}","import isArray from './is-array';\nimport isTypedArray from './is-typed-array';\n\nexport default function isArrayType(value) {\n  return isArray(value) || isTypedArray(value);\n}","export default function(value) {\n  return value != null && value === value;\n}\n","import NULL from '../../util/null';\nimport isArrayType from '../../util/is-array-type';\nimport isString from '../../util/is-string';\nimport isValid from '../../util/is-valid';\n\nconst isSeq = (seq) => isArrayType(seq) || isString(seq);\n\nexport default {\n  compact:      (arr) => isArrayType(arr) ? arr.filter(v => isValid(v)) : arr,\n  concat:       (...values) => [].concat(...values),\n  includes:     (seq, value, index) => isSeq(seq)\n                  ? seq.includes(value, index)\n                  : false,\n  indexof:      (seq, value) => isSeq(seq) ? seq.indexOf(value) : -1,\n  join:         (arr, delim) => isArrayType(arr) ? arr.join(delim) : NULL,\n  lastindexof:  (seq, value) => isSeq(seq) ? seq.lastIndexOf(value) : -1,\n  length:       (seq) => isSeq(seq) ? seq.length : 0,\n  pluck:        (arr, prop) => isArrayType(arr)\n                  ? arr.map(v => isValid(v) ? v[prop] : NULL)\n                  : NULL,\n  reverse:      (seq) => isArrayType(seq) ? seq.slice().reverse()\n                  : isString(seq) ? seq.split('').reverse().join('')\n                  : NULL,\n  slice:        (seq, start, end) => isSeq(seq) ? seq.slice(start, end) : NULL\n};\n","export default function(value, width, char = '0') {\n  const s = value + '';\n  const len = s.length;\n  return len < width ? Array(width - len + 1).join(char) + s : s;\n}","import pad from './pad';\n\nconst pad2 = v => (v < 10 ? '0' : '') + v;\n\nconst formatYear = year => year < 0 ? '-' + pad(-year, 6)\n  : year > 9999 ? '+' + pad(year, 6)\n  : pad(year, 4);\n\nexport function formatISO(year, month, date, hours, min, sec, ms, utc, short) {\n  const suffix = utc ? 'Z' : '';\n  return formatYear(year) + '-' + pad2(month + 1) + '-' + pad2(date) + (\n    !short || ms ? 'T' + pad2(hours) + ':' + pad2(min) + ':' + pad2(sec) + '.' + pad(ms, 3) + suffix\n    : sec ? 'T' + pad2(hours) + ':' + pad2(min) + ':' + pad2(sec) + suffix\n    : min || hours || !utc ? 'T' + pad2(hours) + ':' + pad2(min) + suffix\n    : ''\n  );\n}\n\nexport function formatDate(d, short) {\n  return isNaN(d)\n    ? 'Invalid Date'\n    : formatISO(\n      d.getFullYear(),\n      d.getMonth(),\n      d.getDate(),\n      d.getHours(),\n      d.getMinutes(),\n      d.getSeconds(),\n      d.getMilliseconds(),\n      false, short\n    );\n}\n\nexport function formatUTCDate(d, short) {\n  return isNaN(d)\n    ? 'Invalid Date'\n    : formatISO(\n      d.getUTCFullYear(),\n      d.getUTCMonth(),\n      d.getUTCDate(),\n      d.getUTCHours(),\n      d.getUTCMinutes(),\n      d.getUTCSeconds(),\n      d.getUTCMilliseconds(),\n      true, short\n    );\n}","const iso_re = /^([-+]\\d{2})?\\d{4}(-\\d{2}(-\\d{2})?)?(T\\d{2}:\\d{2}(:\\d{2}(\\.\\d{3})?)?(Z|[-+]\\d{2}:\\d{2})?)?$/;\n\nexport default function(value) {\n  return value.match(iso_re);\n}","import { formatDate, formatUTCDate } from '../../util/format-date';\nimport parseIsoDate from '../../util/parse-iso-date';\n\nconst msMinute = 6e4;\nconst msDay = 864e5;\nconst msWeek = 6048e5;\n\nconst t0 = new Date();\nconst t1 = new Date();\nconst t = d => (\n  t0.setTime(typeof d === 'string' ? parseIsoDate(d) : d),\n  t0\n);\n\n/**\n * Function to create a new Date value.\n * If no arguments are provided, the current time is used.\n * @param {number} [year] The year.\n * @param {number} [month=0] The (zero-based) month.\n * @param {number} [date=1] The date within the month.\n * @param {number} [hours=0] The hour within the day.\n * @param {number} [minutes=0] The minute within the hour.\n * @param {number} [seconds=0] The second within the minute.\n * @param {number} [milliseconds=0] The milliseconds within the second.\n * @return {date} The resuting Date value.\n */\nfunction datetime(year, month, date, hours, minutes, seconds, milliseconds) {\n  return !arguments.length\n    ? new Date(Date.now())\n    : new Date(\n        year,\n        month || 0,\n        date == null ? 1 : date,\n        hours || 0,\n        minutes || 0,\n        seconds || 0,\n        milliseconds || 0\n      );\n}\n\n/**\n * Function to create a new Date value according to UTC time.\n * If no arguments are provided, the current time is used.\n * @param {number} [year] The year.\n * @param {number} [month=0] The (zero-based) month.\n * @param {number} [date=1] The date within the month.\n * @param {number} [hours=0] The hour within the day.\n * @param {number} [minutes=0] The minute within the hour.\n * @param {number} [seconds=0] The second within the minute.\n * @param {number} [milliseconds=0] The milliseconds within the second.\n * @return {date} The resuting Date value.\n */\nfunction utcdatetime(year, month, date, hours, minutes, seconds, milliseconds) {\n  return !arguments.length\n    ? new Date(Date.now())\n    : new Date(Date.UTC(\n        year,\n        month || 0,\n        date == null ? 1 : date,\n        hours || 0,\n        minutes || 0,\n        seconds || 0,\n        milliseconds || 0\n      ));\n}\n\nfunction dayofyear(date) {\n  t1.setTime(+date);\n  t1.setHours(0, 0, 0, 0);\n  t0.setTime(+t1);\n  t0.setMonth(0);\n  t0.setDate(1);\n  const tz = (t1.getTimezoneOffset() - t0.getTimezoneOffset()) * msMinute;\n  return Math.floor(1 + ((t1 - t0) - tz) / msDay);\n}\n\nfunction utcdayofyear(date) {\n  t1.setTime(+date);\n  t1.setUTCHours(0, 0, 0, 0);\n  const t0 = Date.UTC(t1.getUTCFullYear(), 0, 1);\n  return Math.floor(1 + (t1 - t0) / msDay);\n}\n\nfunction week(date, firstday) {\n  const i = firstday || 0;\n  t1.setTime(+date);\n  t1.setDate(t1.getDate() - (t1.getDay() + 7 - i) % 7);\n  t1.setHours(0, 0, 0, 0);\n  t0.setTime(+date);\n  t0.setMonth(0);\n  t0.setDate(1);\n  t0.setDate(1 - (t0.getDay() + 7 - i) % 7);\n  t0.setHours(0, 0, 0, 0);\n  const tz = (t1.getTimezoneOffset() - t0.getTimezoneOffset()) * msMinute;\n  return Math.floor((1 + (t1 - t0) - tz) / msWeek);\n}\n\nfunction utcweek(date, firstday) {\n  const i = firstday || 0;\n  t1.setTime(+date);\n  t1.setUTCDate(t1.getUTCDate() - (t1.getUTCDay() + 7 - i) % 7);\n  t1.setUTCHours(0, 0, 0, 0);\n  t0.setTime(+date);\n  t0.setUTCMonth(0);\n  t0.setUTCDate(1);\n  t0.setUTCDate(1 - (t0.getUTCDay() + 7 - i) % 7);\n  t0.setUTCHours(0, 0, 0, 0);\n  return Math.floor((1 + (t1 - t0)) / msWeek);\n}\n\nexport default {\n  format_date:     (date, shorten) => formatDate(t(date), !shorten),\n  format_utcdate:  (date, shorten) => formatUTCDate(t(date), !shorten),\n  timestamp:       (date) => +t(date),\n  year:            (date) => t(date).getFullYear(),\n  quarter:         (date) => Math.floor(t(date).getMonth() / 3),\n  month:           (date) => t(date).getMonth(),\n  date:            (date) => t(date).getDate(),\n  dayofweek:       (date) => t(date).getDay(),\n  hours:           (date) => t(date).getHours(),\n  minutes:         (date) => t(date).getMinutes(),\n  seconds:         (date) => t(date).getSeconds(),\n  milliseconds:    (date) => t(date).getMilliseconds(),\n  utcyear:         (date) => t(date).getUTCFullYear(),\n  utcquarter:      (date) => Math.floor(t(date).getUTCMonth() / 3),\n  utcmonth:        (date) => t(date).getUTCMonth(),\n  utcdate:         (date) => t(date).getUTCDate(),\n  utcdayofweek:    (date) => t(date).getUTCDay(),\n  utchours:        (date) => t(date).getUTCHours(),\n  utcminutes:      (date) => t(date).getUTCMinutes(),\n  utcseconds:      (date) => t(date).getUTCSeconds(),\n  utcmilliseconds: (date) => t(date).getUTCMilliseconds(),\n  datetime,\n  dayofyear,\n  week,\n  utcdatetime,\n  utcdayofyear,\n  utcweek,\n  now: Date.now\n};","import isISODateString from './is-iso-date-string';\n\nexport default function(value, parse = Date.parse) {\n  return isISODateString(value) ? parse(value) : value;\n}","import isDate from '../../util/is-date';\nimport isRegExp from '../../util/is-regexp';\nimport isObject from '../../util/is-object';\n\n/**\n * Compare two values for equality, using join semantics in which null\n * !== null. If the inputs are object-valued, a deep equality check\n * of array entries or object key-value pairs is performed.\n * @param {*} a The first input.\n * @param {*} b The second input.\n * @return {boolean} True if equal, false if not.\n */\nexport default function equal(a, b) {\n  return (a == null || b == null || a !== a || b !== b) ? false\n    : a === b ? true\n    : (isDate(a) || isDate(b)) ? +a === +b\n    : (isRegExp(a) && isRegExp(b)) ? a + '' === b + ''\n    : (isObject(a) && isObject(b)) ? deepEqual(a, b)\n    : false;\n}\n\nfunction deepEqual(a, b) {\n  if (Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) {\n    return false;\n  }\n\n  if (a.length || b.length) {\n    return arrayEqual(a, b);\n  }\n\n  const keysA = Object.keys(a);\n  const keysB = Object.keys(b);\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n  keysA.sort();\n  keysB.sort();\n\n  if (!arrayEqual(keysA, keysB, (a, b) => a === b)) {\n    return false;\n  }\n\n  const n = keysA.length;\n  for (let i = 0; i < n; ++i) {\n    const k = keysA[i];\n    if (!equal(a[k], b[k])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction arrayEqual(a, b, test = equal) {\n  const n = a.length;\n  if (n !== b.length) return false;\n\n  for (let i = 0; i < n; ++i) {\n    if (!test(a[i], b[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}","export default {\n  parse_json: (str) => JSON.parse(str),\n  to_json:    (val) => JSON.stringify(val)\n};","import isValid from './is-valid';\n\nlet source = Math.random;\n\nexport function random() {\n  return source();\n}\n\n/**\n * Set a seed value for random number generation.\n * If the seed is a valid number, a 32-bit linear congruential generator\n * with the given seed will be used to generate random values.\n * If the seed is null, undefined, or not a valid number, the random\n * number generator will revert to Math.random.\n * @param {number} seed The random seed value. Should either be an\n *  integer or a fraction between 0 and 1.\n */\nexport function seed(seed) {\n  source = isValid(seed) && isFinite(seed = +seed) ? lcg(seed) : Math.random;\n}\n\nfunction lcg(seed) {\n  const a = 0x19660D;\n  const c = 0x3C6EF35F;\n  const m = 1 / 0x100000000;\n  seed = (0 <= seed && seed < 1 ? seed / m : Math.abs(seed)) | 0;\n\n  // Random numbers using a Linear Congruential Generator with seed value\n  // https://en.wikipedia.org/wiki/Linear_congruential_generator\n  return () => (seed = a * seed + c | 0, m * (seed >>> 0));\n}","export default function(value) {\n  return value instanceof Map;\n}","import isMap from './is-map';\nimport isSet from './is-set';\n\nexport default function(value) {\n  return isMap(value) || isSet(value);\n}","export default function(value) {\n  return value instanceof Set;\n}","import NULL from '../../util/null';\nimport has from '../../util/has';\nimport isMap from '../../util/is-map';\nimport isMapOrSet from '../../util/is-map-or-set';\n\nfunction array(iter) {\n  return Array.from(iter);\n}\n\nexport default {\n  has:      (obj, key) => isMapOrSet(obj) ? obj.has(key)\n              : obj != null ? has(obj, key)\n              : false,\n  keys:     (obj) => isMap(obj) ? array(obj.keys())\n              : obj != null ? Object.keys(obj)\n              : [],\n  values:   (obj) => isMapOrSet(obj) ? array(obj.values())\n              : obj != null ? Object.values(obj)\n              : [],\n  entries:  (obj) => isMapOrSet(obj) ? array(obj.entries())\n              : obj != null ? Object.entries(obj)\n              : [],\n  object:   (entries) => entries ? Object.fromEntries(entries) : NULL\n};","/**\n * Returns an array containing an arithmetic sequence from the start value\n * to the stop value, in step increments. If step is positive, the last\n * element is the largest start + i * step less than stop; if step is\n * negative, the last element is the smallest start + i * step greater\n * than stop. If the returned array would contain an infinite number of\n * values, an empty range is returned.\n * @param {number} [start=0] The starting value of the sequence.\n * @param {number} [stop] The stopping value of the sequence.\n *  The stop value is exclusive; it is not included in the result.\n * @param {number} [step=1] The step increment between sequence values.\n * @return {number[]} The generated sequence.\n */\nexport default function(start, stop, step) {\n  let n = arguments.length;\n  start = +start;\n  stop = +stop;\n  step = n < 2\n    ? (stop = start, start = 0, 1)\n    : n < 3 ? 1 : +step;\n\n  n = Math.max(0, Math.ceil((stop - start) / step)) | 0;\n  const seq = new Array(n);\n\n  for (let i = 0; i < n; ++i) {\n    seq[i] = start + i * step;\n  }\n\n  return seq;\n}","import array from './array';\nimport bin from './bin';\nimport date from './date';\nimport equal from './equal';\nimport json from './json';\nimport math from './math';\nimport object from './object';\nimport recode from './recode';\nimport sequence from './sequence';\nimport string from './string';\n\nexport default {\n  bin,\n  equal,\n  recode,\n  sequence,\n  ...array,\n  ...date,\n  ...json,\n  ...math,\n  ...object,\n  ...string\n};","/**\n * Truncate a value to a bin boundary.\n * Useful for creating equal-width histograms.\n * Values outside the [min, max] range will be mapped to\n * -Infinity (< min) or +Infinity (> max).\n * @param {number} value - The value to bin.\n * @param {number} min - The minimum bin boundary.\n * @param {number} max - The maximum bin boundary.\n * @param {number} step - The step size between bin boundaries.\n * @param {number} [offset=0] - Offset in steps by which to adjust\n *  the bin value. An offset of 1 will return the next boundary.\n */\nexport default function(value, min, max, step, offset) {\n  return value == null ? null\n    : value < min ? -Infinity\n    : value > max ? +Infinity\n    : (\n        value = Math.max(min, Math.min(value, max)),\n        min + step * Math.floor(1e-14 + (value - min) / step + (offset || 0))\n      );\n}","import has from '../../util/has';\n\n/**\n * Recodes an input value to an alternative value, based on a provided\n * value map. If a fallback value is specified, it will be returned when\n * a matching value is not found in the map; otherwise, the input value\n * is returned unchanged.\n * @param {*} value The value to recode. The value must be safely\n *  coercible to a string for lookup against the value map.\n * @param {object|Map} map An object or Map with input values for keys and\n *  output recoded values as values. If a non-Map object, only the object's\n *  own properties will be considered.\n * @param {*} [fallback] A default fallback value to use if the input\n *  value is not found in the value map.\n * @return {*} The recoded value.\n */\nexport default function(value, map, fallback) {\n  if (map instanceof Map) {\n    if (map.has(value)) return map.get(value);\n  } else if (has(map, value)) {\n    return map[value];\n  }\n  return fallback !== undefined ? fallback : value;\n}","import { random } from '../../util/random';\n\nexport default {\n  random,\n  is_nan:    Number.isNaN,\n  is_finite: Number.isFinite,\n\n  abs:      Math.abs,\n  cbrt:     Math.cbrt,\n  ceil:     Math.ceil,\n  clz32:    Math.clz32,\n  exp:      Math.exp,\n  expm1:    Math.expm1,\n  floor:    Math.floor,\n  fround:   Math.fround,\n  greatest: Math.max,\n  least:    Math.min,\n  log:      Math.log,\n  log10:    Math.log10,\n  log1p:    Math.log1p,\n  log2:     Math.log2,\n  pow:      Math.pow,\n  round:    Math.round,\n  sign:     Math.sign,\n  sqrt:     Math.sqrt,\n  trunc:    Math.trunc,\n\n  degrees:  (rad) => 180 * rad / Math.PI,\n  radians:  (deg) => Math.PI * deg / 180,\n  acos:     Math.acos,\n  acosh:    Math.acosh,\n  asin:     Math.asin,\n  asinh:    Math.asinh,\n  atan:     Math.atan,\n  atan2:    Math.atan2,\n  atanh:    Math.atanh,\n  cos:      Math.cos,\n  cosh:     Math.cosh,\n  sin:      Math.sin,\n  sinh:     Math.sinh,\n  tan:      Math.tan,\n  tanh:     Math.tanh\n};","export default {\n  parse_date:   (str) => str == null ? str : new Date(str),\n  parse_float:  (str) => str == null ? str : Number.parseFloat(str),\n  parse_int:    (str, radix) => str == null ? str : Number.parseInt(str, radix),\n  endswith:     (str, search, length) => str == null ? false\n                  : String(str).endsWith(search, length),\n  match:        (str, regexp, index) => {\n                  const m = str == null ? str : String(str).match(regexp);\n                  return index == null || m == null ? m\n                    : typeof index === 'number' ? m[index]\n                    : m.groups ? m.groups[index]\n                    : null;\n                },\n  normalize:    (str, form) => str == null ? str\n                  : String(str).normalize(form),\n  padend:       (str, len, fill) => str == null ? str\n                  : String(str).padEnd(len, fill),\n  padstart:     (str, len, fill) => str == null ? str\n                  : String(str).padStart(len, fill),\n  upper:        (str) => str == null ? str\n                  : String(str).toUpperCase(),\n  lower:        (str) => str == null ? str\n                  : String(str).toLowerCase(),\n  repeat:       (str, num) => str == null ? str\n                  : String(str).repeat(num),\n  replace:      (str, pattern, replacement) => str == null ? str\n                  : String(str).replace(pattern, String(replacement)),\n  substring:    (str, start, end) => str == null ? str\n                  : String(str).substring(start, end),\n  split:        (str, separator, limit) => str == null ? []\n                  : String(str).split(separator, limit),\n  startswith:   (str, search, length) => str == null ? false\n                  : String(str).startsWith(search, length),\n  trim:         (str) => str == null ? str\n                  : String(str).trim()\n};","export default function(value) {\n  return typeof value === 'bigint';\n}","import isBigInt from './is-bigint';\n\nexport default function(v) {\n  return v === undefined ? v + ''\n    : isBigInt(v) ? v + 'n'\n    : JSON.stringify(v);\n}","import toArray from '../util/to-array';\nimport toString from '../util/to-string';\n\nexport default function(name, fields = [], params = []) {\n  return new Op(name, toArray(fields), toArray(params));\n}\n\nexport class Op {\n  constructor(name, fields, params) {\n    this.name = name;\n    this.fields = fields;\n    this.params = params;\n  }\n  toString() {\n    const args = [\n      ...this.fields.map(f => `d[${toString(f)}]`),\n      ...this.params.map(toString)\n    ];\n    return `d => op.${this.name}(${args})`;\n  }\n  toObject() {\n    return { expr: this.toString(), func: true };\n  }\n}","import functions from './functions';\nimport op from './op';\n\nexport const any = (field) => op('any', field);\nexport const count = () => op('count');\nexport const array_agg = (field) => op('array_agg', field);\nexport const array_agg_distinct = (field) => op('array_agg_distinct', field);\nexport const map_agg = (key, value) => op('map_agg', [key, value]);\nexport const object_agg = (key, value) => op('object_agg', [key, value]);\nexport const entries_agg = (key, value) => op('entries_agg', [key, value]);\n\n/**\n * @typedef {import('../table/transformable').Struct} Struct\n */\n\n/**\n * All table expression operations including normal functions,\n * aggregate functions, and window functions.\n */\nexport default {\n  ...functions,\n\n  /**\n   * Generate an object representing the current table row.\n   * @param {...string} names The column names to include in the object.\n   *  If unspecified, all columns are included.\n   * @return {Struct} The generated row object.\n   */\n  row_object: (...names) => op('row_object', null, names.flat()),\n\n  /**\n   * Aggregate function to count the number of records (rows).\n   * @returns {number} The count of records.\n   */\n  count,\n\n  /**\n   * Aggregate function returning an arbitrary observed value.\n   * @param {*} field The data field.\n   * @return {*} An arbitrary observed value.\n   */\n  any,\n\n  /**\n   * Aggregate function to collect an array of values.\n   * @param {*} field The data field.\n   * @return {Array} A list of values.\n   */\n  array_agg,\n\n  /**\n   * Aggregate function to collect an array of distinct (unique) values.\n   * @param {*} field The data field.\n   * @return {Array} An array of unique values.\n   */\n  array_agg_distinct,\n\n  /**\n   * Aggregate function to create an object given input key and value fields.\n   * @param {*} key The object key field.\n   * @param {*} value The object value field.\n   * @return {Struct} An object of key-value pairs.\n   */\n  object_agg,\n\n  /**\n   * Aggregate function to create a Map given input key and value fields.\n   * @param {*} key The object key field.\n   * @param {*} value The object value field.\n   * @return {Map} A Map of key-value pairs.\n   */\n  map_agg,\n\n  /**\n   * Aggregate function to create an array in the style of Object.entries()\n   * given input key and value fields.\n   * @param {*} key The object key field.\n   * @param {*} value The object value field.\n   * @return {[[any, any]]} An array of [key, value] arrays.\n   */\n  entries_agg,\n\n  /**\n   * Aggregate function to count the number of valid values.\n   * Invalid values are null, undefined, or NaN.\n   * @param {*} field The data field.\n   * @return {number} The count of valid values.\n   */\n  valid: (field) => op('valid', field),\n\n  /**\n   * Aggregate function to count the number of invalid values.\n   * Invalid values are null, undefined, or NaN.\n   * @param {*} field The data field.\n   * @return {number} The count of invalid values.\n   */\n  invalid: (field) => op('invalid', field),\n\n  /**\n   * Aggregate function to count the number of distinct values.\n   * @param {*} field The data field.\n   * @return {number} The count of distinct values.\n   */\n  distinct: (field) => op('distinct', field),\n\n  /**\n   * Aggregate function to determine the mode (most frequent) value.\n   * @param {*} field The data field.\n   * @return {number} The mode value.\n   */\n  mode: (field) => op('mode', field),\n\n  /**\n   * Aggregate function to sum values.\n   * @param {string} field The data field.\n   * @return {number} The sum of the values.\n   */\n  sum: (field) => op('sum', field),\n\n  /**\n   * Aggregate function to multiply values.\n   * @param {*} field The data field.\n   * @return {number} The product of the values.\n   */\n  product: (field) => op('product', field),\n\n  /**\n   * Aggregate function for the mean (average) value.\n   * @param {*} field The data field.\n   * @return {number} The mean (average) of the values.\n   */\n  mean: (field) => op('mean', field),\n\n  /**\n   * Aggregate function for the average (mean) value.\n   * @param {*} field The data field.\n   * @return {number} The average (mean) of the values.\n   */\n  average: (field) => op('average', field),\n\n  /**\n   * Aggregate function for the sample variance.\n   * @param {*} field The data field.\n   * @return {number} The sample variance of the values.\n   */\n  variance: (field) => op('variance', field),\n\n  /**\n   * Aggregate function for the population variance.\n   * @param {*} field The data field.\n   * @return {number} The population variance of the values.\n   */\n  variancep: (field) => op('variancep', field),\n\n  /**\n   * Aggregate function for the sample standard deviation.\n   * @param {*} field The data field.\n   * @return {number} The sample standard deviation of the values.\n   */\n  stdev: (field) => op('stdev', field),\n\n  /**\n   * Aggregate function for the population standard deviation.\n   * @param {*} field The data field.\n   * @return {number} The population standard deviation of the values.\n   */\n  stdevp: (field) => op('stdevp', field),\n\n  /**\n   * Aggregate function for the minimum value.\n   * @param {*} field The data field.\n   * @return {number} The minimum value.\n   */\n  min: (field) => op('min', field),\n\n  /**\n   * Aggregate function for the maximum value.\n   * @param {*} field The data field.\n   * @return {number} The maximum value.\n   */\n  max: (field) => op('max', field),\n\n  /**\n   * Aggregate function to compute the quantile boundary\n   * of a data field for a probability threshold.\n   * @param {*} field The data field.\n   * @param {number} p The probability threshold.\n   * @return {number} The quantile value.\n   */\n  quantile: (field, p) => op('quantile', field, p),\n\n  /**\n   * Aggregate function for the median value.\n   * This is a shorthand for the 0.5 quantile value.\n   * @param {*} field The data field.\n   * @return {number} The median value.\n   */\n  median: (field) => op('median', field),\n\n  /**\n   * Aggregate function for the sample covariance between two variables.\n   * @param {*} field1 The first data field.\n   * @param {*} field2 The second data field.\n   * @return {number} The sample covariance of the values.\n   */\n  covariance: (field1, field2) => op('covariance', [field1, field2]),\n\n  /**\n   * Aggregate function for the population covariance between two variables.\n   * @param {*} field1 The first data field.\n   * @param {*} field2 The second data field.\n   * @return {number} The population covariance of the values.\n   */\n  covariancep: (field1, field2) => op('covariancep', [field1, field2]),\n\n  /**\n   * Aggregate function for the product-moment correlation between two variables.\n   * To instead compute a rank correlation, compute the average ranks for each\n   * variable and then apply this function to the result.\n   * @param {*} field1 The first data field.\n   * @param {*} field2 The second data field.\n   * @return {number} The correlation between the field values.\n   */\n  corr: (field1, field2) => op('corr', [field1, field2]),\n\n  /**\n   * Aggregate function for calculating a binning scheme in terms of\n   * the minimum bin boundary, maximum bin boundary, and step size.\n   * @param {*} field The data field.\n   * @param {number} [maxbins=15] The maximum number of allowed bins.\n   * @param {boolean} [nice=true] Flag indicating if the bin min and max\n   *  should snap to \"nice\" human-friendly values.\n   * @param {number} [minstep] The minimum allowed step size between bins.\n   * @param {number} [step] The exact step size to use between bins.\n   *  If specified, the maxbins and minstep arguments are ignored.\n   * @return {[number, number, number]} The bin [min, max, and step] values.\n   */\n  bins: (field, maxbins, nice, minstep) =>\n    op('bins', field, [maxbins, nice, minstep]),\n\n  /**\n   * Window function to assign consecutive row numbers, starting from 1.\n   * @return {number} The row number value.\n   */\n  row_number: () => op('row_number'),\n\n  /**\n   * Window function to assign a rank to each value in a group, starting\n   * from 1. Peer values are assigned the same rank. Subsequent ranks\n   * reflect the number of prior values: if the first two values tie for\n   * rank 1, the third value is assigned rank 3.\n   * @return {number} The rank value.\n   */\n  rank: () => op('rank'),\n\n  /**\n   * Window function to assign a fractional (average) rank to each value in\n   * a group, starting from 1. Peer values are assigned the average of their\n   * indices: if the first two values tie, both will be assigned rank 1.5.\n   * @return {number} The peer-averaged rank value.\n   */\n  avg_rank: () => op('avg_rank'),\n\n  /**\n   * Window function to assign a dense rank to each value in a group,\n   * starting from 1. Peer values are assigned the same rank. Subsequent\n   * ranks do not reflect the number of prior values: if the first two\n   * values tie for rank 1, the third value is assigned rank 2.\n   * @return {number} The dense rank value.\n   */\n  dense_rank: () => op('dense_rank'),\n\n  /**\n   * Window function to assign a percentage rank to each value in a group.\n   * The percent is calculated as (rank - 1) / (group_size - 1).\n   * @return {number} The percentage rank value.\n   */\n  percent_rank: () => op('percent_rank'),\n\n  /**\n   * Window function to assign a cumulative distribution value between 0 and 1\n   * to each value in a group.\n   * @return {number} The cumulative distribution value.\n   */\n  cume_dist: () => op('cume_dist'),\n\n  /**\n   * Window function to assign a quantile (e.g., percentile) value to each\n   * value in a group. Accepts an integer parameter indicating the number of\n   * buckets to use (e.g., 100 for percentiles, 5 for quintiles).\n   * @param {number} num The number of buckets for ntile calculation.\n   * @return {number} The quantile value.\n   */\n  ntile: (num) => op('ntile', null, num),\n\n  /**\n   * Window function to assign a value that precedes the current value by\n   * a specified number of positions. If no such value exists, returns a\n   * default value instead.\n   * @param {*} field The data field.\n   * @param {number} [offset=1] The lag offset from the current value.\n   * @param {*} [defaultValue=undefined] The default value.\n   * @return {*} The lagging value.\n   */\n  lag: (field, offset, defaultValue) => op('lag', field, [offset, defaultValue]),\n\n  /**\n   * Window function to assign a value that follows the current value by\n   * a specified number of positions. If no such value exists, returns a\n   * default value instead.\n   * @param {*} field The data field.\n   * @param {number} [offset=1] The lead offset from the current value.\n   * @param {*} [defaultValue=undefined] The default value.\n   * @return {*} The leading value.\n   */\n  lead: (field, offset, defaultValue) => op('lead', field, [offset, defaultValue]),\n\n  /**\n   * Window function to assign the first value in a sliding window frame.\n   * @param {*} field The data field.\n   * @return {*} The first value in the current frame.\n   */\n  first_value: (field) => op('first_value', field),\n\n  /**\n   * Window function to assign the last value in a sliding window frame.\n   * @param {*} field The data field.\n   * @return {*} The last value in the current frame.\n   */\n  last_value: (field) => op('last_value', field),\n\n  /**\n   * Window function to assign the nth value in a sliding window frame\n   * (counting from 1), or undefined if no such value exists.\n   * @param {*} field The data field.\n   * @param {number} nth The nth position, starting from 1.\n   * @return {*} The nth value in the current frame.\n   */\n  nth_value: (field, nth) => op('nth_value', field, nth),\n\n  /**\n   * Window function to fill in missing values with preceding values.\n   * @param {*} field The data field.\n   * @param {*} [defaultValue=undefined] The default value.\n   * @return {*} The current value if valid, otherwise the first preceding\n   *  valid value. If no such value exists, returns the default value.\n   */\n  fill_down: (field, defaultValue) => op('fill_down', field, defaultValue),\n\n  /**\n   * Window function to fill in missing values with subsequent values.\n   * @param {*} field The data field.\n   * @param {*} [defaultValue=undefined] The default value.\n   * @return {*} The current value if valid, otherwise the first subsequent\n   *  valid value. If no such value exists, returns the default value.\n   */\n  fill_up: (field, defaultValue) => op('fill_up', field, defaultValue)\n};","import { array_agg, entries_agg, map_agg, object_agg } from '../op/op-api';\nimport error from '../util/error';\nimport uniqueName from '../util/unique-name';\n\n/**\n * Regroup table rows in response to a BitSet filter.\n * @param {GroupBySpec} groups The current groupby specification.\n * @param {BitSet} filter The filter to apply.\n */\nexport function regroup(groups, filter) {\n  if (!groups || !filter) return groups;\n\n  // check for presence of rows for each group\n  const { keys, rows, size } = groups;\n  const map = new Int32Array(size);\n  filter.scan(row => map[keys[row]] = 1);\n\n  // check sum, exit early if all groups occur\n  const sum = map.reduce((sum, val) => sum + val, 0);\n  if (sum === size) return groups;\n\n  // create group index map, filter exemplar rows\n  const _rows = Array(sum);\n  let _size = 0;\n  for (let i = 0; i < size; ++i) {\n    if (map[i]) _rows[map[i] = _size++] = rows[i];\n  }\n\n  // re-index the group keys\n  const _keys = new Uint32Array(keys.length);\n  filter.scan(row => _keys[row] = map[keys[row]]);\n\n  return { ...groups, keys: _keys, rows: _rows, size: _size };\n}\n\n/**\n * Regroup table rows in response to a re-indexing.\n * This operation may or may not involve filtering of rows.\n * @param {GroupBySpec} groups The current groupby specification.\n * @param {Function} scan Function to scan new row indices.\n * @param {boolean} filter Flag indicating if filtering may occur.\n * @param {number} nrows The number of rows in the new table.\n */\nexport function reindex(groups, scan, filter, nrows) {\n  const { keys, rows, size } = groups;\n  let _rows = rows;\n  let _size = size;\n  let map = null;\n\n  if (filter) {\n    // check for presence of rows for each group\n    map = new Int32Array(size);\n    scan(row => map[keys[row]] = 1);\n\n    // check sum, regroup if not all groups occur\n    const sum = map.reduce((sum, val) => sum + val, 0);\n    if (sum !== size) {\n      // create group index map, filter exemplar rows\n      _rows = Array(sum);\n      _size = 0;\n      for (let i = 0; i < size; ++i) {\n        if (map[i]) _rows[map[i] = _size++] = rows[i];\n      }\n    }\n  }\n\n  // re-index the group keys\n  let r = -1;\n  const _keys = new Uint32Array(nrows);\n  const fn = _size !== size\n    ? row => _keys[++r] = map[keys[row]]\n    : row => _keys[++r] = keys[row];\n  scan(fn);\n\n  return { ...groups, keys: _keys, rows: _rows, size: _size };\n}\n\nexport function nest(table, idx, obj, type) {\n  const agg = type === 'map' || type === true ? map_agg\n    : type === 'entries' ? entries_agg\n    : type === 'object' ? object_agg\n    : error('groups option must be \"map\", \"entries\", or \"object\".');\n\n  const { names } = table.groups();\n  const col = uniqueName(table.columnNames(), '_');\n\n  // create table with one column of row objects\n  // then aggregate into per-group arrays\n  let t = table\n    .select()\n    .reify(idx)\n    .create({ data: { [col]: obj } })\n    .rollup({ [col]: array_agg(col) });\n\n  // create nested structures for each level of grouping\n  for (let i = names.length; --i >= 0;) {\n    t = t\n      .groupby(names.slice(0, i))\n      .rollup({ [col]: agg(names[i], col) });\n  }\n\n  // return the final aggregated structure\n  return t.get(col);\n}","import isMapOrSet from './is-map-or-set';\n\nexport default function(names, name) {\n  names = isMapOrSet(names) ? names : new Set(names);\n  let uname = name;\n  let index = 0;\n\n  while (names.has(uname)) {\n    uname = name + ++index;\n  }\n\n  return uname;\n}","export const ArrayPattern = 'ArrayPattern';\nexport const ArrowFunctionExpression = 'ArrowFunctionExpression';\nexport const FunctionExpression = 'FunctionExpression';\nexport const Identifier = 'Identifier';\nexport const Literal = 'Literal';\nexport const MemberExpression = 'MemberExpression';\nexport const ObjectExpression = 'ObjectExpression';\nexport const ObjectPattern = 'ObjectPattern';\nexport const Property = 'Property';\n\nexport const Column = 'Column';\nexport const Constant = 'Constant';\nexport const Dictionary = 'Dictionary';\nexport const Function = 'Function';\nexport const Parameter = 'Parameter';\nexport const Op = 'Op';","import error from '../util/error';\nimport toString from '../util/to-string';\n\nconst visit = (node, opt) => {\n  const f = visitors[node.type];\n  return f\n    ? f(node, opt)\n    : error(`Unsupported expression construct: ${node.type}`);\n};\n\nconst binary = (node, opt) => {\n  return '(' + visit(node.left, opt) + ' ' + node.operator + ' ' + visit(node.right, opt) + ')';\n};\n\nconst func = (node, opt) => {\n  return '(' + list(node.params, opt) + ')=>' + visit(node.body, opt);\n};\n\nconst call = (node, opt) => {\n  return visit(node.callee, opt) + '(' + list(node.arguments, opt) + ')';\n};\n\nconst list = (array, opt, delim = ',') => {\n  return array.map(node => visit(node, opt)).join(delim);\n};\n\nconst name = node => node.computed\n  ? `[${toString(node.name)}]`\n  : `.${node.name}`;\n\nconst ref = (node, opt, method) => {\n  const table = node.table || '';\n  return `data${table}${name(node)}.${method}(${opt.index}${table})`;\n};\n\nconst visitors = {\n  Constant: node => node.raw,\n  Column: (node, opt) => ref(node, opt, 'get'),\n  Dictionary: (node, opt) => ref(node, opt, 'key'),\n  Function: node => `fn.${node.name}`,\n  Parameter: node => `$${name(node)}`,\n  Op: (node, opt) => `op(${toString(node.name)},${opt.op || opt.index})`,\n  Literal: node => node.raw,\n  Identifier: node => node.name,\n  TemplateLiteral: (node, opt) => {\n    const { quasis, expressions } = node;\n    const n = expressions.length;\n    let t = quasis[0].value.raw;\n    for (let i = 0; i < n;) {\n      t += '${' + visit(expressions[i], opt) + '}' + quasis[++i].value.raw;\n    }\n    return '`' + t + '`';\n  },\n  MemberExpression: (node, opt) => {\n    const d = !node.computed;\n    const o = visit(node.object, opt);\n    const p = visit(node.property, opt);\n    return o + (d ? '.' + p : '[' + p + ']');\n  },\n  CallExpression: call,\n  NewExpression: (node, opt) => {\n    return 'new ' + call(node, opt);\n  },\n  ArrayExpression: (node, opt) => {\n    return '[' + list(node.elements, opt) + ']';\n  },\n  AssignmentExpression: binary,\n  BinaryExpression: binary,\n  LogicalExpression: binary,\n  UnaryExpression: (node, opt) => {\n    return '(' + node.operator + visit(node.argument, opt) + ')';\n  },\n  ConditionalExpression: (node, opt) => {\n    return '(' + visit(node.test, opt) +\n      '?' + visit(node.consequent, opt) +\n      ':' + visit(node.alternate, opt) + ')';\n  },\n  ObjectExpression: (node, opt) => {\n    return '({' + list(node.properties, opt) + '})';\n  },\n  Property: (node, opt) => {\n    const key = visit(node.key, opt);\n    return (node.computed ? `[${key}]` : key) + ':' + visit(node.value, opt);\n  },\n\n  ArrowFunctionExpression: func,\n  FunctionExpression: func,\n  FunctionDeclaration: func,\n\n  ArrayPattern: (node, opt) => {\n    return '[' + list(node.elements, opt) + ']';\n  },\n  ObjectPattern: (node, opt) => {\n    return '{' + list(node.properties, opt) + '}';\n  },\n  VariableDeclaration: (node, opt) => {\n    return node.kind + ' ' + list(node.declarations, opt, ',');\n  },\n  VariableDeclarator: (node, opt) => {\n    return visit(node.id, opt) + '=' + visit(node.init, opt);\n  },\n  SpreadElement: (node, opt) => {\n    return '...' + visit(node.argument, opt);\n  },\n\n  BlockStatement: (node, opt) => {\n    return '{' + list(node.body, opt, ';') + ';}';\n  },\n  BreakStatement: () => {\n    return 'break';\n  },\n  ExpressionStatement: (node, opt) => {\n    return visit(node.expression, opt);\n  },\n  IfStatement: (node, opt) => {\n    return 'if (' + visit(node.test, opt) + ')'\n      + visit(node.consequent, opt)\n      + (node.alternate ? ' else ' + visit(node.alternate, opt) : '');\n  },\n  SwitchStatement: (node, opt) => {\n    return 'switch (' + visit(node.discriminant, opt) + ') {'\n     + list(node.cases, opt, '')\n     + '}';\n  },\n  SwitchCase: (node, opt) => {\n    return (node.test ? 'case ' + visit(node.test, opt) : 'default')\n      + ': '\n      + list(node.consequent, opt, ';') + ';';\n  },\n  ReturnStatement: (node, opt) => {\n    return 'return ' + visit(node.argument, opt);\n  },\n  Program: (node, opt) => visit(node.body[0], opt)\n};\n\nexport default function(node, opt = { index: 'row' }) {\n  return visit(node, opt);\n}","import isArray from './is-array';\nimport isDate from './is-date';\nimport isRegExp from './is-regexp';\nimport isTypedArray from './is-typed-array';\n\nexport function key(value) {\n  const type = typeof value;\n  return type === 'string' ? `\"${value}\"`\n    : type !== 'object' || !value ? value\n    : isDate(value) ? +value\n    : isArray(value) || isTypedArray(value) ? `[${value.map(key)}]`\n    : isRegExp(value) ? value + ''\n    : objectKey(value);\n}\n\nfunction objectKey(value) {\n  let s = '{';\n  let i = -1;\n  for (const k in value) {\n    if (++i > 0) s += ',';\n    s += `\"${k}\":${key(value[k])}`;\n  }\n  s += '}';\n  return s;\n}\n\nexport default function(get, nulls) {\n  const n = get.length;\n  return n === 1\n    ? (row, data) => key(get[0](row, data))\n    : (row, data) => {\n        let s = '';\n        for (let i = 0; i < n; ++i) {\n          if (i > 0) s += '|';\n          const v = get[i](row, data);\n          if (nulls && (v == null || v !== v)) return null;\n          s += key(v);\n        }\n        return s;\n      };\n}","export default function() {}","import bins from '../util/bins';\nimport distinctMap from '../util/distinct-map';\nimport isBigInt from '../util/is-bigint';\nimport noop from '../util/no-op';\nimport NULL from '../util/null';\nimport product from '../util/product';\n\n/**\n * Initialize an aggregate operator.\n */\nfunction initOp(op) {\n  op.init = op.init || noop;\n  op.add = op.add || noop;\n  op.rem = op.rem || noop;\n  return op;\n}\n\nfunction initProduct(s, value) {\n  s.product_v = false;\n  return s.product = value;\n}\n\n/**\n * Initialize an aggregate operator.\n * @callback AggregateInit\n * @param {object} state The aggregate state object.\n * @return {void}\n */\n\n/**\n * Add a value to an aggregate operator.\n * @callback AggregateAdd\n * @param {object} state The aggregate state object.\n * @param {*} value The value to add.\n * @return {void}\n */\n\n/**\n * Remove a value from an aggregate operator.\n * @callback AggregateRem\n * @param {object} state The aggregate state object.\n * @param {*} value The value to remove.\n * @return {void}\n */\n\n/**\n * Retrive an output value from an aggregate operator.\n * @callback AggregateValue\n * @param {object} state The aggregate state object.\n * @return {*} The output value.\n */\n\n/**\n * An operator instance for an aggregate function.\n * @typedef {object} AggregateOperator\n * @property {AggregateInit} init Initialize the operator.\n * @property {AggregateAdd} add Add a value to the operator state.\n * @property {AggregateRem} rem Remove a value from the operator state.\n * @property {AggregateValue} value Retrieve an output value.\n */\n\n/**\n * Create a new aggregate operator instance.\n * @callback AggregateCreate\n * @param {...any} params The aggregate operator parameters.\n * @return {AggregateOperator} The instantiated aggregate operator.\n */\n\n/**\n * An operator definition for an aggregate function.\n * @typedef {object} AggregateDef\n * @property {AggregateCreate} create Create a new operator instance.\n * @property {number[]} param Two-element array containing the\n *  counts of input fields and additional parameters.\n * @property {string[]} [req] Names of operators required by this one.\n * @property {string[]} [stream] Names of operators required by this one\n *  for streaming operations (value removes).\n */\n\n/**\n * Aggregate operator definitions.\n */\nexport default {\n  /** @type {AggregateDef} */\n  count: {\n    create: () => initOp({\n      value: s => s.count\n    }),\n    param: []\n  },\n\n  /** @type {AggregateDef} */\n  array_agg: {\n    create: () => initOp({\n      init: s => s.values = true,\n      value: s => s.list.values(s.stream)\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  object_agg: {\n    create: () => initOp({\n      init:  s => s.values = true,\n      value: s => Object.fromEntries(s.list.values())\n    }),\n    param: [2]\n  },\n\n  /** @type {AggregateDef} */\n  map_agg: {\n    create: () => initOp({\n      init:  s => s.values = true,\n      value: s => new Map(s.list.values())\n    }),\n    param: [2]\n  },\n\n  /** @type {AggregateDef} */\n  entries_agg: {\n    create: () => initOp({\n      init:  s => s.values = true,\n      value: s => s.list.values(s.stream)\n    }),\n    param: [2]\n  },\n\n  /** @type {AggregateDef} */\n  any: {\n    create: () => initOp({\n      add: (s, v) => { if (s.any == null) s.any = v; },\n      value: s => s.valid ? s.any : NULL\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  valid: {\n    create: () => initOp({\n      value: s => s.valid\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  invalid: {\n    create: () => initOp({\n      value: s => s.count - s.valid\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  distinct: {\n    create: () => ({\n      init: s => s.distinct = distinctMap(),\n      value: s => s.distinct.count() + (s.valid === s.count ? 0 : 1),\n      add: (s, v) => s.distinct.increment(v),\n      rem: (s, v) => s.distinct.decrement(v)\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  array_agg_distinct: {\n    create: () => initOp({\n      value: s => s.distinct.values()\n    }),\n    param: [1],\n    req: ['distinct']\n  },\n\n  /** @type {AggregateDef} */\n  mode: {\n    create: () => initOp({\n      value: s => {\n        let mode = NULL;\n        let max = 0;\n        s.distinct.forEach((value, count) => {\n          if (count > max) {\n            max = count;\n            mode = value;\n          }\n        });\n        return mode;\n      }\n    }),\n    param: [1],\n    req: ['distinct']\n  },\n\n  /** @type {AggregateDef} */\n  sum: {\n    create: () => ({\n      init:  s => s.sum = 0,\n      value: s => s.valid ? s.sum : NULL,\n      add: (s, v) => isBigInt(v)\n        ? (s.sum === 0 ? s.sum = v : s.sum += v)\n        : s.sum += +v,\n      rem: (s, v) => s.sum -= v\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  product: {\n    create: () => ({\n      init:  s => initProduct(s, 1),\n      value: s => s.valid\n        ? (\n            s.product_v\n              ? initProduct(s, product(s.list.values()))\n              : s.product\n          )\n        : undefined,\n      add: (s, v) => isBigInt(v)\n        ? (s.product === 1 ? s.product = v : s.product *= v)\n        : s.product *= v,\n      rem: (s, v) => (v == 0 || v === Infinity || v === -Infinity)\n        ? s.product_v = true\n        : s.product /= v\n    }),\n    param: [1],\n    stream: ['array_agg']\n  },\n\n  /** @type {AggregateDef} */\n  mean: {\n    create: () => ({\n      init: s => s.mean = 0,\n      value: s => s.valid ? s.mean : NULL,\n      add: (s, v) => {\n        s.mean_d = v - s.mean;\n        s.mean += s.mean_d / s.valid;\n      },\n      rem: (s, v) => {\n        s.mean_d = v - s.mean;\n        s.mean -= s.valid ? s.mean_d / s.valid : s.mean;\n      }\n    }),\n    param: [1]\n  },\n\n  /** @type {AggregateDef} */\n  average: {\n    create: () => initOp({\n      value: s => s.valid ? s.mean : NULL\n    }),\n    param: [1],\n    req: ['mean']\n  },\n\n  /** @type {AggregateDef} */\n  variance: {\n    create: () => ({\n      init:  s => s.dev = 0,\n      value: s => s.valid > 1 ? s.dev / (s.valid - 1) : NULL,\n      add: (s, v) => s.dev += s.mean_d * (v - s.mean),\n      rem: (s, v) => s.dev -= s.mean_d * (v - s.mean)\n    }),\n    param: [1],\n    req: ['mean']\n  },\n\n  /** @type {AggregateDef} */\n  variancep: {\n    create: () => initOp({\n      value: s => s.valid > 1 ? s.dev / s.valid : NULL\n    }),\n    param: [1],\n    req: ['variance']\n  },\n\n  /** @type {AggregateDef} */\n  stdev: {\n    create: () => initOp({\n      value: s => s.valid > 1 ? Math.sqrt(s.dev / (s.valid - 1)) : NULL\n    }),\n    param: [1],\n    req: ['variance']\n  },\n\n  /** @type {AggregateDef} */\n  stdevp: {\n    create: () => initOp({\n      value: s => s.valid > 1 ? Math.sqrt(s.dev / s.valid) : NULL\n    }),\n    param: [1],\n    req: ['variance']\n  },\n\n  /** @type {AggregateDef} */\n  min: {\n    create: () => ({\n      init:  s => s.min = NULL,\n      value: s => s.min = (Number.isNaN(s.min) ? s.list.min() : s.min),\n      add: (s, v) => { if (v < s.min || s.min === NULL) s.min = v; },\n      rem: (s, v) => { if (v <= s.min) s.min = NaN; }\n    }),\n    param: [1],\n    stream: ['array_agg']\n  },\n\n  /** @type {AggregateDef} */\n  max: {\n    create: () => ({\n      init:  s => s.max = NULL,\n      value: s => s.max = (Number.isNaN(s.max) ? s.list.max() : s.max),\n      add: (s, v) => { if (v > s.max || s.max === NULL) s.max = v; },\n      rem: (s, v) => { if (v >= s.max) s.max = NaN; }\n    }),\n    param: [1],\n    stream: ['array_agg']\n  },\n\n  /** @type {AggregateDef} */\n  quantile: {\n    create: (p) => initOp({\n      value: s => s.list.quantile(p)\n    }),\n    param: [1, 1],\n    req: ['array_agg']\n  },\n\n  /** @type {AggregateDef} */\n  median: {\n    create: () => initOp({\n      value: s => s.list.quantile(0.5)\n    }),\n    param: [1],\n    req: ['array_agg']\n  },\n\n  /** @type {AggregateDef} */\n  covariance: {\n    create: () => ({\n      init:  s => {\n        s.cov = s.mean_x = s.mean_y = s.dev_x = s.dev_y = 0;\n      },\n      value: s => s.valid > 1 ? s.cov / (s.valid - 1) : NULL,\n      add: (s, x, y) => {\n        const dx = x - s.mean_x;\n        const dy = y - s.mean_y;\n        s.mean_x += dx / s.valid;\n        s.mean_y += dy / s.valid;\n        const dy2 = y - s.mean_y;\n        s.dev_x += dx * (x - s.mean_x);\n        s.dev_y += dy * dy2;\n        s.cov += dx * dy2;\n      },\n      rem: (s, x, y) => {\n        const dx = x - s.mean_x;\n        const dy = y - s.mean_y;\n        s.mean_x -= s.valid ? dx / s.valid : s.mean_x;\n        s.mean_y -= s.valid ? dy / s.valid : s.mean_y;\n        const dy2 = y - s.mean_y;\n        s.dev_x -= dx * (x - s.mean_x);\n        s.dev_y -= dy * dy2;\n        s.cov -= dx * dy2;\n      }\n    }),\n    param: [2]\n  },\n\n  /** @type {AggregateDef} */\n  covariancep: {\n    create: () => initOp({\n      value: s => s.valid > 1 ? s.cov / s.valid : NULL\n    }),\n    param: [2],\n    req: ['covariance']\n  },\n\n  /** @type {AggregateDef} */\n  corr: {\n    create: () => initOp({\n      value: s => s.valid > 1\n        ? s.cov / (Math.sqrt(s.dev_x) * Math.sqrt(s.dev_y))\n        : NULL\n    }),\n    param: [2],\n    req: ['covariance']\n  },\n\n  /** @type {AggregateDef} */\n  bins: {\n    create: (maxbins, nice, minstep, step) => initOp({\n      value: s => bins(s.min, s.max, maxbins, nice, minstep, step)\n    }),\n    param: [1, 4],\n    req: ['min', 'max']\n  }\n};","import { key } from './key-function';\n\nexport default function() {\n  const map = new Map();\n  return {\n    count() {\n      return map.size;\n    },\n    values() {\n      return Array.from(map.values(), _ => _.v);\n    },\n    increment(v) {\n      const k = key(v);\n      const e = map.get(k);\n      e ? ++e.n : map.set(k, { v, n: 1 });\n    },\n    decrement(v) {\n      const k = key(v);\n      const e = map.get(k);\n      e.n === 1 ? map.delete(k) : --e.n;\n    },\n    forEach(fn) {\n      map.forEach(({ v, n }) => fn(v, n));\n    }\n  };\n}","export default function(values, start = 0, stop = values.length) {\n  let prod = values[start++];\n\n  for (let i = start; i < stop; ++i) {\n    prod *= values[i];\n  }\n\n  return prod;\n}","export default function(min, max, maxbins = 15, nice = true, minstep = 0, step) {\n  const base = 10;\n  const logb = Math.LN10;\n\n  if (step == null) {\n    const level = Math.ceil(Math.log(maxbins) / logb);\n    const span = (max - min) || Math.abs(min) || 1;\n    const div = [5, 2];\n\n    step = Math.max(\n      minstep,\n      Math.pow(base, Math.round(Math.log(span) / logb) - level)\n    );\n\n    // increase step size if too many bins\n    while (Math.ceil(span / step) > maxbins) {\n      step *= base;\n    }\n\n    // decrease step size if it stays within maxbins\n    const n = div.length;\n    for (let i = 0; i < n; ++i) {\n      const v = step / div[i];\n      if (v >= minstep && span / v <= maxbins) {\n        step = v;\n      }\n    }\n  }\n\n  // snap to \"nice\" boundaries\n  if (nice) {\n    let v = Math.log(step);\n    const precision = v >= 0 ? 0 : ~~(-v / logb) + 1;\n    const eps = Math.pow(base, -precision - 1);\n    v = Math.floor(min / step + eps) * step;\n    min = min < v ? v - step : v;\n    max = Math.ceil(max / step) * step;\n  }\n\n  return [\n    min,\n    max === min ? min + step : max,\n    step\n  ];\n}","import error from '../util/error';\nimport isValid from '../util/is-valid';\nimport noop from '../util/no-op';\nimport NULL from '../util/null';\n\n/**\n * Initialize a window operator.\n * @callback WindowInit\n * @return {void}\n */\n\n/**\n * Retrieve an output value from a window operator.\n * @callback WindowValue\n * @param {WindowState} state The window state object.\n * @return {*} The output value.\n */\n\n/**\n * An operator instance for a window function.\n * @typedef {object} WindowOperator\n * @property {AggregateInit} init Initialize the operator.\n * @property {AggregateValue} value Retrieve an output value.\n */\n\n/**\n * Create a new window operator instance.\n * @callback WindowCreate\n * @param {...any} params The aggregate operator parameters.\n * @return {WindowOperator} The instantiated window operator.\n */\n\n/**\n * An operator definition for a window function.\n * @typedef {object} WindowDef\n * @property {AggregateCreate} create Create a new operator instance.\n * @property {number[]} param Two-element array containing the\n *  counts of input fields and additional parameters.\n */\n\nconst rank = {\n  create() {\n    let rank;\n    return {\n      init: () => rank = 1,\n      value: w => {\n        const i = w.index;\n        return (i && !w.peer(i)) ? (rank = i + 1) : rank;\n      }\n    };\n  },\n  param: []\n};\n\nconst cume_dist = {\n  create() {\n    let cume;\n    return {\n      init: () => cume = 0,\n      value: w => {\n        const { index, peer, size } = w;\n        let i = index;\n        if (cume < i) {\n          while (i + 1 < size && peer(i + 1)) ++i;\n          cume = i;\n        }\n        return (1 + cume) / size;\n      }\n    };\n  },\n  param: []\n};\n\n/**\n * Window operator definitions.\n */\nexport default {\n  /** @type {WindowDef} */\n  row_number: {\n    create() {\n      return {\n        init: noop,\n        value: w => w.index + 1\n      };\n    },\n    param: []\n  },\n\n  /** @type {WindowDef} */\n  rank,\n\n  /** @type {WindowDef} */\n  avg_rank: {\n    create() {\n      let j, rank;\n      return {\n        init: () => (j = -1, rank = 1),\n        value: w => {\n          const i = w.index;\n          if (i >= j) {\n            for (rank = j = i + 1; w.peer(j); rank += ++j);\n            rank /= (j - i);\n          }\n          return rank;\n        }\n      };\n    },\n    param: []\n  },\n\n  /** @type {WindowDef} */\n  dense_rank: {\n    create() {\n      let drank;\n      return {\n        init: () => drank = 1,\n        value: w => {\n          const i = w.index;\n          return (i && !w.peer(i)) ? ++drank : drank;\n        }\n      };\n    },\n    param: []\n  },\n\n  /** @type {WindowDef} */\n  percent_rank: {\n    create() {\n      const { init, value } = rank.create();\n      return {\n        init,\n        value: w => (value(w) - 1) / (w.size - 1)\n      };\n    },\n    param: []\n  },\n\n  /** @type {WindowDef} */\n  cume_dist,\n\n  /** @type {WindowDef} */\n  ntile: {\n    create(num) {\n      num = +num;\n      if (!(num > 0)) error('ntile num must be greater than zero.');\n      const { init, value } = cume_dist.create();\n      return {\n        init,\n        value: w => Math.ceil(num * value(w))\n      };\n    },\n    param: [0, 1]\n  },\n\n  /** @type {WindowDef} */\n  lag: {\n    create(offset, defaultValue = NULL) {\n      offset = +offset || 1;\n      return {\n        init: noop,\n        value: (w, f) => {\n          const i = w.index - offset;\n          return i >= 0 ? w.value(i, f) : defaultValue;\n        }\n      };\n    },\n    param: [1, 2]\n  },\n\n  /** @type {WindowDef} */\n  lead: {\n    create(offset, defaultValue = NULL) {\n      offset = +offset || 1;\n      return {\n        init: noop,\n        value: (w, f) => {\n          const i = w.index + offset;\n          return i < w.size ? w.value(i, f) : defaultValue;\n        }\n      };\n    },\n    param: [1, 2]\n  },\n\n  /** @type {WindowDef} */\n  first_value: {\n    create() {\n      return {\n        init: noop,\n        value: (w, f) => w.value(w.i0, f)\n      };\n    },\n    param: [1]\n  },\n\n  /** @type {WindowDef} */\n  last_value: {\n    create() {\n      return {\n        init: noop,\n        value: (w, f) => w.value(w.i1 - 1, f)\n      };\n    },\n    param: [1]\n  },\n\n  /** @type {WindowDef} */\n  nth_value: {\n    create(nth) {\n      nth = +nth;\n      if (!(nth > 0)) error('nth_value nth must be greater than zero.');\n      return {\n        init: noop,\n        value: (w, f) => {\n          const i = w.i0 + (nth - 1);\n          return i < w.i1 ? w.value(i, f) : NULL;\n        }\n      };\n    },\n    param: [1, 1]\n  },\n\n  /** @type {WindowDef} */\n  fill_down: {\n    create(defaultValue = NULL) {\n      let value;\n      return {\n        init: () => value = defaultValue,\n        value: (w, f) => {\n          const v = w.value(w.index, f);\n          return isValid(v) ? (value = v) : value;\n        }\n      };\n    },\n    param: [1, 1]\n  },\n\n  /** @type {WindowDef} */\n  fill_up: {\n    create(defaultValue = NULL) {\n      let value, idx;\n      return {\n        init: () => (value = defaultValue, idx = -1),\n        value: (w, f) => w.index <= idx ? value\n          : (idx = find(w, f, w.index)) >= 0 ? (value = w.value(idx, f))\n          : (idx = w.size, value = defaultValue)\n      };\n    },\n    param: [1, 1]\n  }\n};\n\nfunction find(w, f, i) {\n  for (const n = w.size; i < n; ++i) {\n    if (isValid(w.value(i, f))) return i;\n  }\n  return -1;\n}\n","import aggregateFunctions from './aggregate-functions';\nimport windowFunctions from './window-functions';\nimport functions from './functions';\nimport has from '../util/has';\n\nexport {\n  functions,\n  aggregateFunctions,\n  windowFunctions\n};\n\n/**\n * Check if an aggregate function with the given name exists.\n * @param {string} name The name of the aggregate function.\n * @return {boolean} True if found, false otherwise.\n */\nexport function hasAggregate(name) {\n  return has(aggregateFunctions, name);\n}\n\n/**\n * Check if a window function with the given name exists.\n * @param {string} name The name of the window function.\n * @return {boolean} True if found, false otherwise.\n */\nexport function hasWindow(name) {\n  return has(windowFunctions, name);\n}\n\n/**\n * Check if an expression function with the given name exists.\n * @param {string} name The name of the function.\n * @return {boolean} True if found, false otherwise.\n */\n export function hasFunction(name) {\n  return has(functions, name) || name === 'row_object';\n}\n\n/**\n * Get an aggregate function definition.\n * @param {string} name The name of the aggregate function.\n * @return {AggregateDef} The aggregate function definition,\n *  or undefined if not found.\n */\nexport function getAggregate(name) {\n  return hasAggregate(name) && aggregateFunctions[name];\n}\n\n/**\n * Get a window function definition.\n * @param {string} name The name of the window function.\n * @return {WindowDef} The window function definition,\n *  or undefined if not found.\n */\nexport function getWindow(name) {\n  return hasWindow(name) && windowFunctions[name];\n}\n\n/**\n * Get an expression function definition.\n * @param {string} name The name of the function.\n * @return {Function} The function instance, or undefined if not found.\n */\nexport function getFunction(name) {\n  return hasFunction(name) && functions[name];\n}","import { functions as fn } from '../op';\n\nfunction compile(code, fn, params) {\n  code = `\"use strict\"; return ${code};`;\n  return (Function('fn', '$', code))(fn, params);\n}\n\nexport default {\n  escape: (code, func, params) => compile(code, func, params),\n  expr:   (code, params) => compile(`(row,data,op)=>${code}`, fn, params),\n  expr2:  (code, params) => compile(`(row0,data0,row,data)=>${code}`, fn, params),\n  join:   (code, params) => compile(`(row1,data1,row2,data2)=>${code}`, fn, params),\n  param:  (code, params) => compile(code, fn, params)\n};","import { Column, Dictionary, Literal } from './ast/constants';\nimport isFunction from '../util/is-function';\n\nconst dictOps = {\n  '==': 1,\n  '!=': 1,\n  '===': 1,\n  '!==': 1\n};\n\n/**\n * Rewrite AST node to be a table column reference.\n * Additionally optimizes dictionary column operations.\n * @param {object} ref AST node to rewrite to a column reference.\n * @param {string} name The name of the column.\n * @param {number} index The table index of the column.\n * @param {object} col The actual table column instance.\n * @param {object} op Parent AST node operating on the column reference.\n */\nexport default function(ref, name, index = 0, col, op) {\n  ref.type = Column;\n  ref.name = name;\n  ref.table = index;\n\n  // proceed only if has parent op and is a dictionary column\n  if (op && col && isFunction(col.keyFor)) {\n    // get other arg if op is an optimizeable operation\n    const lit = dictOps[op.operator]\n      ? op.left === ref ? op.right : op.left\n      : op.callee && op.callee.name === 'equal'\n      ? op.arguments[op.arguments[0] === ref ? 1 : 0]\n      : null;\n\n    // rewrite as dictionary lookup if other arg is a literal\n    if (lit && lit.type === Literal) {\n      rewriteDictionary(op, ref, lit, col.keyFor(lit.value));\n    }\n  }\n\n  return ref;\n}\n\nfunction rewriteDictionary(op, ref, lit, key) {\n  if (key < 0) {\n    // value not in dictionary, rewrite op as false literal\n    op.type = Literal;\n    op.value = false;\n    op.raw = 'false';\n  } else {\n    // rewrite ref as dict key access\n    ref.type = Dictionary;\n\n    // rewrite literal as target dict key\n    lit.value = key;\n    lit.raw = key + '';\n  }\n\n  return true;\n}","import isArray from './is-array';\nimport isMap from './is-map';\n\nexport default function(value) {\n  return isArray(value) ? value\n    : isMap(value) ? value.entries()\n    : value ? Object.entries(value)\n    : [];\n}","import { Literal, ObjectExpression, Property } from './ast/constants';\nimport codegen from './codegen';\nimport compile from './compile';\nimport rewrite from './rewrite';\nimport entries from '../util/entries';\nimport isArray from '../util/is-array';\nimport toString from '../util/to-string';\n\nexport const ROW_OBJECT = 'row_object';\n\nexport function rowObjectExpression(node, props) {\n  node.type = ObjectExpression;\n\n  const p = node.properties = [];\n  for (const prop of entries(props)) {\n    const [name, key] = isArray(prop) ? prop : [prop, prop];\n    p.push({\n      type: Property,\n      key: { type: Literal, raw: toString(key) },\n      value: rewrite({ computed: true }, name)\n    });\n  }\n\n  return node;\n}\n\nexport function rowObjectCode(props) {\n  return codegen(rowObjectExpression({}, props));\n}\n\nexport function rowObjectBuilder(props) {\n  return compile.expr(rowObjectCode(props));\n}","// Hardwire Arrow type ids to sidestep dependency\n// https://github.com/apache/arrow/blob/master/js/src/enum.ts\n\nexport default {\n  /** The default placeholder type */\n  NONE: 0,\n  /** A NULL type having no physical storage */\n  Null: 1,\n  /** Signed or unsigned 8, 16, 32, or 64-bit little-endian integer */\n  Int: 2,\n  /** 2, 4, or 8-byte floating point value */\n  Float: 3,\n  /** Variable-length bytes (no guarantee of UTF8-ness) */\n  Binary: 4,\n  /** UTF8 variable-length string as List<Char> */\n  Utf8: 5,\n  /** Boolean as 1 bit, LSB bit-packed ordering */\n  Bool: 6,\n  /** Precision-and-scale-based decimal type. Storage type depends on the parameters. */\n  Decimal: 7,\n  /** int32_t days or int64_t milliseconds since the UNIX epoch */\n  Date: 8,\n  /** Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight */\n  Time: 9,\n  /** Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond) */\n  Timestamp: 10,\n  /** YEAR_MONTH or DAY_TIME interval in SQL style */\n  Interval: 11,\n  /** A list of some logical data type */\n  List: 12,\n  /** Struct of logical types */\n  Struct: 13,\n  /** Union of logical types */\n  Union: 14,\n  /** Fixed-size binary. Each value occupies the same number of bytes */\n  FixedSizeBinary: 15,\n  /** Fixed-size list. Each value occupies the same number of bytes */\n  FixedSizeList: 16,\n  /** Map of named logical types */\n  Map: 17,\n\n  /** Dictionary aka Category type */\n  Dictionary: -1,\n  Int8: -2,\n  Int16: -3,\n  Int32: -4,\n  Int64: -5,\n  Uint8: -6,\n  Uint16: -7,\n  Uint32: -8,\n  Uint64: -9,\n  Float16: -10,\n  Float32: -11,\n  Float64: -12,\n  DateDay: -13,\n  DateMillisecond: -14,\n  TimestampSecond: -15,\n  TimestampMillisecond: -16,\n  TimestampMicrosecond: -17,\n  TimestampNanosecond: -18,\n  TimeSecond: -19,\n  TimeMillisecond: -20,\n  TimeMicrosecond: -21,\n  TimeNanosecond: -22,\n  DenseUnion: -23,\n  SparseUnion: -24,\n  IntervalDayTime: -25,\n  IntervalYearMonth: -26\n};","import { Data, Vector } from 'apache-arrow';\n\nexport function ceil64Bytes(length, bpe = 1) {\n  return ((((length * bpe) + 63) & ~63) || 64) / bpe;\n}\n\nexport function array(Type, length, bpe = Type.BYTES_PER_ELEMENT) {\n  return new Type(ceil64Bytes(length, bpe));\n}\n\nexport function arrowData(d) {\n  return d instanceof Data\n    ? d\n    : Data.new(d.type, 0, d.length, d.nulls, d.buffers, null, d.dict);\n}\n\nexport function arrowVector(data) {\n  return Vector.new(arrowData(data));\n}\n\nexport const encoder = new TextEncoder();\n\nexport function encode(data, idx, str) {\n  const bytes = encoder.encode(str);\n  data.set(bytes, idx);\n  return bytes.length;\n}\n\nexport function encodeInto(data, idx, str) {\n  return encoder.encodeInto(str, data.subarray(idx)).written;\n}\n\nexport const writeUtf8 = encoder.encodeInto ? encodeInto : encode;","import { array } from './util';\n\nexport default function(type, length) {\n  const data = array(type.ArrayType, length);\n  return {\n    set(value, index) { data[index] = value; },\n    data: () => ({ type, length, buffers: [null, data] })\n  };\n}","import { array } from './util';\n\nexport default function(type, length) {\n  const data = array(type.ArrayType, length / 8);\n  return {\n    set(value, index) {\n      if (value) data[index >> 3] |= (1 << (index % 8));\n    },\n    data: () => ({ type, length, buffers: [null, data] })\n  };\n}","import { array } from './util';\n\nexport default function(type, length) {\n  const data = array(type.ArrayType, length);\n  return {\n    set(value, index) { data[index] = (value / 86400000) | 0; },\n    data: () => ({ type, length, buffers: [null, data] })\n  };\n}","import { array } from './util';\n\nexport default function(type, length) {\n  const data = array(type.ArrayType, length << 1);\n  return {\n    set(value, index) {\n      const i = index << 1;\n      data[  i] = (value % 4294967296) | 0;\n      data[i+1] = (value / 4294967296) | 0;\n    },\n    data: () => ({ type, length, buffers: [null, data] })\n  };\n}","import utf8Builder from './utf8-builder';\nimport { array, arrowVector } from './util';\n\nexport default function(type, length) {\n  const values = [];\n  const data = array(type.indices.ArrayType, length);\n  const keys = Object.create(null);\n\n  let next = -1;\n  let strlen = 0;\n\n  return {\n    set(value, index) {\n      const v = String(value);\n      let k = keys[v];\n      if (k === undefined) {\n        strlen += v.length;\n        keys[v] = k = ++next;\n        values.push(v);\n      }\n      data[index] = k;\n    },\n    data: () => ({\n      type,\n      length,\n      buffers: [null, data],\n      dict: dictionary(type.dictionary, values, strlen)\n    })\n  };\n}\n\nfunction dictionary(type, values, strlen) {\n  const b = utf8Builder(type, values.length, strlen);\n  values.forEach(b.set);\n  return arrowVector(b.data());\n}","import { array, ceil64Bytes, writeUtf8 } from './util';\n\nexport default function(type, length, strlen) {\n  const offset = array(Int32Array, length + 1);\n  const buf = array(Uint8Array, 3 * strlen);\n\n  let idx = 0;\n\n  return {\n    set(value, index) {\n      idx += writeUtf8(buf, idx, value);\n      offset[index + 1] = idx;\n    },\n    data: () => {\n      // slice utf buffer if over-allocated\n      const dlen = ceil64Bytes(idx);\n      const data = buf.length > dlen ? buf.subarray(0, dlen) : buf;\n      return { type, length, buffers: [offset, data] };\n    }\n  };\n}","import Type from '../arrow-types';\nimport arrayBuilder from './array-builder';\nimport boolBuilder from './bool-builder';\nimport dateDayBuilder from './date-day-builder';\nimport dateMillisBuilder from './date-millis-builder';\nimport defaultBuilder from './default-builder';\nimport dictionaryBuilder from './dictionary-builder';\nimport validBuilder from './valid-builder';\n\nexport default function(type, nrows, nullable = true) {\n  let method;\n\n  switch (type.typeId) {\n    case Type.Int:\n      method = type.bitWidth < 64 ? arrayBuilder : null;\n      break;\n    case Type.Float:\n      method = type.precision > 0 ? arrayBuilder : null;\n      break;\n    case Type.Dictionary:\n      // check sub-types against builder assumptions\n      // if check fails, fallback to default builder\n      method = (\n        type.dictionary.typeId === Type.Utf8 &&\n        type.indices.typeId === Type.Int &&\n        type.indices.bitWidth < 64\n      ) ? dictionaryBuilder : null;\n      break;\n    case Type.Bool:\n      method = boolBuilder;\n      break;\n    case Type.Date:\n      method = type.unit ? dateMillisBuilder : dateDayBuilder;\n      break;\n  }\n\n  return method == null ? defaultBuilder(type)\n    : nullable ? validBuilder(method(type, nrows), nrows)\n    : method(type, nrows);\n}","import { Builder } from 'apache-arrow';\n\nexport default function(type) {\n  const b = Builder.new({\n    type,\n    nullValues: [null, undefined],\n    highWaterMark: Infinity\n  });\n  return {\n    set(value, index) { b.set(index, value); },\n    data: () => b.finish().flush()\n  };\n}","import { array } from './util';\n\nexport default function(builder, length) {\n  const valid = array(Uint8Array, length / 8);\n  let nulls = 0;\n\n  return {\n    set(value, index) {\n      if (value == null) {\n        ++nulls;\n      } else {\n        builder.set(value, index);\n        valid[index >> 3] |= (1 << (index % 8));\n      }\n    },\n    data: () => {\n      const d = builder.data();\n      if (nulls) {\n        d.nulls = nulls;\n        d.buffers[2] = valid;\n      }\n      return d;\n    }\n  };\n}","import builder from '../builder';\nimport { arrowData, ceil64Bytes } from '../builder/util';\n\nexport function dataFromArray(array, type) {\n  const length = array.length;\n  const size = ceil64Bytes(length, array.BYTES_PER_ELEMENT);\n\n  let data = array;\n  if (length !== size) {\n    data = new array.constructor(size);\n    data.set(array);\n  }\n\n  return arrowData({ type, length, buffers: [null, data] });\n}\n\nexport function dataFromScan(nrows, scan, column, type, nullable = true) {\n  const b = builder(type, nrows, nullable);\n  scan(column, b.set);\n  return arrowData(b.data());\n}","import {\n  Binary,\n  Bool,\n  DataType,\n  DateDay,\n  DateMillisecond,\n  Dictionary,\n  Float16,\n  Float32,\n  Float64,\n  Int16,\n  Int32,\n  Int64,\n  Int8,\n  IntervalDayTime,\n  IntervalYearMonth,\n  Null,\n  TimeMicrosecond,\n  TimeMillisecond,\n  TimeNanosecond,\n  TimeSecond,\n  Uint16,\n  Uint32,\n  Uint64,\n  Uint8,\n  Utf8\n} from 'apache-arrow';\nimport Type from '../arrow-types';\nimport error from '../../util/error';\nimport toString from '../../util/to-string';\n\nexport default function(type) {\n  if (type instanceof DataType || type == null) {\n    return type;\n  }\n\n  switch (type) {\n    case Type.Binary:\n      return new Binary();\n    case Type.Bool:\n      return new Bool();\n    case Type.DateDay:\n      return new DateDay();\n    case Type.DateMillisecond:\n    case Type.Date:\n      return new DateMillisecond();\n    case Type.Dictionary:\n      return new Dictionary(new Utf8(), new Int32());\n    case Type.Float16:\n      return new Float16();\n    case Type.Float32:\n      return new Float32();\n    case Type.Float64:\n    case Type.Float:\n      return new Float64();\n    case Type.Int8:\n      return new Int8();\n    case Type.Int16:\n      return new Int16();\n    case Type.Int32:\n    case Type.Int:\n      return new Int32();\n    case Type.Int64:\n      return new Int64();\n    case Type.IntervalDayTime:\n      return new IntervalDayTime();\n    case Type.Interval:\n    case Type.IntervalYearMonth:\n      return new IntervalYearMonth();\n    case Type.Null:\n      return new Null();\n    case Type.TimeMicrosecond:\n      return new TimeMicrosecond();\n    case Type.TimeMillisecond:\n    case Type.Time:\n      return new TimeMillisecond();\n    case Type.TimeNanosecond:\n      return new TimeNanosecond();\n    case Type.TimeSecond:\n      return new TimeSecond();\n    case Type.Uint8:\n      return new Uint8();\n    case Type.Uint16:\n      return new Uint16();\n    case Type.Uint32:\n      return new Uint32();\n    case Type.Uint64:\n      return new Uint64();\n    case Type.Utf8:\n      return new Utf8();\n    default:\n      error(\n        `Unsupported type code: ${toString(type)}. ` +\n        'Use a data type constructor instead?'\n      );\n  }\n}","import { Field, FixedSizeList, List, Struct } from 'apache-arrow';\nimport Type from '../arrow-types';\nimport resolveType from '../builder/resolve-type';\nimport error from '../../util/error';\nimport isArrayType from '../../util/is-array-type';\nimport isDate from '../../util/is-date';\nimport isExactUTCDate from '../../util/is-exact-utc-date';\n\nexport function profile(scan, column) {\n  const p = profiler();\n  scan(column, p.add);\n  return p;\n}\n\nexport function profiler() {\n  const p = {\n    count: 0,\n    nulls: 0,\n    bools: 0,\n    nums: 0,\n    ints: 0,\n    bigints: 0,\n    min: Infinity,\n    max: -Infinity,\n    digits: 0,\n    dates: 0,\n    utcdays: 0,\n    strings: 0,\n    strlen: 0,\n    arrays: 0,\n    minlen: Infinity,\n    maxlen: 0,\n    structs: 0,\n\n    add(value) {\n      ++p.count;\n      if (value == null) {\n        ++p.nulls;\n        return;\n      }\n\n      const type = typeof value;\n      if (type === 'string') {\n        ++p.strings;\n      } else if (type === 'number') {\n        ++p.nums;\n        if (value < p.min) p.min = value;\n        if (value > p.max) p.max = value;\n        if (Number.isInteger(value)) ++p.ints;\n      } else if (type === 'boolean') {\n        ++p.bools;\n      } else if (type === 'object') {\n        if (isDate(value)) {\n          ++p.dates;\n          if (isExactUTCDate(value)) {\n            ++p.utcdays;\n          }\n        } else if (isArrayType(value)) {\n          ++p.arrays;\n          if (value.length < p.minlen) p.minlen = value.length;\n          if (value.length > p.maxlen) p.maxlen = value.length;\n          const ap = p.array_prof || (p.array_prof = profiler());\n          value.forEach(ap.add);\n        } else {\n          ++p.structs;\n          const sp = p.struct_prof || (p.struct_prof = {});\n          for (const key in value) {\n            const fp = sp[key] || (sp[key] = profiler());\n            fp.add(value[key]);\n          }\n        }\n      } else if (type === 'bigint') {\n        ++p.bigints;\n        if (value < p.min) p.min = value;\n        if (value > p.max) p.max = value;\n      }\n    },\n    type() {\n      return resolveType(infer(p));\n    }\n  };\n\n  return p;\n}\n\nfunction infer(p) {\n  const valid = p.count - p.nulls;\n\n  if (valid === 0) {\n    return Type.Null;\n  }\n  else if (p.ints === valid) {\n    const v = Math.max(Math.abs(p.min) - 1, p.max);\n    return p.min < 0\n      ? v >= 2 ** 31 ? Type.Float64\n        : v < (1 << 7) ? Type.Int8 : v < (1 << 15) ? Type.Int16 : Type.Int32\n      : v >= 2 ** 32 ? Type.Float64\n        : v < (1 << 8) ? Type.Uint8 : v < (1 << 16) ? Type.Uint16 : Type.Uint32;\n  }\n  else if (p.nums === valid) {\n    return Type.Float64;\n  }\n  else if (p.bigints === valid) {\n    const v = -p.min > p.max ? -p.min - 1n : p.max;\n    return p.min < 0\n      ? v < 2 ** 63 ? Type.Int64\n        : error(`BigInt exceeds 64 bits: ${v}`)\n      : p.max < 2 ** 64 ? Type.Uint64\n        : error(`BigInt exceeds 64 bits: ${p.max}`);\n  }\n  else if (p.bools === valid) {\n    return Type.Bool;\n  }\n  else if (p.utcdays === valid) {\n    return Type.DateDay;\n  }\n  else if (p.dates === valid) {\n    return Type.DateMillisecond;\n  }\n  else if (p.arrays === valid) {\n    const type = Field.new('value', p.array_prof.type(), true);\n    return p.minlen === p.maxlen\n      ? new FixedSizeList(p.minlen, type)\n      : new List(type);\n  }\n  else if (p.structs === valid) {\n    const sp = p.struct_prof;\n    return new Struct(\n      Object.keys(sp).map(name => Field.new(name, sp[name].type(), true))\n    );\n  }\n  else if (p.strings > 0) {\n    return Type.Dictionary;\n  }\n  else {\n    error('Type inference failure');\n  }\n}","export default function(d) {\n  return d.getUTCHours() === 0\n    && d.getUTCMinutes() === 0\n    && d.getUTCSeconds() === 0\n    && d.getUTCMilliseconds() === 0;\n}","import { dataFromScan } from './data-from';\nimport { profile } from './profiler';\nimport resolveType from '../builder/resolve-type';\n\nexport default function(data, name, nrows, scan, type, nullable = true) {\n  type = resolveType(type);\n\n  // perform type inference if needed\n  if (!type) {\n    const p = profile(scan, name);\n    nullable = p.nulls > 0;\n    type = p.type();\n  }\n\n  return dataFromScan(nrows, scan, name, type, nullable);\n}","import {\n  Float32, Float64,\n  Int16, Int32, Int64, Int8,\n  Uint16, Uint32, Uint64, Uint8, Vector\n} from 'apache-arrow';\nimport { dataFromArray, dataFromScan } from './data-from';\nimport { profile } from './profiler';\nimport resolveType from '../builder/resolve-type';\nimport isTypedArray from '../../util/is-typed-array';\n\nexport default function(table, name, nrows, scan, type, nullable = true) {\n  type = resolveType(type);\n  const column = table.column(name);\n  const reified = !(table.isFiltered() || table.isOrdered());\n\n  // use existing arrow data if types match\n  const vec = arrowVector(column);\n  if (vec && reified && typeCompatible(vec.type, type)) {\n    return vec;\n  }\n\n  // if backing data is a typed array, leverage that\n  const data = column.data;\n  if (isTypedArray(data)) {\n    const dtype = typeFromArray(data);\n    if (reified && dtype && typeCompatible(dtype, type)) {\n      return dataFromArray(data, dtype);\n    } else {\n      type = type || dtype;\n      nullable = false;\n    }\n  }\n\n  // perform type inference if needed\n  if (!type) {\n    const p = profile(scan, column);\n    nullable = p.nulls > 0;\n    type = p.type();\n  }\n\n  return dataFromScan(nrows, scan, column, type, nullable);\n}\n\nfunction arrowVector(value) {\n  return value instanceof Vector ? value\n    : value.vector instanceof Vector ? value.vector\n    : null;\n}\n\nfunction typeFromArray(data) {\n  const types = {\n    Float32Array:    Float32,\n    Float64Array:    Float64,\n    Int8Array:       Int8,\n    Int16Array:      Int16,\n    Int32Array:      Int32,\n    Uint8Array:      Uint8,\n    Uint16Array:     Uint16,\n    Uint32Array:     Uint32,\n    BigInt64Array:   Int64,\n    BigUint64Array:  Uint64\n  };\n  const Type = types[data.constructor.name];\n  return Type ? new Type() : null;\n}\n\nfunction typeCompatible(a, b) {\n  return !a || !b ? true : a.compareTo(b);\n}","import isArrayType from '../../util/is-array-type';\n\nexport function scanArray(data, limit, offset) {\n  const n = Math.min(data.length, offset + limit);\n  return (name, visit) => {\n    for (let i = offset; i < n; ++i) {\n      visit(data[i][name], i);\n    }\n  };\n}\n\nexport function scanTable(table, limit, offset) {\n  const scanAll = offset === 0 && table.numRows() <= limit\n               && !table.isFiltered() && !table.isOrdered();\n\n  return (column, visit) => {\n    let i = -1;\n    scanAll && isArrayType(column.data)\n      ? column.data.forEach(visit)\n      : table.scan(\n          row => visit(column.get(row), ++i),\n          true, limit, offset\n        );\n  };\n}","import { Table } from 'apache-arrow';\nimport error from '../util/error';\n\nexport function table() {\n  // trap Table access to provide a helpful message\n  // when Apache Arrow has not been imported\n  try {\n    return Table;\n  } catch (err) {\n    error(\n      'Apache Arrow not imported, ' +\n      'see https://github.com/uwdata/arquero#usage'\n    );\n  }\n}\n\nexport function from(arrow) {\n  return arrow && arrow.chunks ? arrow : table().from(arrow);\n}","import { Table } from 'apache-arrow'; // eslint-disable-line no-unused-vars\n\nimport dataFromObjects from './data-from-objects';\nimport dataFromTable from './data-from-table';\nimport { scanArray, scanTable } from './scan';\nimport { table } from '../arrow-table';\nimport error from '../../util/error';\nimport isArray from '../../util/is-array';\nimport isFunction from '../../util/is-function';\n\n/**\n * Options for Arrow encoding.\n * @typedef {object} ArrowFormatOptions\n * @property {number} [limit=Infinity] The maximum number of rows to include.\n * @property {number} [offset=0] The row offset indicating how many initial\n *  rows to skip.\n * @property {string[]|(data: object) => string[]} [columns] Ordered list of\n *  column names to include. If function-valued, the function should accept\n *  a dataset as input and return an array of column name strings.\n * @property {object} [types] The Arrow data types to use. If specified,\n *  the input should be an object with column names for keys and Arrow data\n *  types for values. If a column type is not explicitly provided, type\n *  inference will be performed to guess an appropriate type.\n */\n\n/**\n * Create an Apache Arrow table for an input dataset.\n * @param {Array|object} data An input dataset to convert to Arrow format.\n *  If array-valued, the data should consist of an array of objects where\n *  each entry represents a row and named properties represent columns.\n *  Otherwise, the input data should be an Arquero table.\n * @param {ArrowFormatOptions} [options] Encoding options, including\n *  column data types.\n * @return {Table} An Apache Arrow Table instance.\n */\nexport default function(data, options = {}) {\n  const { types = {} } = options;\n  const { dataFrom, names, nrows, scan } = init(data, options);\n  return table().new(\n    names.map(name => {\n      const col = dataFrom(data, name, nrows, scan, types[name]);\n      return col.length === nrows\n        ? col\n        : error('Column length mismatch');\n    }),\n    names\n  );\n}\n\nfunction init(data, options) {\n  const { columns, limit = Infinity, offset = 0 } = options;\n  const names = isFunction(columns) ? columns(data)\n    : isArray(columns) ? columns\n    : null;\n  if (isArray(data)) {\n    return {\n      dataFrom: dataFromObjects,\n      names: names || Object.keys(data[0]),\n      nrows: Math.min(limit, data.length - offset),\n      scan: scanArray(data, limit, offset)\n    };\n  } else if (isTable(data)) {\n    return {\n      dataFrom: dataFromTable,\n      names: names || data.columnNames(),\n      nrows: Math.min(limit, data.numRows() - offset),\n      scan: scanTable(data, limit, offset)\n    };\n  } else {\n    error('Unsupported input data type');\n  }\n}\n\nfunction isTable(data) {\n  return data && isFunction(data.reify);\n}","import Table from '../table/table'; // eslint-disable-line no-unused-vars\n\nimport inferFormat from './infer';\nimport isFunction from '../util/is-function';\n\n/**\n * Column selection function.\n * @typedef {(table: Table) => string[]} ColumnSelectFunction\n */\n\n/**\n * Column selection options.\n * @typedef {string[]|ColumnSelectFunction} ColumnSelectOptions\n */\n\n/**\n * Column format options. The object keys should be column names.\n * The object values should be formatting functions or objects.\n * If specified, these override any automatically inferred options.\n * @typedef {Object.<string, import('./value').ValueFormatOptions} ColumnFormatOptions\n */\n\n/**\n * Column alignment options. The object keys should be column names.\n * The object values should be aligment strings, one of 'l' (left),\n * 'c' (center), or 'r' (right).\n * If specified, these override any automatically inferred options.\n * @typedef {Object.<string, 'l'|'c'|'r'>} ColumnAlignOptions\n */\n\nexport function columns(table, names) {\n  return isFunction(names)\n    ? names(table)\n    : names || table.columnNames();\n}\n\nexport function formats(table, names, options) {\n  const formatOpt = options.format || {};\n  const alignOpt = options.align || {};\n  const format = {};\n  const align = {};\n\n  names.forEach(name => {\n    const auto = inferFormat(values(table, name), options);\n    align[name] = alignOpt[name] || auto.align;\n    format[name] = formatOpt[name] || auto.format;\n  });\n\n  return { align, format };\n}\n\nfunction values(table, columnName) {\n  const column = table.column(columnName);\n  return fn => table.scan(row => fn(column.get(row)));\n}\n\nexport function scan(table, names, limit = 100, offset, ctx) {\n  const data = table.data();\n  const n = names.length;\n  table.scan(row => {\n    ctx.row(row);\n    for (let i = 0; i < n; ++i) {\n      const name = names[i];\n      ctx.cell(data[names[i]].get(row), name, i);\n    }\n  }, true, limit, offset);\n}","import isDate from '../util/is-date';\n\nfunction isExactDateUTC(d) {\n  return d.getUTCHours() === 0\n    && d.getUTCMinutes() === 0\n    && d.getUTCSeconds() === 0\n    && d.getUTCMilliseconds() === 0;\n}\n\nexport default function(scan, options = {}) {\n  let count = 0;\n  let nulls = 0;\n  let dates = 0;\n  let dutcs = 0;\n  let nums = 0;\n  let digits = 0;\n\n  scan(value => {\n    ++count;\n    if (value == null) {\n      ++nulls;\n      return;\n    }\n\n    const type = typeof value;\n    if (type === 'object' && isDate(value)) {\n      ++dates;\n      if (isExactDateUTC(value)) ++dutcs;\n    } else if (type === 'number') {\n      ++nums;\n      if (value === value &&  (value | 0) !== value) {\n        const s = value + '';\n        const p = s.indexOf('.');\n        if (p >= 0) {\n          const e = s.indexOf('e');\n          const l = e > 0 ? e : s.length;\n          digits = Math.max(digits, l - p - 1);\n        }\n      }\n    }\n  });\n\n  return {\n    align:  (nulls + nums + dates) / count > 0.5 ? 'r' : 'l',\n    format: {\n      utc:    dates === dutcs,\n      digits: Math.min(digits, options.maxdigits || 6)\n    }\n  };\n}","import { formatDate, formatUTCDate } from '../util/format-date';\nimport isDate from '../util/is-date';\nimport isFunction from '../util/is-function';\nimport isTypedArray from '../util/is-typed-array';\n\n/**\n * Column format object.\n * @typedef {object} ValueFormatObject\n * @property {boolean} [utc=false] If true, format dates in UTC time.\n * @property {number} [digits=0] The number of fractional digits to include\n *  when formatting numbers.\n * @property {number} [maxlen=30] The maximum string length for formatting\n *  nested object or array values.\n */\n\n/**\n * @callback ValueFormatFunction\n * @param {*} value The value to format.\n * @return {*} A string-coercible or JSON-compatible formatted value.\n */\n\n/**\n * Value format options.\n * @typedef {ValueFormatObject|ValueFormatFunction} ValueFormatOptions\n */\n\n/**\n * Format a value as a string.\n * @param {*} v The value to format.\n * @param {ValueFormatOptions} options Formatting options.\n * @return {string} The formatted string.\n */\nexport default function(v, options = {}) {\n  if (isFunction(options)) {\n    return options(v) + '';\n  }\n\n  const type = typeof v;\n\n  if (type === 'object') {\n    if (isDate(v)) {\n      return options.utc ? formatUTCDate(v) : formatDate(v);\n    } else {\n      const s = JSON.stringify(\n        v,\n        (k, v) => isTypedArray(v) ? Array.from(v) : v\n      );\n      const maxlen = options.maxlen || 30;\n      return s.length > maxlen\n        ? s.slice(0, 28) + '\\u2026' + (s[0] === '[' ? ']' : '}')\n        : s;\n    }\n  } else if (type === 'number') {\n    const digits = options.digits || 0;\n    let a;\n    return v !== 0 && ((a = Math.abs(v)) >= 1e18 || a < Math.pow(10, -digits))\n      ? v.toExponential(digits)\n      : v.toFixed(digits);\n  } else {\n    return v + '';\n  }\n}","export default function(obj, fn, output = {}) {\n  for (const key in obj) {\n    output[key] = fn(obj[key], key);\n  }\n  return output;\n}","import ColumnTable from '../table/column-table'; // eslint-disable-line no-unused-vars\n\nimport formatValue from './value';\nimport { columns, formats, scan } from './util';\nimport isFunction from '../util/is-function';\nimport mapObject from '../util/map-object';\n\n/**\n * Null format function.\n * @callback NullFormat\n * @param {null|undefined} [value] The value to format.\n * @return {string} The formatted HTML string.\n */\n\n/**\n * CSS style function.\n * @callback StyleFunction\n * @param {string} name The column name.\n * @param {number} row The table row index.\n * @return {string} A CSS style string.\n */\n\n/**\n * CSS style options.\n * @typedef {Object.<string, string | StyleFunction>} StyleOptions\n */\n\n/**\n * Options for HTML formatting.\n * @typedef {object} HTMLFormatOptions\n * @property {number} [limit=Infinity] The maximum number of rows to print.\n * @property {number} [offset=0] The row offset indicating how many initial rows to skip.\n * @property {import('./util').ColumnSelectOptions} [columns] Ordered list\n *  of column names to include. If function-valued, the function should\n *  accept a table as input and return an array of column name strings.\n * @property {import('./util').ColumnAlignOptions} [align] Object of column\n *  alignment options. The object keys should be column names. The object\n *  values should be aligment strings, one of 'l' (left), 'c' (center), or\n *  'r' (right). If specified, these override automatically inferred options.\n * @property {import('./util').ColumnFormatOptions} [format] Object of column\n *  format options. The object keys should be column names. The object values\n *  should be formatting functions or specification objects. If specified,\n *  these override automatically inferred options.\n * @property {NullFormat} [null] Format function for null or undefined values.\n *  If specified, this function will be invoked with the null or undefined\n *  value as the sole input, and the return value will be used as the HTML\n *  output for the value.\n * @property {StyleOptions} [style] CSS styles to include in HTML output.\n *  The object keys should be HTML table tag names: 'table', 'thead',\n *  'tbody', 'tr', 'th', or 'td'. The object values should be strings of\n *  valid CSS style directives (such as \"font-weight: bold;\") or functions\n *  that take a column name and row as inputs and return a CSS string.\n * @property {number} [maxdigits=6] The maximum number of fractional digits\n *  to include when formatting numbers. This option is passed to the format\n *  inference method and is overridden by any explicit format options.\n */\n\n/**\n * Format a table as an HTML table string.\n * @param {ColumnTable} table The table to format.\n * @param {HTMLFormatOptions} options The formatting options.\n * @return {string} An HTML table string.\n */\nexport default function(table, options = {}) {\n  const names = columns(table, options.columns);\n  const { align, format } = formats(table, names, options);\n  const style = styles(options);\n  const nullish = options.null;\n\n  const alignValue = a => a === 'c' ? 'center' : a === 'r' ? 'right' : 'left';\n  const escape = s => s.replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n  const baseFormat = (value, opt) => escape(formatValue(value, opt));\n  const formatter = nullish\n    ? (value, opt) => value == null ? nullish(value) : baseFormat(value, opt)\n    : baseFormat;\n\n  let r = -1;\n  let idx = -1;\n\n  const tag = (tag, name, shouldAlign) => {\n    const a = shouldAlign ? alignValue(align[name]) : '';\n    const s = style[tag] ? (style[tag](name, idx, r) || '') : '';\n    const css = (a ? (`text-align: ${a};` + (s ? ' ' : '')) : '') + s;\n    return `<${tag}${css ? ` style=\"${css}\"` : ''}>`;\n  };\n\n  let text = tag('table')\n    + tag('thead')\n    + tag('tr', r)\n    + names.map(name => `${tag('th', name, 1)}${name}</th>`).join('')\n    + '</tr></thead>'\n    + tag('tbody');\n\n  scan(table, names, options.limit, options.offset, {\n    row(row) {\n      r = row;\n      text += (++idx ? '</tr>' : '') + tag('tr');\n    },\n    cell(value, name) {\n      text += tag('td', name, 1)\n        + formatter(value, format[name])\n        + '</td>';\n    }\n  });\n\n  return text + '</tr></tbody></table>';\n}\n\nfunction styles(options) {\n  return mapObject(\n    options.style,\n    value => isFunction(value) ? value : () => value\n  );\n}","export default function(value, trueValue = true, falseValue = false) {\n  return (value === undefined || value) ? trueValue : falseValue;\n}","import ColumnTable from '../table/column-table'; // eslint-disable-line no-unused-vars\n\nimport { columns } from './util';\nimport { formatUTCDate } from '../util/format-date';\nimport defaultTrue from '../util/default-true';\nimport isDate from '../util/is-date';\n\n/**\n * Options for JSON formatting.\n * @typedef {object} JSONFormatOptions\n * @property {number} [limit=Infinity] The maximum number of rows to print.\n * @property {number} [offset=0] The row offset indicating how many initial\n *  rows to skip.\n * @property {boolean} [schema=true] Flag indicating if table schema metadata\n *  should be included in the JSON output. If false, only the data payload\n *  is included.\n * @property {import('./util').ColumnSelectOptions} [columns] Ordered list\n *  of column names to include. If function-valued, the function should\n *  accept a table as input and return an array of column name strings.\n * @property {Object.<string, (value: any) => any>} [format] Object of column\n *  format options. The object keys should be column names. The object values\n *  should be formatting functions to invoke to transform column values prior\n *  to output. If specified, these override automatically inferred options.\n */\n\nconst defaultFormatter = value => isDate(value)\n  ? formatUTCDate(value, true)\n  : value;\n\n/**\n * Format a table as a JavaScript Object Notation (JSON) string.\n * @param {ColumnTable} table The table to format.\n * @param {JSONFormatOptions} options The formatting options.\n * @return {string} A JSON string.\n */\nexport default function(table, options = {}) {\n  const schema = defaultTrue(options.schema);\n  const format = options.format || {};\n  const names = columns(table, options.columns);\n  let text = '{';\n\n  if (schema) {\n    text += '\"schema\":{\"fields\":'\n      + JSON.stringify(names.map(name => ({ name })))\n      + '},\"data\":{';\n  }\n\n  names.forEach((name, i) => {\n    text += (i ? ',' : '') + JSON.stringify(name) + ':[';\n\n    const column = table.column(name);\n    const formatter = format[name] || defaultFormatter;\n    let r = -1;\n    table.scan(row => {\n      const value = column.get(row);\n      text += (++r ? ',' : '') + JSON.stringify(formatter(value));\n    }, true, options.limit, options.offset);\n\n    text += ']';\n  });\n\n  return text + '}' + (schema ? '}' : '');\n}","import entries from './entries';\n\nexport default function(map, pairs) {\n  for (const [key, value] of entries(pairs)) {\n    map.set(key, value);\n  }\n  return map;\n}","export default function(str) {\n  return str.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&');\n}","import assign from '../util/assign';\nimport error from '../util/error';\nimport escapeRegExp from '../util/escape-regexp';\nimport isArray from '../util/is-array';\nimport isFunction from '../util/is-function';\nimport isNumber from '../util/is-number';\nimport isObject from '../util/is-object';\nimport isString from '../util/is-string';\nimport toString from '../util/to-string';\n\nexport default function resolve(table, sel, map = new Map()) {\n  sel = isNumber(sel) ? table.columnName(sel) : sel;\n\n  if (isString(sel)) {\n    map.set(sel, sel);\n  } else if (isArray(sel)) {\n    sel.forEach(r => resolve(table, r, map));\n  } else if (isFunction(sel)) {\n    resolve(table, sel(table), map);\n  } else if (isObject(sel)) {\n    assign(map, sel);\n  } else {\n    error(`Invalid column selection: ${toString(sel)}`);\n  }\n\n  return map;\n}\n\nfunction decorate(value, toObject) {\n  value.toObject = toObject;\n  return value;\n}\n\nfunction toObject(value) {\n  return isArray(value) ? value.map(toObject)\n    : value && value.toObject ? value.toObject()\n    : value;\n}\n\n/**\n * Proxy type for SelectHelper function.\n * @typedef {import('../table/transformable').SelectHelper} SelectHelper\n */\n\n/**\n * Select all columns in a table.\n * Returns a function-valued selection compatible with {@link Table#select}.\n * @return {SelectHelper} Selection function compatible with select().\n */\nexport function all() {\n  return decorate(\n    table => table.columnNames(),\n    () => ({ all: [] })\n  );\n}\n\n/**\n * Negate a column selection, selecting all other columns in a table.\n * Returns a function-valued selection compatible with {@link Table#select}.\n * @param {...any} selection The selection to negate. May be a column name,\n *  column index, array of either, or a selection function (e.g., from range).\n * @return {SelectHelper} Selection function compatible with select().\n */\nexport function not(...selection) {\n  selection = selection.flat();\n  return decorate(\n    table => {\n      const drop = resolve(table, selection);\n      return table.columnNames(name => !drop.has(name));\n    },\n    () => ({ not: toObject(selection) })\n  );\n}\n\n/**\n * Select a contiguous range of columns.\n * @param {string|number} start The name/index of the first selected column.\n * @param {string|number} end The name/index of the last selected column.\n * @return {SelectHelper} Selection function compatible with select().\n */\nexport function range(start, end) {\n  return decorate(\n    table => {\n      let i = isNumber(start) ? start : table.columnIndex(start);\n      let j = isNumber(end) ? end : table.columnIndex(end);\n      if (j < i) { const t = j; j = i; i = t; }\n      return table.columnNames().slice(i, j + 1);\n    },\n    () => ({ range: [start, end] })\n  );\n}\n\n/**\n * Select all columns whose names match a pattern.\n * @param {string|RegExp} pattern A string or regular expression pattern to match.\n * @return {SelectHelper} Selection function compatible with select().\n */\nexport function matches(pattern) {\n  if (isString(pattern)) pattern = RegExp(escapeRegExp(pattern));\n  return decorate(\n    table => table.columnNames(name => pattern.test(name)),\n    () => ({ matches: [pattern.source, pattern.flags] })\n  );\n}\n\n/**\n * Select all columns whose names start with a string.\n * @param {string} string The string to match at the start of the column name.\n * @return {SelectHelper} Selection function compatible with select().\n */\nexport function startswith(string) {\n  return matches(RegExp('^' + escapeRegExp(string)));\n}\n\n/**\n * Select all columns whose names end with a string.\n * @param {string} string The string to match at the end of the column name.\n * @return {SelectHelper} Selection function compatible with select().\n */\nexport function endswith(string) {\n  return matches(RegExp(escapeRegExp(string) + '$'));\n}","import { defaultColumnFactory } from './column';\nimport columnsFrom from './columns-from';\nimport columnSet from './column-set';\nimport Table from './table';\nimport { nest, regroup, reindex } from './regroup';\nimport { rowObjectBuilder } from '../expression/row-object';\nimport toArrow from '../format/to-arrow';\nimport toCSV from '../format/to-csv';\nimport toHTML from '../format/to-html';\nimport toJSON from '../format/to-json';\nimport toMarkdown from '../format/to-markdown';\nimport resolve, { all } from '../helpers/selection';\nimport arrayType from '../util/array-type';\nimport entries from '../util/entries';\nimport error from '../util/error';\nimport mapObject from '../util/map-object';\n\n/**\n * Class representing a table backed by a named set of columns.\n */\nexport default class ColumnTable extends Table {\n\n  /**\n   * Create a new ColumnTable from existing input data.\n   * @param {object[]|Iterable<object>|object|Map} values The backing table data values.\n   *  If array-valued, should be a list of JavaScript objects with\n   *  key-value properties for each column value.\n   *  If object- or Map-valued, a table with two columns (one for keys,\n   *  one for values) will be created.\n   * @param {string[]} [names] The named columns to include.\n   * @return {ColumnTable} A new ColumnTable instance.\n   */\n  static from(values, names) {\n    return new ColumnTable(columnsFrom(values, names), names);\n  }\n\n  /**\n   * Create a new table for a set of named columns.\n   * @param {object|Map} columns\n   *  The set of named column arrays. Keys are column names.\n   *  The enumeration order of the keys determines the column indices,\n   *  unless the names parameter is specified.\n   *  Values must be arrays (or array-like values) of identical length.\n   * @param {string[]} [names] Ordered list of column names. If specified,\n   *  this array determines the column indices. If not specified, the\n   *  key enumeration order of the columns object is used.\n   * @return {ColumnTable} the instantiated ColumnTable instance.\n   */\n  static new(columns, names) {\n    if (columns instanceof ColumnTable) return columns;\n    const data = {};\n    const keys = [];\n    for (const [key, value] of entries(columns)) {\n      data[key] = value;\n      keys.push(key);\n    }\n    return new ColumnTable(data, names || keys);\n  }\n\n  /**\n   * Instantiate a new ColumnTable instance.\n   * @param {object} columns An object mapping column names to values.\n   * @param {string[]} [names] An ordered list of column names.\n   * @param {BitSet} [filter] A filtering BitSet.\n   * @param {GroupBySpec} [group] A groupby specification.\n   * @param {RowComparator} [order] A row comparator function.\n   * @param {Params} [params] An object mapping parameter names to values.\n   */\n  constructor(columns, names, filter, group, order, params) {\n    mapObject(columns, defaultColumnFactory, columns);\n    names = names || Object.keys(columns);\n    const nrows = names.length ? columns[names[0]].length : 0;\n    super(names, nrows, columns, filter, group, order, params);\n  }\n\n  /**\n   * Create a new table with the same type as this table.\n   * The new table may have different data, filter, grouping, or ordering\n   * based on the values of the optional configuration argument. If a\n   * setting is not specified, it is inherited from the current table.\n   * @param {CreateOptions} [options] Creation options for the new table.\n   * @return {ColumnTable} A newly created table.\n   */\n  create({ data, names, filter, groups, order }) {\n    const f = filter !== undefined ? filter : this.mask();\n\n    return new ColumnTable(\n      data || this._data,\n      names || (!data ? this._names : null),\n      f,\n      groups !== undefined ? groups : regroup(this._group, filter && f),\n      order !== undefined ? order : this._order,\n      this._params\n    );\n  }\n\n  /**\n   * Create a new table with additional columns drawn from one or more input\n   * tables. All tables must have the same numer of rows and are reified\n   * prior to assignment. In the case of repeated column names, input table\n   * columns overwrite existing columns.\n   * @param {...ColumnTable} tables The tables to merge with this table.\n   * @return {ColumnTable} A new table with merged columns.\n   * @example table.assign(table1, table2)\n   */\n  assign(...tables) {\n    const nrows = this.numRows();\n    const base = this.reify();\n    const cset = columnSet(base).groupby(base.groups());\n    tables.forEach(input => {\n      input = ColumnTable.new(input);\n      if (input.numRows() !== nrows) error('Assign row counts do not match');\n      input = input.reify();\n      input.columnNames(name => cset.add(name, input.column(name)));\n    });\n    return this.create(cset.new());\n  }\n\n  /**\n   * Get the backing set of columns for this table.\n   * @return {ColumnData} Object of named column instances.\n   */\n  columns() {\n    return this._data;\n  }\n\n  /**\n   * Get the column instance with the given name.\n   * @param {string} name The column name.\n   * @return {ColumnType | undefined} The named column, or undefined if it does not exist.\n   */\n  column(name) {\n    return this._data[name];\n  }\n\n  /**\n   * Get the column instance at the given index position.\n   * @param {number} index The zero-based column index.\n   * @return {ColumnType | undefined} The column, or undefined if it does not exist.\n   */\n  columnAt(index) {\n    return this._data[this._names[index]];\n  }\n\n  /**\n   * Get an array of values contained in a column. The resulting array\n   * respects any table filter or orderby criteria.\n   * @param {string} name The column name.\n   * @param {ArrayConstructor|import('./table').TypedArrayConstructor} [constructor=Array]\n   *  The array constructor for instantiating the output array.\n   * @return {import('./table').DataValue[]|import('./table).TypedArray} The array of column values.\n   */\n  array(name, constructor = Array) {\n    const column = this.column(name);\n    const array = new constructor(this.numRows());\n    let idx = -1;\n    this.scan(row => array[++idx] = column.get(row), true);\n    return array;\n  }\n\n  /**\n   * Get the value for the given column and row.\n   * @param {string} name The column name.\n   * @param {number} [row=0] The row index, defaults to zero if not specified.\n   * @return {import('./table').DataValue} The table value at (column, row).\n   */\n  get(name, row = 0) {\n    const column = this.column(name);\n    return this.isFiltered() || this.isOrdered()\n      ? column.get(this.indices()[row])\n      : column.get(row);\n  }\n\n  /**\n   * Returns an accessor (\"getter\") function for a column. The returned\n   * function takes a row index as its single argument and returns the\n   * corresponding column value.\n   * @param {string} name The column name.\n   * @return {import('./table').ColumnGetter} The column getter function.\n   */\n  getter(name) {\n    const column = this.column(name);\n    const indices = this.isFiltered() || this.isOrdered() ? this.indices() : null;\n    return indices ? row => column.get(indices[row])\n      : column ? row => column.get(row)\n      : error(`Unrecognized column: ${name}`);\n  }\n\n  /**\n   * Returns an object representing a table row.\n   * @param {number} [row=0] The row index, defaults to zero if not specified.\n   * @return {object} A row object with named properties for each column.\n   */\n  object(row = 0) {\n    return objectBuilder(this)(row);\n  }\n\n  /**\n   * Returns an array of objects representing table rows.\n   * @param {ObjectsOptions} [options] The options for row object generation.\n   * @return {object[]} An array of row objects.\n   */\n  objects(options = {}) {\n    const { grouped, limit, offset } = options;\n\n    // generate array of row objects\n    const names = resolve(this, options.columns || all());\n    const create = rowObjectBuilder(names);\n    const obj = [];\n    this.scan(\n      (row, data) => obj.push(create(row, data)),\n      true, limit, offset\n    );\n\n    // produce nested output as requested\n    if (grouped && this.isGrouped()) {\n      const idx = [];\n      this.scan(row => idx.push(row), true, limit, offset);\n      return nest(this, idx, obj, grouped);\n    }\n\n    return obj;\n  }\n\n  /**\n   * Returns an iterator over objects representing table rows.\n   * @return {Iterator<object>} An iterator over row objects.\n   */\n  *[Symbol.iterator]() {\n    const create = objectBuilder(this);\n    const n = this.numRows();\n    for (let i = 0; i < n; ++i) {\n      yield create(i);\n    }\n  }\n\n  /**\n   * Create a new fully-materialized instance of this table.\n   * All filter and orderby settings are removed from the new table.\n   * Instead, the backing data itself is filtered and ordered as needed.\n   * @param {number[]} [indices] Ordered row indices to materialize.\n   *  If unspecified, all rows passing the table filter are used.\n   * @return {ColumnTable} A reified table.\n   */\n  reify(indices) {\n    const nrows = indices ? indices.length : this.numRows();\n    const names = this._names;\n    let data, groups;\n\n    if (!indices && !this.isOrdered()) {\n      if (!this.isFiltered()) {\n        return this; // data already reified\n      } else if (nrows === this.totalRows()) {\n        data = this.data(); // all rows pass filter, skip copy\n      }\n    }\n\n    if (!data) {\n      const scan = indices ? f => indices.forEach(f) : f => this.scan(f, true);\n      const ncols = names.length;\n      data = {};\n\n      for (let i = 0; i < ncols; ++i) {\n        const name = names[i];\n        const prev = this.column(name);\n        const curr = data[name] = new (arrayType(prev))(nrows);\n        let r = -1;\n        scan(row => curr[++r] = prev.get(row));\n      }\n\n      if (this.isGrouped()) {\n        groups = reindex(this.groups(), scan, !!indices, nrows);\n      }\n    }\n\n    return this.create({ data, names, groups, filter: null, order: null });\n  }\n\n  /**\n   * Apply a sequence of transformations to this table. The output\n   * of each transform is passed as input to the next transform, and\n   * the output of the last transform is then returned.\n   * @param {...(Transform|Transform[])} transforms Transformation\n   *  functions to apply to the table in sequence. Each function should\n   *  take a single table as input and return a table as output.\n   * @return {ColumnTable} The output of the last transform.\n   */\n  transform(...transforms) {\n    return transforms.flat().reduce((t, f) => f(t), this);\n  }\n\n  /**\n   * Format this table as an Apache Arrow table.\n   * @param {ArrowFormatOptions} [options] The formatting options.\n   * @return {import('apache-arrow').Table} An Apache Arrow table.\n   */\n  toArrow(options) {\n    return toArrow(this, options);\n  }\n\n  /**\n   * Format this table as binary data in the Apache Arrow IPC format.\n   * @param {ArrowFormatOptions} [options] The formatting options.\n   * @return {Uint8Array} A new Uint8Array of Arrow-encoded binary data.\n   */\n  toArrowBuffer(options) {\n    return toArrow(this, options).serialize();\n  }\n\n  /**\n   * Format this table as a comma-separated values (CSV) string. Other\n   * delimiters, such as tabs or pipes ('|'), can be specified using\n   * the options argument.\n   * @param {CSVFormatOptions} [options] The formatting options.\n   * @return {string} A delimited value string.\n   */\n  toCSV(options) {\n    return toCSV(this, options);\n  }\n\n  /**\n   * Format this table as an HTML table string.\n   * @param {HTMLFormatOptions} [options] The formatting options.\n   * @return {string} An HTML table string.\n   */\n  toHTML(options) {\n    return toHTML(this, options);\n  }\n\n  /**\n   * Format this table as a JavaScript Object Notation (JSON) string.\n   * @param {JSONFormatOptions} [options] The formatting options.\n   * @return {string} A JSON string.\n   */\n  toJSON(options) {\n    return toJSON(this, options);\n  }\n\n  /**\n   * Format this table as a GitHub-Flavored Markdown table string.\n   * @param {MarkdownFormatOptions} [options] The formatting options.\n   * @return {string} A GitHub-Flavored Markdown table string.\n   */\n  toMarkdown(options) {\n    return toMarkdown(this, options);\n  }\n}\n\nfunction objectBuilder(table) {\n  let b = table._builder;\n\n  if (!b) {\n    const create = rowObjectBuilder(table.columnNames());\n    const data = table.data();\n    if (table.isOrdered() || table.isFiltered()) {\n      const indices = table.indices();\n      b = row => create(indices[row], data);\n    } else {\n      b = row => create(row, data);\n    }\n    table._builder = b;\n  }\n\n  return b;\n}\n\n/**\n * A table transformation.\n * @typedef {(table: ColumnTable) => ColumnTable} Transform\n */\n\n/**\n * Proxy type for BitSet class.\n * @typedef {import('./table').BitSet} BitSet\n */\n\n/**\n * Proxy type for ColumnType interface.\n * @typedef {import('./column').ColumnType} ColumnType\n */\n\n/**\n * A named collection of columns.\n * @typedef {{[key: string]: ColumnType}} ColumnData\n */\n\n/**\n * Proxy type for GroupBySpec.\n * @typedef {import('./table').GroupBySpec} GroupBySpec\n */\n\n/**\n * Proxy type for RowComparator.\n * @typedef {import('./table').RowComparator} RowComparator\n */\n\n/**\n * Proxy type for Params.\n * @typedef {import('./table').Params} Params\n */\n\n/**\n * Options for Arrow formatting.\n * @typedef {import('../arrow/encode').ArrowFormatOptions} ArrowFormatOptions\n */\n\n/**\n * Options for CSV formatting.\n * @typedef {import('../format/to-csv').CSVFormatOptions} CSVFormatOptions\n */\n\n/**\n * Options for HTML formatting.\n * @typedef {import('../format/to-html').HTMLFormatOptions} HTMLFormatOptions\n */\n\n/**\n * Options for JSON formatting.\n * @typedef {import('../format/to-json').JSONFormatOptions} JSONFormatOptions\n */\n\n/**\n * Options for Markdown formatting.\n * @typedef {import('../format/to-markdown').MarkdownFormatOptions} MarkdownFormatOptions\n */","import isTypedArray from './is-typed-array';\n\nexport default function(column) {\n  return isTypedArray(column.data) ? column.data.constructor : Array;\n}","import ColumnTable from '../table/column-table'; // eslint-disable-line no-unused-vars\n\nimport { columns, scan } from './util';\nimport { formatUTCDate } from '../util/format-date';\nimport isDate from '../util/is-date';\n\n/**\n * Options for CSV formatting.\n * @typedef {object} CSVFormatOptions\n * @property {string} [delimiter=','] The delimiter between values.\n * @property {number} [limit=Infinity] The maximum number of rows to print.\n * @property {number} [offset=0] The row offset indicating how many initial rows to skip.\n * @property {import('./util').ColumnSelectOptions} [columns] Ordered list\n *  of column names to include. If function-valued, the function should\n *  accept a table as input and return an array of column name strings.\n * @property {Object.<string, (value: any) => any>} [format] Object of column\n *  format options. The object keys should be column names. The object values\n *  should be formatting functions to invoke to transform column values prior\n *  to output. If specified, these override automatically inferred options.\n */\n\n/**\n * Format a table as a comma-separated values (CSV) string. Other\n * delimiters, such as tabs or pipes ('|'), can be specified using\n * the options argument.\n * @param {ColumnTable} table The table to format.\n * @param {CSVFormatOptions} options The formatting options.\n * @return {string} A delimited-value format string.\n */\nexport default function(table, options = {}) {\n  const names = columns(table, options.columns);\n  const format = options.format || {};\n  const delim = options.delimiter || ',';\n  const reFormat = new RegExp(`[\"${delim}\\n\\r]`);\n\n  const formatValue = value => value == null ? ''\n    : isDate(value) ? formatUTCDate(value, true)\n    : reFormat.test(value += '') ? '\"' + value.replace(/\"/g, '\"\"') + '\"'\n    : value;\n\n  const vals = names.map(formatValue);\n  let text = '';\n\n  scan(table, names, options.limit || Infinity, options.offset, {\n    row() {\n      text += vals.join(delim) + '\\n';\n    },\n    cell(value, name, index) {\n      vals[index] = formatValue(format[name] ? format[name](value) : value);\n    }\n  });\n\n  return text + vals.join(delim);\n}","import ColumnTable from '../table/column-table'; // eslint-disable-line no-unused-vars\n\nimport formatValue from './value';\nimport { columns, formats, scan } from './util';\n\n/**\n * Options for Markdown formatting.\n * @typedef {object} MarkdownFormatOptions\n * @property {number} [limit=Infinity] The maximum number of rows to print.\n * @property {number} [offset=0] The row offset indicating how many initial rows to skip.\n * @property {import('./util').ColumnSelectOptions} [columns] Ordered list\n *  of column names to include. If function-valued, the function should\n *  accept a table as input and return an array of column name strings.\n * @property {import('./util').ColumnAlignOptions} [align] Object of column\n *  alignment options. The object keys should be column names. The object\n *  values should be aligment strings, one of 'l' (left), 'c' (center), or\n *  'r' (right). If specified, these override automatically inferred options.\n * @property {import('./util').ColumnFormatOptions} [format] Object of column\n *  format options. The object keys should be column names. The object values\n *  should be formatting functions or specification objects. If specified,\n *  these override automatically inferred options.\n * @property {number} [maxdigits=6] The maximum number of fractional digits\n *  to include when formatting numbers. This option is passed to the format\n *  inference method and is overridden by any explicit format options.\n */\n\n/**\n * Format a table as a GitHub-Flavored Markdown table string.\n * @param {ColumnTable} table The table to format.\n * @param {MarkdownFormatOptions} options The formatting options.\n * @return {string} A GitHub-Flavored Markdown table string.\n */\nexport default function(table, options = {}) {\n  const names = columns(table, options.columns);\n  const { align, format } = formats(table, names, options);\n\n  const alignValue = a => a === 'c' ? ':-:' : a === 'r' ? '-:' : ':-';\n  const escape = s => s.replace(/\\|/g, '\\\\|');\n\n  let text = '|'\n    + names.map(escape).join('|')\n    + '|\\n|'\n    + names.map(name => alignValue(align[name])).join('|')\n    + '|';\n\n  scan(table, names, options.limit, options.offset, {\n    row() {\n      text += '\\n|';\n    },\n    cell(value, name) {\n      text += escape(formatValue(value, format[name])) + '|';\n    }\n  });\n\n  return text + '\\n';\n}","/**\n * Abstract class for custom aggregation operations.\n */\nexport default class Reducer {\n  constructor(outputs) {\n    this._outputs = outputs;\n  }\n\n  size() {\n    return this._outputs.length;\n  }\n\n  outputs() {\n    return this._outputs;\n  }\n\n  init(/* columns */) {\n    return {};\n  }\n\n  add(/* state, row, data */) {\n    // no-op, subclasses should override\n  }\n\n  rem(/* state, row, data */) {\n    // no-op, subclasses should override\n  }\n\n  write(/* state, values, index */) {\n  }\n}","export default function walk(node, ctx, visitors, parent) {\n  const visit = visitors[node.type] || visitors['Default'];\n  if (visit && visit(node, ctx, parent) === false) return;\n\n  const walker = walkers[node.type];\n  if (walker) walker(node, ctx, visitors);\n}\n\nconst unary = (node, ctx, visitors) => {\n  walk(node.argument, ctx, visitors, node);\n};\n\nconst binary = (node, ctx, visitors) => {\n  walk(node.left, ctx, visitors, node);\n  walk(node.right, ctx, visitors, node);\n};\n\nconst ternary = (node, ctx, visitors) => {\n  walk(node.test, ctx, visitors, node);\n  walk(node.consequent, ctx, visitors, node);\n  if (node.alternate) walk(node.alternate, ctx, visitors, node);\n};\n\nconst func = (node, ctx, visitors) => {\n  list(node.params, ctx, visitors, node);\n  walk(node.body, ctx, visitors, node);\n};\n\nconst call = (node, ctx, visitors) => {\n  walk(node.callee, ctx, visitors, node);\n  list(node.arguments, ctx, visitors, node);\n};\n\nconst list = (nodes, ctx, visitors, node) => {\n  nodes.forEach(item => walk(item, ctx, visitors, node));\n};\n\nconst walkers = {\n  TemplateLiteral: (node, ctx, visitors) => {\n    list(node.expressions, ctx, visitors, node);\n    list(node.quasis, ctx, visitors, node);\n  },\n  MemberExpression: (node, ctx, visitors) => {\n    walk(node.object, ctx, visitors, node);\n    walk(node.property, ctx, visitors, node);\n  },\n  CallExpression: call,\n  NewExpression: call,\n  ArrayExpression: (node, ctx, visitors) => {\n    list(node.elements, ctx, visitors, node);\n  },\n  AssignmentExpression: binary,\n  AwaitExpression: unary,\n  BinaryExpression: binary,\n  LogicalExpression: binary,\n  UnaryExpression: unary,\n  UpdateExpression: unary,\n  ConditionalExpression: ternary,\n  ObjectExpression: (node, ctx, visitors) => {\n    list(node.properties, ctx, visitors, node);\n  },\n  Property: (node, ctx, visitors) => {\n    walk(node.key, ctx, visitors, node);\n    walk(node.value, ctx, visitors, node);\n  },\n\n  ArrowFunctionExpression: func,\n  FunctionExpression: func,\n  FunctionDeclaration: func,\n\n  VariableDeclaration: (node, ctx, visitors) => {\n    list(node.declarations, ctx, visitors, node);\n  },\n  VariableDeclarator: (node, ctx, visitors) => {\n    walk(node.id, ctx, visitors, node);\n    walk(node.init, ctx, visitors, node);\n  },\n  SpreadElement: (node, ctx, visitors) => {\n    walk(node.argument, ctx, visitors, node);\n  },\n\n  BlockStatement: (node, ctx, visitors) => {\n    list(node.body, ctx, visitors, node);\n  },\n  ExpressionStatement: (node, ctx, visitors) => {\n    walk(node.expression, ctx, visitors, node);\n  },\n  IfStatement: ternary,\n  ForStatement: (node, ctx, visitors) => {\n    walk(node.init, ctx, visitors, node);\n    walk(node.test, ctx, visitors, node);\n    walk(node.update, ctx, visitors, node);\n    walk(node.body, ctx, visitors, node);\n  },\n  WhileStatement: (node, ctx, visitors) => {\n    walk(node.test, ctx, visitors, node);\n    walk(node.body, ctx, visitors, node);\n  },\n  DoWhileStatement: (node, ctx, visitors) => {\n    walk(node.body, ctx, visitors, node);\n    walk(node.test, ctx, visitors, node);\n  },\n  SwitchStatement: (node, ctx, visitors) => {\n    walk(node.discriminant, ctx, visitors, node);\n    list(node.cases, ctx, visitors, node);\n  },\n  SwitchCase: (node, ctx, visitors) => {\n    if (node.test) walk(node.test, ctx, visitors, node);\n    list(node.consequent, ctx, visitors, node);\n  },\n  ReturnStatement: unary,\n\n  Program: (node, ctx, visitors) => {\n    walk(node.body[0], ctx, visitors, node);\n  }\n};","import walk from './walk';\n\nfunction strip(node) {\n  delete node.start;\n  delete node.end;\n  delete node.optional;\n}\n\nfunction stripMember(node) {\n  strip(node);\n  delete node.object;\n  delete node.property;\n  delete node.computed;\n  if (!node.table) delete node.table;\n}\n\nexport default function(ast) {\n  walk(ast, null, {\n    Column: stripMember,\n    Constant: stripMember,\n    Default: strip\n  });\n  return ast;\n}","import { ArrowFunctionExpression, FunctionExpression } from './constants';\n\nexport function is(type, node) {\n  return node && node.type === type;\n}\n\nexport function isFunctionExpression(node) {\n  return is(FunctionExpression, node)\n    || is(ArrowFunctionExpression, node);\n}","import compile from './compile';\nimport { rowObjectCode } from './row-object';\nimport error from '../util/error';\nimport toFunction from '../util/to-function';\n\nconst ERROR_ESC_AGGRONLY = 'Escaped functions are not valid as rollup or pivot values.';\n\nexport default function(ctx, spec, params) {\n  if (ctx.aggronly) error(ERROR_ESC_AGGRONLY);\n\n  // generate escaped function invocation code\n  const code = '(row,data)=>fn('\n    + rowObjectCode(ctx.table.columnNames())\n    + ',$)';\n\n  return { escape: compile.escape(code, toFunction(spec.expr), params) };\n}","import isFunction from './is-function';\n\nexport default function(value) {\n  return isFunction(value) ? value : () => value;\n}","// Reserved word lists for various dialects of the language\n\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n};\n\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\nvar keywords$1 = {\n  5: ecma5AndLessKeywords,\n  \"5module\": ecma5AndLessKeywords + \" export import\",\n  6: ecma5AndLessKeywords + \" const class extends export import super\"\n};\n\nvar keywordRelationalOperator = /^in(stanceof)?$/;\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\nvar nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nvar nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by bin/generate-identifier-regex.js\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938];\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) { return false }\n    pos += set[i + 1];\n    if (pos >= code) { return true }\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) { return code === 36 }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes)\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) { return code === 36 }\n  if (code < 58) { return true }\n  if (code < 65) { return false }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n}\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nvar TokenType = function TokenType(label, conf) {\n  if ( conf === void 0 ) conf = {};\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nfunction binop(name, prec) {\n  return new TokenType(name, {beforeExpr: true, binop: prec})\n}\nvar beforeExpr = {beforeExpr: true}, startsExpr = {startsExpr: true};\n\n// Map keyword names to token types.\n\nvar keywords = {};\n\n// Succinct definitions of keyword token types\nfunction kw(name, options) {\n  if ( options === void 0 ) options = {};\n\n  options.keyword = name;\n  return keywords[name] = new TokenType(name, options)\n}\n\nvar types$1 = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  privateId: new TokenType(\"privateId\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  invalidTemplate: new TokenType(\"invalidTemplate\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n  assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n  incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n  prefix: new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=/===/!==\", 6),\n  relational: binop(\"</>/<=/>=\", 7),\n  bitShift: binop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10),\n  starstar: new TokenType(\"**\", {beforeExpr: true}),\n  coalesce: binop(\"??\", 1),\n\n  // Keyword token types.\n  _break: kw(\"break\"),\n  _case: kw(\"case\", beforeExpr),\n  _catch: kw(\"catch\"),\n  _continue: kw(\"continue\"),\n  _debugger: kw(\"debugger\"),\n  _default: kw(\"default\", beforeExpr),\n  _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n  _else: kw(\"else\", beforeExpr),\n  _finally: kw(\"finally\"),\n  _for: kw(\"for\", {isLoop: true}),\n  _function: kw(\"function\", startsExpr),\n  _if: kw(\"if\"),\n  _return: kw(\"return\", beforeExpr),\n  _switch: kw(\"switch\"),\n  _throw: kw(\"throw\", beforeExpr),\n  _try: kw(\"try\"),\n  _var: kw(\"var\"),\n  _const: kw(\"const\"),\n  _while: kw(\"while\", {isLoop: true}),\n  _with: kw(\"with\"),\n  _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n  _this: kw(\"this\", startsExpr),\n  _super: kw(\"super\", startsExpr),\n  _class: kw(\"class\", startsExpr),\n  _extends: kw(\"extends\", beforeExpr),\n  _export: kw(\"export\"),\n  _import: kw(\"import\", startsExpr),\n  _null: kw(\"null\", startsExpr),\n  _true: kw(\"true\", startsExpr),\n  _false: kw(\"false\", startsExpr),\n  _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n  _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n  _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n};\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029\n}\n\nfunction nextLineBreak(code, from, end) {\n  if ( end === void 0 ) end = code.length;\n\n  for (var i = from; i < end; i++) {\n    var next = code.charCodeAt(i);\n    if (isNewLine(next))\n      { return i < end - 1 && next === 13 && code.charCodeAt(i + 1) === 10 ? i + 2 : i + 1 }\n  }\n  return -1\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nvar ref = Object.prototype;\nvar hasOwnProperty = ref.hasOwnProperty;\nvar toString = ref.toString;\n\nvar hasOwn = Object.hasOwn || (function (obj, propName) { return (\n  hasOwnProperty.call(obj, propName)\n); });\n\nvar isArray = Array.isArray || (function (obj) { return (\n  toString.call(obj) === \"[object Array]\"\n); });\n\nfunction wordsRegexp(words) {\n  return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\")\n}\n\nvar loneSurrogate = /(?:[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/;\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = function Position(line, col) {\n  this.line = line;\n  this.column = col;\n};\n\nPosition.prototype.offset = function offset (n) {\n  return new Position(this.line, this.column + n)\n};\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) { this.source = p.sourceFile; }\n};\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    var nextBreak = nextLineBreak(input, cur, offset);\n    if (nextBreak < 0) { return new Position(line, offset - cur) }\n    ++line;\n    cur = nextBreak;\n  }\n}\n\n// A second argument must be given to configure the parser process.\n// These options are recognized (only `ecmaVersion` is required):\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must be\n  // either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10\n  // (2019), 11 (2020), 12 (2021), 13 (2022), or `\"latest\"` (the\n  // latest version the library supports). This influences support\n  // for strict mode, the set of reserved words, and support for\n  // new syntax features.\n  ecmaVersion: null,\n  // `sourceType` indicates the mode the code should be parsed in.\n  // Can be either `\"script\"` or `\"module\"`. This influences global\n  // strict mode and parsing of `import` and `export` declarations.\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // the position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program, and an import.meta expression\n  // in a script isn't considered an error.\n  allowImportExportEverywhere: false,\n  // By default, await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.\n  // When enabled, await identifiers are allowed to appear at the top-level scope,\n  // but they are still not allowed in non-async functions.\n  allowAwaitOutsideFunction: null,\n  // When enabled, super identifiers are not constrained to\n  // appearing in methods and do not raise an error when they appear elsewhere.\n  allowSuperOutsideMethod: null,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false\n};\n\n// Interpret and default an options object\n\nvar warnedAboutEcmaVersion = false;\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var opt in defaultOptions)\n    { options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt]; }\n\n  if (options.ecmaVersion === \"latest\") {\n    options.ecmaVersion = 1e8;\n  } else if (options.ecmaVersion == null) {\n    if (!warnedAboutEcmaVersion && typeof console === \"object\" && console.warn) {\n      warnedAboutEcmaVersion = true;\n      console.warn(\"Since Acorn 8.0.0, options.ecmaVersion is required.\\nDefaulting to 2020, but this will stop working in the future.\");\n    }\n    options.ecmaVersion = 11;\n  } else if (options.ecmaVersion >= 2015) {\n    options.ecmaVersion -= 2009;\n  }\n\n  if (options.allowReserved == null)\n    { options.allowReserved = options.ecmaVersion < 5; }\n\n  if (isArray(options.onToken)) {\n    var tokens = options.onToken;\n    options.onToken = function (token) { return tokens.push(token); };\n  }\n  if (isArray(options.onComment))\n    { options.onComment = pushComment(options, options.onComment); }\n\n  return options\n}\n\nfunction pushComment(options, array) {\n  return function(block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? \"Block\" : \"Line\",\n      value: text,\n      start: start,\n      end: end\n    };\n    if (options.locations)\n      { comment.loc = new SourceLocation(this, startLoc, endLoc); }\n    if (options.ranges)\n      { comment.range = [start, end]; }\n    array.push(comment);\n  }\n}\n\n// Each scope gets a bitset that may contain these flags\nvar\n    SCOPE_TOP = 1,\n    SCOPE_FUNCTION = 2,\n    SCOPE_ASYNC = 4,\n    SCOPE_GENERATOR = 8,\n    SCOPE_ARROW = 16,\n    SCOPE_SIMPLE_CATCH = 32,\n    SCOPE_SUPER = 64,\n    SCOPE_DIRECT_SUPER = 128,\n    SCOPE_CLASS_STATIC_BLOCK = 256,\n    SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK;\n\nfunction functionFlags(async, generator) {\n  return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0)\n}\n\n// Used in checkLVal* and declareName to determine the type of a binding\nvar\n    BIND_NONE = 0, // Not a binding\n    BIND_VAR = 1, // Var-style binding\n    BIND_LEXICAL = 2, // Let- or const-style binding\n    BIND_FUNCTION = 3, // Function declaration\n    BIND_SIMPLE_CATCH = 4, // Simple (identifier pattern) catch binding\n    BIND_OUTSIDE = 5; // Special case for function names as bound inside the function\n\nvar Parser = function Parser(options, input, startPos) {\n  this.options = options = getOptions(options);\n  this.sourceFile = options.sourceFile;\n  this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : options.sourceType === \"module\" ? \"5module\" : 5]);\n  var reserved = \"\";\n  if (options.allowReserved !== true) {\n    reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];\n    if (options.sourceType === \"module\") { reserved += \" await\"; }\n  }\n  this.reservedWords = wordsRegexp(reserved);\n  var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n  this.reservedWordsStrict = wordsRegexp(reservedStrict);\n  this.reservedWordsStrictBind = wordsRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n  this.input = String(input);\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  this.containsEsc = false;\n\n  // Set up token state\n\n  // The current position of the tokenizer in the input.\n  if (startPos) {\n    this.pos = startPos;\n    this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n  } else {\n    this.pos = this.lineStart = 0;\n    this.curLine = 1;\n  }\n\n  // Properties of the current token:\n  // Its type\n  this.type = types$1.eof;\n  // For tokens that include more information than their type, the value\n  this.value = null;\n  // Its start and end offset\n  this.start = this.end = this.pos;\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  this.startLoc = this.endLoc = this.curPosition();\n\n  // Position information for the previous token\n  this.lastTokEndLoc = this.lastTokStartLoc = null;\n  this.lastTokStart = this.lastTokEnd = this.pos;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  this.context = this.initialContext();\n  this.exprAllowed = true;\n\n  // Figure out if it's a module code.\n  this.inModule = options.sourceType === \"module\";\n  this.strict = this.inModule || this.strictDirective(this.pos);\n\n  // Used to signify the start of a potential arrow function\n  this.potentialArrowAt = -1;\n  this.potentialArrowInForAwait = false;\n\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;\n  // Labels in scope.\n  this.labels = [];\n  // Thus-far undefined exports.\n  this.undefinedExports = Object.create(null);\n\n  // If enabled, skip leading hashbang line.\n  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\")\n    { this.skipLineComment(2); }\n\n  // Scope tracking for duplicate variable names (see scope.js)\n  this.scopeStack = [];\n  this.enterScope(SCOPE_TOP);\n\n  // For RegExp validation\n  this.regexpState = null;\n\n  // The stack of private names.\n  // Each element has two properties: 'declared' and 'used'.\n  // When it exited from the outermost class definition, all used private names must be declared.\n  this.privateNameStack = [];\n};\n\nvar prototypeAccessors = { inFunction: { configurable: true },inGenerator: { configurable: true },inAsync: { configurable: true },canAwait: { configurable: true },allowSuper: { configurable: true },allowDirectSuper: { configurable: true },treatFunctionsAsVar: { configurable: true },allowNewDotTarget: { configurable: true },inClassStaticBlock: { configurable: true } };\n\nParser.prototype.parse = function parse () {\n  var node = this.options.program || this.startNode();\n  this.nextToken();\n  return this.parseTopLevel(node)\n};\n\nprototypeAccessors.inFunction.get = function () { return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0 };\n\nprototypeAccessors.inGenerator.get = function () { return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit };\n\nprototypeAccessors.inAsync.get = function () { return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit };\n\nprototypeAccessors.canAwait.get = function () {\n  for (var i = this.scopeStack.length - 1; i >= 0; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.inClassFieldInit || scope.flags & SCOPE_CLASS_STATIC_BLOCK) { return false }\n    if (scope.flags & SCOPE_FUNCTION) { return (scope.flags & SCOPE_ASYNC) > 0 }\n  }\n  return (this.inModule && this.options.ecmaVersion >= 13) || this.options.allowAwaitOutsideFunction\n};\n\nprototypeAccessors.allowSuper.get = function () {\n  var ref = this.currentThisScope();\n    var flags = ref.flags;\n    var inClassFieldInit = ref.inClassFieldInit;\n  return (flags & SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod\n};\n\nprototypeAccessors.allowDirectSuper.get = function () { return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0 };\n\nprototypeAccessors.treatFunctionsAsVar.get = function () { return this.treatFunctionsAsVarInScope(this.currentScope()) };\n\nprototypeAccessors.allowNewDotTarget.get = function () {\n  var ref = this.currentThisScope();\n    var flags = ref.flags;\n    var inClassFieldInit = ref.inClassFieldInit;\n  return (flags & (SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK)) > 0 || inClassFieldInit\n};\n\nprototypeAccessors.inClassStaticBlock.get = function () {\n  return (this.currentVarScope().flags & SCOPE_CLASS_STATIC_BLOCK) > 0\n};\n\nParser.extend = function extend () {\n    var plugins = [], len = arguments.length;\n    while ( len-- ) plugins[ len ] = arguments[ len ];\n\n  var cls = this;\n  for (var i = 0; i < plugins.length; i++) { cls = plugins[i](cls); }\n  return cls\n};\n\nParser.parse = function parse (input, options) {\n  return new this(options, input).parse()\n};\n\nParser.parseExpressionAt = function parseExpressionAt (input, pos, options) {\n  var parser = new this(options, input, pos);\n  parser.nextToken();\n  return parser.parseExpression()\n};\n\nParser.tokenizer = function tokenizer (input, options) {\n  return new this(options, input)\n};\n\nObject.defineProperties( Parser.prototype, prototypeAccessors );\n\nvar pp$9 = Parser.prototype;\n\n// ## Parser utilities\n\nvar literal = /^(?:'((?:\\\\.|[^'\\\\])*?)'|\"((?:\\\\.|[^\"\\\\])*?)\")/;\npp$9.strictDirective = function(start) {\n  for (;;) {\n    // Try to find string literal.\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this.input)[0].length;\n    var match = literal.exec(this.input.slice(start));\n    if (!match) { return false }\n    if ((match[1] || match[2]) === \"use strict\") {\n      skipWhiteSpace.lastIndex = start + match[0].length;\n      var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;\n      var next = this.input.charAt(end);\n      return next === \";\" || next === \"}\" ||\n        (lineBreak.test(spaceAfter[0]) &&\n         !(/[(`.[+\\-/*%<>=,?^&]/.test(next) || next === \"!\" && this.input.charAt(end + 1) === \"=\"))\n    }\n    start += match[0].length;\n\n    // Skip semicolon, if any.\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this.input)[0].length;\n    if (this.input[start] === \";\")\n      { start++; }\n  }\n};\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp$9.eat = function(type) {\n  if (this.type === type) {\n    this.next();\n    return true\n  } else {\n    return false\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp$9.isContextual = function(name) {\n  return this.type === types$1.name && this.value === name && !this.containsEsc\n};\n\n// Consumes contextual keyword if possible.\n\npp$9.eatContextual = function(name) {\n  if (!this.isContextual(name)) { return false }\n  this.next();\n  return true\n};\n\n// Asserts that following token is given contextual keyword.\n\npp$9.expectContextual = function(name) {\n  if (!this.eatContextual(name)) { this.unexpected(); }\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp$9.canInsertSemicolon = function() {\n  return this.type === types$1.eof ||\n    this.type === types$1.braceR ||\n    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\npp$9.insertSemicolon = function() {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon)\n      { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }\n    return true\n  }\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp$9.semicolon = function() {\n  if (!this.eat(types$1.semi) && !this.insertSemicolon()) { this.unexpected(); }\n};\n\npp$9.afterTrailingComma = function(tokType, notNext) {\n  if (this.type === tokType) {\n    if (this.options.onTrailingComma)\n      { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }\n    if (!notNext)\n      { this.next(); }\n    return true\n  }\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp$9.expect = function(type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp$9.unexpected = function(pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\nfunction DestructuringErrors() {\n  this.shorthandAssign =\n  this.trailingComma =\n  this.parenthesizedAssign =\n  this.parenthesizedBind =\n  this.doubleProto =\n    -1;\n}\n\npp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n  if (!refDestructuringErrors) { return }\n  if (refDestructuringErrors.trailingComma > -1)\n    { this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\"); }\n  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n  if (parens > -1) { this.raiseRecoverable(parens, \"Parenthesized pattern\"); }\n};\n\npp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n  if (!refDestructuringErrors) { return false }\n  var shorthandAssign = refDestructuringErrors.shorthandAssign;\n  var doubleProto = refDestructuringErrors.doubleProto;\n  if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }\n  if (shorthandAssign >= 0)\n    { this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\"); }\n  if (doubleProto >= 0)\n    { this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\"); }\n};\n\npp$9.checkYieldAwaitInDefaultParams = function() {\n  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n    { this.raise(this.yieldPos, \"Yield expression cannot be a default value\"); }\n  if (this.awaitPos)\n    { this.raise(this.awaitPos, \"Await expression cannot be a default value\"); }\n};\n\npp$9.isSimpleAssignTarget = function(expr) {\n  if (expr.type === \"ParenthesizedExpression\")\n    { return this.isSimpleAssignTarget(expr.expression) }\n  return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\n};\n\nvar pp$8 = Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp$8.parseTopLevel = function(node) {\n  var exports = Object.create(null);\n  if (!node.body) { node.body = []; }\n  while (this.type !== types$1.eof) {\n    var stmt = this.parseStatement(null, true, exports);\n    node.body.push(stmt);\n  }\n  if (this.inModule)\n    { for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1)\n      {\n        var name = list[i];\n\n        this.raiseRecoverable(this.undefinedExports[name].start, (\"Export '\" + name + \"' is not defined\"));\n      } }\n  this.adaptDirectivePrologue(node.body);\n  this.next();\n  node.sourceType = this.options.sourceType;\n  return this.finishNode(node, \"Program\")\n};\n\nvar loopLabel = {kind: \"loop\"}, switchLabel = {kind: \"switch\"};\n\npp$8.isLet = function(context) {\n  if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) { return false }\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n  // For ambiguous cases, determine if a LexicalDeclaration (or only a\n  // Statement) is allowed here. If context is not empty then only a Statement\n  // is allowed. However, `let [` is an explicit negative lookahead for\n  // ExpressionStatement, so special-case it first.\n  if (nextCh === 91 || nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true } // '[', '/', astral\n  if (context) { return false }\n\n  if (nextCh === 123) { return true } // '{'\n  if (isIdentifierStart(nextCh, true)) {\n    var pos = next + 1;\n    while (isIdentifierChar(nextCh = this.input.charCodeAt(pos), true)) { ++pos; }\n    if (nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) { return true }\n    var ident = this.input.slice(next, pos);\n    if (!keywordRelationalOperator.test(ident)) { return true }\n  }\n  return false\n};\n\n// check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\npp$8.isAsyncFunction = function() {\n  if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\"))\n    { return false }\n\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length, after;\n  return !lineBreak.test(this.input.slice(this.pos, next)) &&\n    this.input.slice(next, next + 8) === \"function\" &&\n    (next + 8 === this.input.length ||\n     !(isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 0xd7ff && after < 0xdc00))\n};\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp$8.parseStatement = function(context, topLevel, exports) {\n  var starttype = this.type, node = this.startNode(), kind;\n\n  if (this.isLet(context)) {\n    starttype = types$1._var;\n    kind = \"let\";\n  }\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n  case types$1._break: case types$1._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n  case types$1._debugger: return this.parseDebuggerStatement(node)\n  case types$1._do: return this.parseDoStatement(node)\n  case types$1._for: return this.parseForStatement(node)\n  case types$1._function:\n    // Function as sole body of either an if statement or a labeled statement\n    // works, but not when it is part of a labeled statement that is the sole\n    // body of an if statement.\n    if ((context && (this.strict || context !== \"if\" && context !== \"label\")) && this.options.ecmaVersion >= 6) { this.unexpected(); }\n    return this.parseFunctionStatement(node, false, !context)\n  case types$1._class:\n    if (context) { this.unexpected(); }\n    return this.parseClass(node, true)\n  case types$1._if: return this.parseIfStatement(node)\n  case types$1._return: return this.parseReturnStatement(node)\n  case types$1._switch: return this.parseSwitchStatement(node)\n  case types$1._throw: return this.parseThrowStatement(node)\n  case types$1._try: return this.parseTryStatement(node)\n  case types$1._const: case types$1._var:\n    kind = kind || this.value;\n    if (context && kind !== \"var\") { this.unexpected(); }\n    return this.parseVarStatement(node, kind)\n  case types$1._while: return this.parseWhileStatement(node)\n  case types$1._with: return this.parseWithStatement(node)\n  case types$1.braceL: return this.parseBlock(true, node)\n  case types$1.semi: return this.parseEmptyStatement(node)\n  case types$1._export:\n  case types$1._import:\n    if (this.options.ecmaVersion > 10 && starttype === types$1._import) {\n      skipWhiteSpace.lastIndex = this.pos;\n      var skip = skipWhiteSpace.exec(this.input);\n      var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n      if (nextCh === 40 || nextCh === 46) // '(' or '.'\n        { return this.parseExpressionStatement(node, this.parseExpression()) }\n    }\n\n    if (!this.options.allowImportExportEverywhere) {\n      if (!topLevel)\n        { this.raise(this.start, \"'import' and 'export' may only appear at the top level\"); }\n      if (!this.inModule)\n        { this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\"); }\n    }\n    return starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n  default:\n    if (this.isAsyncFunction()) {\n      if (context) { this.unexpected(); }\n      this.next();\n      return this.parseFunctionStatement(node, true, !context)\n    }\n\n    var maybeName = this.value, expr = this.parseExpression();\n    if (starttype === types$1.name && expr.type === \"Identifier\" && this.eat(types$1.colon))\n      { return this.parseLabeledStatement(node, maybeName, expr, context) }\n    else { return this.parseExpressionStatement(node, expr) }\n  }\n};\n\npp$8.parseBreakContinueStatement = function(node, keyword) {\n  var isBreak = keyword === \"break\";\n  this.next();\n  if (this.eat(types$1.semi) || this.insertSemicolon()) { node.label = null; }\n  else if (this.type !== types$1.name) { this.unexpected(); }\n  else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  var i = 0;\n  for (; i < this.labels.length; ++i) {\n    var lab = this.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) { break }\n      if (node.label && isBreak) { break }\n    }\n  }\n  if (i === this.labels.length) { this.raise(node.start, \"Unsyntactic \" + keyword); }\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n};\n\npp$8.parseDebuggerStatement = function(node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\")\n};\n\npp$8.parseDoStatement = function(node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(\"do\");\n  this.labels.pop();\n  this.expect(types$1._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6)\n    { this.eat(types$1.semi); }\n  else\n    { this.semicolon(); }\n  return this.finishNode(node, \"DoWhileStatement\")\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp$8.parseForStatement = function(node) {\n  this.next();\n  var awaitAt = (this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual(\"await\")) ? this.lastTokStart : -1;\n  this.labels.push(loopLabel);\n  this.enterScope(0);\n  this.expect(types$1.parenL);\n  if (this.type === types$1.semi) {\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, null)\n  }\n  var isLet = this.isLet();\n  if (this.type === types$1._var || this.type === types$1._const || isLet) {\n    var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n    this.next();\n    this.parseVar(init$1, true, kind);\n    this.finishNode(init$1, \"VariableDeclaration\");\n    if ((this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1) {\n      if (this.options.ecmaVersion >= 9) {\n        if (this.type === types$1._in) {\n          if (awaitAt > -1) { this.unexpected(awaitAt); }\n        } else { node.await = awaitAt > -1; }\n      }\n      return this.parseForIn(node, init$1)\n    }\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, init$1)\n  }\n  var startsWithLet = this.isContextual(\"let\"), isForOf = false;\n  var refDestructuringErrors = new DestructuringErrors;\n  var init = this.parseExpression(awaitAt > -1 ? \"await\" : true, refDestructuringErrors);\n  if (this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n    if (this.options.ecmaVersion >= 9) {\n      if (this.type === types$1._in) {\n        if (awaitAt > -1) { this.unexpected(awaitAt); }\n      } else { node.await = awaitAt > -1; }\n    }\n    if (startsWithLet && isForOf) { this.raise(init.start, \"The left-hand side of a for-of loop may not start with 'let'.\"); }\n    this.toAssignable(init, false, refDestructuringErrors);\n    this.checkLValPattern(init);\n    return this.parseForIn(node, init)\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  if (awaitAt > -1) { this.unexpected(awaitAt); }\n  return this.parseFor(node, init)\n};\n\npp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {\n  this.next();\n  return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync)\n};\n\npp$8.parseIfStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  // allow function declarations in branches, but only in non-strict mode\n  node.consequent = this.parseStatement(\"if\");\n  node.alternate = this.eat(types$1._else) ? this.parseStatement(\"if\") : null;\n  return this.finishNode(node, \"IfStatement\")\n};\n\npp$8.parseReturnStatement = function(node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n    { this.raise(this.start, \"'return' outside of function\"); }\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(types$1.semi) || this.insertSemicolon()) { node.argument = null; }\n  else { node.argument = this.parseExpression(); this.semicolon(); }\n  return this.finishNode(node, \"ReturnStatement\")\n};\n\npp$8.parseSwitchStatement = function(node) {\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(types$1.braceL);\n  this.labels.push(switchLabel);\n  this.enterScope(0);\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  var cur;\n  for (var sawDefault = false; this.type !== types$1.braceR;) {\n    if (this.type === types$1._case || this.type === types$1._default) {\n      var isCase = this.type === types$1._case;\n      if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n      node.cases.push(cur = this.startNode());\n      cur.consequent = [];\n      this.next();\n      if (isCase) {\n        cur.test = this.parseExpression();\n      } else {\n        if (sawDefault) { this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\"); }\n        sawDefault = true;\n        cur.test = null;\n      }\n      this.expect(types$1.colon);\n    } else {\n      if (!cur) { this.unexpected(); }\n      cur.consequent.push(this.parseStatement(null));\n    }\n  }\n  this.exitScope();\n  if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\")\n};\n\npp$8.parseThrowStatement = function(node) {\n  this.next();\n  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n    { this.raise(this.lastTokEnd, \"Illegal newline after throw\"); }\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\")\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty$1 = [];\n\npp$8.parseTryStatement = function(node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === types$1._catch) {\n    var clause = this.startNode();\n    this.next();\n    if (this.eat(types$1.parenL)) {\n      clause.param = this.parseBindingAtom();\n      var simple = clause.param.type === \"Identifier\";\n      this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);\n      this.checkLValPattern(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);\n      this.expect(types$1.parenR);\n    } else {\n      if (this.options.ecmaVersion < 10) { this.unexpected(); }\n      clause.param = null;\n      this.enterScope(0);\n    }\n    clause.body = this.parseBlock(false);\n    this.exitScope();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n  node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer)\n    { this.raise(node.start, \"Missing catch or finally clause\"); }\n  return this.finishNode(node, \"TryStatement\")\n};\n\npp$8.parseVarStatement = function(node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\")\n};\n\npp$8.parseWhileStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(\"while\");\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\")\n};\n\npp$8.parseWithStatement = function(node) {\n  if (this.strict) { this.raise(this.start, \"'with' in strict mode\"); }\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(\"with\");\n  return this.finishNode(node, \"WithStatement\")\n};\n\npp$8.parseEmptyStatement = function(node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\")\n};\n\npp$8.parseLabeledStatement = function(node, maybeName, expr, context) {\n  for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1)\n    {\n    var label = list[i$1];\n\n    if (label.name === maybeName)\n      { this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n  } }\n  var kind = this.type.isLoop ? \"loop\" : this.type === types$1._switch ? \"switch\" : null;\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label$1 = this.labels[i];\n    if (label$1.statementStart === node.start) {\n      // Update information about previous labels on this node\n      label$1.statementStart = this.start;\n      label$1.kind = kind;\n    } else { break }\n  }\n  this.labels.push({name: maybeName, kind: kind, statementStart: this.start});\n  node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\")\n};\n\npp$8.parseExpressionStatement = function(node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\")\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {\n  if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;\n  if ( node === void 0 ) node = this.startNode();\n\n  node.body = [];\n  this.expect(types$1.braceL);\n  if (createNewLexicalScope) { this.enterScope(0); }\n  while (this.type !== types$1.braceR) {\n    var stmt = this.parseStatement(null);\n    node.body.push(stmt);\n  }\n  if (exitStrict) { this.strict = false; }\n  this.next();\n  if (createNewLexicalScope) { this.exitScope(); }\n  return this.finishNode(node, \"BlockStatement\")\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp$8.parseFor = function(node, init) {\n  node.init = init;\n  this.expect(types$1.semi);\n  node.test = this.type === types$1.semi ? null : this.parseExpression();\n  this.expect(types$1.semi);\n  node.update = this.type === types$1.parenR ? null : this.parseExpression();\n  this.expect(types$1.parenR);\n  node.body = this.parseStatement(\"for\");\n  this.exitScope();\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\")\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp$8.parseForIn = function(node, init) {\n  var isForIn = this.type === types$1._in;\n  this.next();\n\n  if (\n    init.type === \"VariableDeclaration\" &&\n    init.declarations[0].init != null &&\n    (\n      !isForIn ||\n      this.options.ecmaVersion < 8 ||\n      this.strict ||\n      init.kind !== \"var\" ||\n      init.declarations[0].id.type !== \"Identifier\"\n    )\n  ) {\n    this.raise(\n      init.start,\n      ((isForIn ? \"for-in\" : \"for-of\") + \" loop variable declaration may not have an initializer\")\n    );\n  }\n  node.left = init;\n  node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n  this.expect(types$1.parenR);\n  node.body = this.parseStatement(\"for\");\n  this.exitScope();\n  this.labels.pop();\n  return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\")\n};\n\n// Parse a list of variable declarations.\n\npp$8.parseVar = function(node, isFor, kind) {\n  node.declarations = [];\n  node.kind = kind;\n  for (;;) {\n    var decl = this.startNode();\n    this.parseVarId(decl, kind);\n    if (this.eat(types$1.eq)) {\n      decl.init = this.parseMaybeAssign(isFor);\n    } else if (kind === \"const\" && !(this.type === types$1._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\")))) {\n      this.unexpected();\n    } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.type === types$1._in || this.isContextual(\"of\")))) {\n      this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n    if (!this.eat(types$1.comma)) { break }\n  }\n  return node\n};\n\npp$8.parseVarId = function(decl, kind) {\n  decl.id = this.parseBindingAtom();\n  this.checkLValPattern(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, false);\n};\n\nvar FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;\n\n// Parse a function declaration or literal (depending on the\n// `statement & FUNC_STATEMENT`).\n\n// Remove `allowExpressionBody` for 7.0.0, as it is only called with false\npp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\n    if (this.type === types$1.star && (statement & FUNC_HANGING_STATEMENT))\n      { this.unexpected(); }\n    node.generator = this.eat(types$1.star);\n  }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  if (statement & FUNC_STATEMENT) {\n    node.id = (statement & FUNC_NULLABLE_ID) && this.type !== types$1.name ? null : this.parseIdent();\n    if (node.id && !(statement & FUNC_HANGING_STATEMENT))\n      // If it is a regular function declaration in sloppy mode, then it is\n      // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n      // mode depends on properties of the current scope (see\n      // treatFunctionsAsVar).\n      { this.checkLValSimple(node.id, (this.strict || node.generator || node.async) ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION); }\n  }\n\n  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  this.enterScope(functionFlags(node.async, node.generator));\n\n  if (!(statement & FUNC_STATEMENT))\n    { node.id = this.type === types$1.name ? this.parseIdent() : null; }\n\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody, false, forInit);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, (statement & FUNC_STATEMENT) ? \"FunctionDeclaration\" : \"FunctionExpression\")\n};\n\npp$8.parseFunctionParams = function(node) {\n  this.expect(types$1.parenL);\n  node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$8.parseClass = function(node, isStatement) {\n  this.next();\n\n  // ecma-262 14.6 Class Definitions\n  // A class definition is always strict mode code.\n  var oldStrict = this.strict;\n  this.strict = true;\n\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var privateNameMap = this.enterClassBody();\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(types$1.braceL);\n  while (this.type !== types$1.braceR) {\n    var element = this.parseClassElement(node.superClass !== null);\n    if (element) {\n      classBody.body.push(element);\n      if (element.type === \"MethodDefinition\" && element.kind === \"constructor\") {\n        if (hadConstructor) { this.raise(element.start, \"Duplicate constructor in the same class\"); }\n        hadConstructor = true;\n      } else if (element.key && element.key.type === \"PrivateIdentifier\" && isPrivateNameConflicted(privateNameMap, element)) {\n        this.raiseRecoverable(element.key.start, (\"Identifier '#\" + (element.key.name) + \"' has already been declared\"));\n      }\n    }\n  }\n  this.strict = oldStrict;\n  this.next();\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  this.exitClassBody();\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n};\n\npp$8.parseClassElement = function(constructorAllowsSuper) {\n  if (this.eat(types$1.semi)) { return null }\n\n  var ecmaVersion = this.options.ecmaVersion;\n  var node = this.startNode();\n  var keyName = \"\";\n  var isGenerator = false;\n  var isAsync = false;\n  var kind = \"method\";\n  var isStatic = false;\n\n  if (this.eatContextual(\"static\")) {\n    // Parse static init block\n    if (ecmaVersion >= 13 && this.eat(types$1.braceL)) {\n      this.parseClassStaticBlock(node);\n      return node\n    }\n    if (this.isClassElementNameStart() || this.type === types$1.star) {\n      isStatic = true;\n    } else {\n      keyName = \"static\";\n    }\n  }\n  node.static = isStatic;\n  if (!keyName && ecmaVersion >= 8 && this.eatContextual(\"async\")) {\n    if ((this.isClassElementNameStart() || this.type === types$1.star) && !this.canInsertSemicolon()) {\n      isAsync = true;\n    } else {\n      keyName = \"async\";\n    }\n  }\n  if (!keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star)) {\n    isGenerator = true;\n  }\n  if (!keyName && !isAsync && !isGenerator) {\n    var lastValue = this.value;\n    if (this.eatContextual(\"get\") || this.eatContextual(\"set\")) {\n      if (this.isClassElementNameStart()) {\n        kind = lastValue;\n      } else {\n        keyName = lastValue;\n      }\n    }\n  }\n\n  // Parse element name\n  if (keyName) {\n    // 'async', 'get', 'set', or 'static' were not a keyword contextually.\n    // The last token is any of those. Make it the element name.\n    node.computed = false;\n    node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);\n    node.key.name = keyName;\n    this.finishNode(node.key, \"Identifier\");\n  } else {\n    this.parseClassElementName(node);\n  }\n\n  // Parse element value\n  if (ecmaVersion < 13 || this.type === types$1.parenL || kind !== \"method\" || isGenerator || isAsync) {\n    var isConstructor = !node.static && checkKeyName(node, \"constructor\");\n    var allowsDirectSuper = isConstructor && constructorAllowsSuper;\n    // Couldn't move this check into the 'parseClassMethod' method for backward compatibility.\n    if (isConstructor && kind !== \"method\") { this.raise(node.key.start, \"Constructor can't have get/set modifier\"); }\n    node.kind = isConstructor ? \"constructor\" : kind;\n    this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);\n  } else {\n    this.parseClassField(node);\n  }\n\n  return node\n};\n\npp$8.isClassElementNameStart = function() {\n  return (\n    this.type === types$1.name ||\n    this.type === types$1.privateId ||\n    this.type === types$1.num ||\n    this.type === types$1.string ||\n    this.type === types$1.bracketL ||\n    this.type.keyword\n  )\n};\n\npp$8.parseClassElementName = function(element) {\n  if (this.type === types$1.privateId) {\n    if (this.value === \"constructor\") {\n      this.raise(this.start, \"Classes can't have an element named '#constructor'\");\n    }\n    element.computed = false;\n    element.key = this.parsePrivateIdent();\n  } else {\n    this.parsePropertyName(element);\n  }\n};\n\npp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {\n  // Check key and flags\n  var key = method.key;\n  if (method.kind === \"constructor\") {\n    if (isGenerator) { this.raise(key.start, \"Constructor can't be a generator\"); }\n    if (isAsync) { this.raise(key.start, \"Constructor can't be an async method\"); }\n  } else if (method.static && checkKeyName(method, \"prototype\")) {\n    this.raise(key.start, \"Classes may not have a static property named prototype\");\n  }\n\n  // Parse value\n  var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);\n\n  // Check value\n  if (method.kind === \"get\" && value.params.length !== 0)\n    { this.raiseRecoverable(value.start, \"getter should have no params\"); }\n  if (method.kind === \"set\" && value.params.length !== 1)\n    { this.raiseRecoverable(value.start, \"setter should have exactly one param\"); }\n  if (method.kind === \"set\" && value.params[0].type === \"RestElement\")\n    { this.raiseRecoverable(value.params[0].start, \"Setter cannot use rest params\"); }\n\n  return this.finishNode(method, \"MethodDefinition\")\n};\n\npp$8.parseClassField = function(field) {\n  if (checkKeyName(field, \"constructor\")) {\n    this.raise(field.key.start, \"Classes can't have a field named 'constructor'\");\n  } else if (field.static && checkKeyName(field, \"prototype\")) {\n    this.raise(field.key.start, \"Classes can't have a static field named 'prototype'\");\n  }\n\n  if (this.eat(types$1.eq)) {\n    // To raise SyntaxError if 'arguments' exists in the initializer.\n    var scope = this.currentThisScope();\n    var inClassFieldInit = scope.inClassFieldInit;\n    scope.inClassFieldInit = true;\n    field.value = this.parseMaybeAssign();\n    scope.inClassFieldInit = inClassFieldInit;\n  } else {\n    field.value = null;\n  }\n  this.semicolon();\n\n  return this.finishNode(field, \"PropertyDefinition\")\n};\n\npp$8.parseClassStaticBlock = function(node) {\n  node.body = [];\n\n  var oldLabels = this.labels;\n  this.labels = [];\n  this.enterScope(SCOPE_CLASS_STATIC_BLOCK | SCOPE_SUPER);\n  while (this.type !== types$1.braceR) {\n    var stmt = this.parseStatement(null);\n    node.body.push(stmt);\n  }\n  this.next();\n  this.exitScope();\n  this.labels = oldLabels;\n\n  return this.finishNode(node, \"StaticBlock\")\n};\n\npp$8.parseClassId = function(node, isStatement) {\n  if (this.type === types$1.name) {\n    node.id = this.parseIdent();\n    if (isStatement)\n      { this.checkLValSimple(node.id, BIND_LEXICAL, false); }\n  } else {\n    if (isStatement === true)\n      { this.unexpected(); }\n    node.id = null;\n  }\n};\n\npp$8.parseClassSuper = function(node) {\n  node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(false) : null;\n};\n\npp$8.enterClassBody = function() {\n  var element = {declared: Object.create(null), used: []};\n  this.privateNameStack.push(element);\n  return element.declared\n};\n\npp$8.exitClassBody = function() {\n  var ref = this.privateNameStack.pop();\n  var declared = ref.declared;\n  var used = ref.used;\n  var len = this.privateNameStack.length;\n  var parent = len === 0 ? null : this.privateNameStack[len - 1];\n  for (var i = 0; i < used.length; ++i) {\n    var id = used[i];\n    if (!hasOwn(declared, id.name)) {\n      if (parent) {\n        parent.used.push(id);\n      } else {\n        this.raiseRecoverable(id.start, (\"Private field '#\" + (id.name) + \"' must be declared in an enclosing class\"));\n      }\n    }\n  }\n};\n\nfunction isPrivateNameConflicted(privateNameMap, element) {\n  var name = element.key.name;\n  var curr = privateNameMap[name];\n\n  var next = \"true\";\n  if (element.type === \"MethodDefinition\" && (element.kind === \"get\" || element.kind === \"set\")) {\n    next = (element.static ? \"s\" : \"i\") + element.kind;\n  }\n\n  // `class { get #a(){}; static set #a(_){} }` is also conflict.\n  if (\n    curr === \"iget\" && next === \"iset\" ||\n    curr === \"iset\" && next === \"iget\" ||\n    curr === \"sget\" && next === \"sset\" ||\n    curr === \"sset\" && next === \"sget\"\n  ) {\n    privateNameMap[name] = \"true\";\n    return false\n  } else if (!curr) {\n    privateNameMap[name] = next;\n    return false\n  } else {\n    return true\n  }\n}\n\nfunction checkKeyName(node, name) {\n  var computed = node.computed;\n  var key = node.key;\n  return !computed && (\n    key.type === \"Identifier\" && key.name === name ||\n    key.type === \"Literal\" && key.value === name\n  )\n}\n\n// Parses module export declaration.\n\npp$8.parseExport = function(node, exports) {\n  this.next();\n  // export * from '...'\n  if (this.eat(types$1.star)) {\n    if (this.options.ecmaVersion >= 11) {\n      if (this.eatContextual(\"as\")) {\n        node.exported = this.parseModuleExportName();\n        this.checkExport(exports, node.exported.name, this.lastTokStart);\n      } else {\n        node.exported = null;\n      }\n    }\n    this.expectContextual(\"from\");\n    if (this.type !== types$1.string) { this.unexpected(); }\n    node.source = this.parseExprAtom();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(types$1._default)) { // export default ...\n    this.checkExport(exports, \"default\", this.lastTokStart);\n    var isAsync;\n    if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {\n      var fNode = this.startNode();\n      this.next();\n      if (isAsync) { this.next(); }\n      node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);\n    } else if (this.type === types$1._class) {\n      var cNode = this.startNode();\n      node.declaration = this.parseClass(cNode, \"nullableID\");\n    } else {\n      node.declaration = this.parseMaybeAssign();\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(null);\n    if (node.declaration.type === \"VariableDeclaration\")\n      { this.checkVariableExport(exports, node.declaration.declarations); }\n    else\n      { this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); }\n    node.specifiers = [];\n    node.source = null;\n  } else { // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers(exports);\n    if (this.eatContextual(\"from\")) {\n      if (this.type !== types$1.string) { this.unexpected(); }\n      node.source = this.parseExprAtom();\n    } else {\n      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n        // check for keywords used as local names\n        var spec = list[i];\n\n        this.checkUnreserved(spec.local);\n        // check if export is defined\n        this.checkLocalExport(spec.local);\n\n        if (spec.local.type === \"Literal\") {\n          this.raise(spec.local.start, \"A string literal cannot be used as an exported binding without `from`.\");\n        }\n      }\n\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n};\n\npp$8.checkExport = function(exports, name, pos) {\n  if (!exports) { return }\n  if (hasOwn(exports, name))\n    { this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\"); }\n  exports[name] = true;\n};\n\npp$8.checkPatternExport = function(exports, pat) {\n  var type = pat.type;\n  if (type === \"Identifier\")\n    { this.checkExport(exports, pat.name, pat.start); }\n  else if (type === \"ObjectPattern\")\n    { for (var i = 0, list = pat.properties; i < list.length; i += 1)\n      {\n        var prop = list[i];\n\n        this.checkPatternExport(exports, prop);\n      } }\n  else if (type === \"ArrayPattern\")\n    { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n      var elt = list$1[i$1];\n\n        if (elt) { this.checkPatternExport(exports, elt); }\n    } }\n  else if (type === \"Property\")\n    { this.checkPatternExport(exports, pat.value); }\n  else if (type === \"AssignmentPattern\")\n    { this.checkPatternExport(exports, pat.left); }\n  else if (type === \"RestElement\")\n    { this.checkPatternExport(exports, pat.argument); }\n  else if (type === \"ParenthesizedExpression\")\n    { this.checkPatternExport(exports, pat.expression); }\n};\n\npp$8.checkVariableExport = function(exports, decls) {\n  if (!exports) { return }\n  for (var i = 0, list = decls; i < list.length; i += 1)\n    {\n    var decl = list[i];\n\n    this.checkPatternExport(exports, decl.id);\n  }\n};\n\npp$8.shouldParseExportStatement = function() {\n  return this.type.keyword === \"var\" ||\n    this.type.keyword === \"const\" ||\n    this.type.keyword === \"class\" ||\n    this.type.keyword === \"function\" ||\n    this.isLet() ||\n    this.isAsyncFunction()\n};\n\n// Parses a comma-separated list of module exports.\n\npp$8.parseExportSpecifiers = function(exports) {\n  var nodes = [], first = true;\n  // export { x, y as z } [from '...']\n  this.expect(types$1.braceL);\n  while (!this.eat(types$1.braceR)) {\n    if (!first) {\n      this.expect(types$1.comma);\n      if (this.afterTrailingComma(types$1.braceR)) { break }\n    } else { first = false; }\n\n    var node = this.startNode();\n    node.local = this.parseModuleExportName();\n    node.exported = this.eatContextual(\"as\") ? this.parseModuleExportName() : node.local;\n    this.checkExport(\n      exports,\n      node.exported[node.exported.type === \"Identifier\" ? \"name\" : \"value\"],\n      node.exported.start\n    );\n    nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n  }\n  return nodes\n};\n\n// Parses import declaration.\n\npp$8.parseImport = function(node) {\n  this.next();\n  // import '...'\n  if (this.type === types$1.string) {\n    node.specifiers = empty$1;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\")\n};\n\n// Parses a comma-separated list of module imports.\n\npp$8.parseImportSpecifiers = function() {\n  var nodes = [], first = true;\n  if (this.type === types$1.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLValSimple(node.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n    if (!this.eat(types$1.comma)) { return nodes }\n  }\n  if (this.type === types$1.star) {\n    var node$1 = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node$1.local = this.parseIdent();\n    this.checkLValSimple(node$1.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n    return nodes\n  }\n  this.expect(types$1.braceL);\n  while (!this.eat(types$1.braceR)) {\n    if (!first) {\n      this.expect(types$1.comma);\n      if (this.afterTrailingComma(types$1.braceR)) { break }\n    } else { first = false; }\n\n    var node$2 = this.startNode();\n    node$2.imported = this.parseModuleExportName();\n    if (this.eatContextual(\"as\")) {\n      node$2.local = this.parseIdent();\n    } else {\n      this.checkUnreserved(node$2.imported);\n      node$2.local = node$2.imported;\n    }\n    this.checkLValSimple(node$2.local, BIND_LEXICAL);\n    nodes.push(this.finishNode(node$2, \"ImportSpecifier\"));\n  }\n  return nodes\n};\n\npp$8.parseModuleExportName = function() {\n  if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {\n    var stringLiteral = this.parseLiteral(this.value);\n    if (loneSurrogate.test(stringLiteral.value)) {\n      this.raise(stringLiteral.start, \"An export name cannot include a lone surrogate.\");\n    }\n    return stringLiteral\n  }\n  return this.parseIdent(true)\n};\n\n// Set `ExpressionStatement#directive` property for directive prologues.\npp$8.adaptDirectivePrologue = function(statements) {\n  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n    statements[i].directive = statements[i].expression.raw.slice(1, -1);\n  }\n};\npp$8.isDirectiveCandidate = function(statement) {\n  return (\n    statement.type === \"ExpressionStatement\" &&\n    statement.expression.type === \"Literal\" &&\n    typeof statement.expression.value === \"string\" &&\n    // Reject parenthesized strings.\n    (this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\")\n  )\n};\n\nvar pp$7 = Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n    case \"Identifier\":\n      if (this.inAsync && node.name === \"await\")\n        { this.raise(node.start, \"Cannot use 'await' as identifier inside an async function\"); }\n      break\n\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n    case \"AssignmentPattern\":\n    case \"RestElement\":\n      break\n\n    case \"ObjectExpression\":\n      node.type = \"ObjectPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      for (var i = 0, list = node.properties; i < list.length; i += 1) {\n        var prop = list[i];\n\n      this.toAssignable(prop, isBinding);\n        // Early error:\n        //   AssignmentRestProperty[Yield, Await] :\n        //     `...` DestructuringAssignmentTarget[Yield, Await]\n        //\n        //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n        if (\n          prop.type === \"RestElement\" &&\n          (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")\n        ) {\n          this.raise(prop.argument.start, \"Unexpected token\");\n        }\n      }\n      break\n\n    case \"Property\":\n      // AssignmentProperty has type === \"Property\"\n      if (node.kind !== \"init\") { this.raise(node.key.start, \"Object pattern can't contain getter or setter\"); }\n      this.toAssignable(node.value, isBinding);\n      break\n\n    case \"ArrayExpression\":\n      node.type = \"ArrayPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      this.toAssignableList(node.elements, isBinding);\n      break\n\n    case \"SpreadElement\":\n      node.type = \"RestElement\";\n      this.toAssignable(node.argument, isBinding);\n      if (node.argument.type === \"AssignmentPattern\")\n        { this.raise(node.argument.start, \"Rest elements cannot have a default value\"); }\n      break\n\n    case \"AssignmentExpression\":\n      if (node.operator !== \"=\") { this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\"); }\n      node.type = \"AssignmentPattern\";\n      delete node.operator;\n      this.toAssignable(node.left, isBinding);\n      break\n\n    case \"ParenthesizedExpression\":\n      this.toAssignable(node.expression, isBinding, refDestructuringErrors);\n      break\n\n    case \"ChainExpression\":\n      this.raiseRecoverable(node.start, \"Optional chaining cannot appear in left-hand side\");\n      break\n\n    case \"MemberExpression\":\n      if (!isBinding) { break }\n\n    default:\n      this.raise(node.start, \"Assigning to rvalue\");\n    }\n  } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n  return node\n};\n\n// Convert list of expression atoms to binding list.\n\npp$7.toAssignableList = function(exprList, isBinding) {\n  var end = exprList.length;\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) { this.toAssignable(elt, isBinding); }\n  }\n  if (end) {\n    var last = exprList[end - 1];\n    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n      { this.unexpected(last.argument.start); }\n  }\n  return exprList\n};\n\n// Parses spread element.\n\npp$7.parseSpread = function(refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\")\n};\n\npp$7.parseRestBinding = function() {\n  var node = this.startNode();\n  this.next();\n\n  // RestElement inside of a function parameter must be an identifier\n  if (this.options.ecmaVersion === 6 && this.type !== types$1.name)\n    { this.unexpected(); }\n\n  node.argument = this.parseBindingAtom();\n\n  return this.finishNode(node, \"RestElement\")\n};\n\n// Parses lvalue (assignable) atom.\n\npp$7.parseBindingAtom = function() {\n  if (this.options.ecmaVersion >= 6) {\n    switch (this.type) {\n    case types$1.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(types$1.bracketR, true, true);\n      return this.finishNode(node, \"ArrayPattern\")\n\n    case types$1.braceL:\n      return this.parseObj(true)\n    }\n  }\n  return this.parseIdent()\n};\n\npp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma) {\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (first) { first = false; }\n    else { this.expect(types$1.comma); }\n    if (allowEmpty && this.type === types$1.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n      break\n    } else if (this.type === types$1.ellipsis) {\n      var rest = this.parseRestBinding();\n      this.parseBindingListItem(rest);\n      elts.push(rest);\n      if (this.type === types$1.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }\n      this.expect(close);\n      break\n    } else {\n      var elem = this.parseMaybeDefault(this.start, this.startLoc);\n      this.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n  return elts\n};\n\npp$7.parseBindingListItem = function(param) {\n  return param\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp$7.parseMaybeDefault = function(startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n  if (this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) { return left }\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\")\n};\n\n// The following three functions all verify that a node is an lvalue —\n// something that can be bound, or assigned to. In order to do so, they perform\n// a variety of checks:\n//\n// - Check that none of the bound/assigned-to identifiers are reserved words.\n// - Record name declarations for bindings in the appropriate scope.\n// - Check duplicate argument names, if checkClashes is set.\n//\n// If a complex binding pattern is encountered (e.g., object and array\n// destructuring), the entire pattern is recursively checked.\n//\n// There are three versions of checkLVal*() appropriate for different\n// circumstances:\n//\n// - checkLValSimple() shall be used if the syntactic construct supports\n//   nothing other than identifiers and member expressions. Parenthesized\n//   expressions are also correctly handled. This is generally appropriate for\n//   constructs for which the spec says\n//\n//   > It is a Syntax Error if AssignmentTargetType of [the production] is not\n//   > simple.\n//\n//   It is also appropriate for checking if an identifier is valid and not\n//   defined elsewhere, like import declarations or function/class identifiers.\n//\n//   Examples where this is used include:\n//     a += …;\n//     import a from '…';\n//   where a is the node to be checked.\n//\n// - checkLValPattern() shall be used if the syntactic construct supports\n//   anything checkLValSimple() supports, as well as object and array\n//   destructuring patterns. This is generally appropriate for constructs for\n//   which the spec says\n//\n//   > It is a Syntax Error if [the production] is neither an ObjectLiteral nor\n//   > an ArrayLiteral and AssignmentTargetType of [the production] is not\n//   > simple.\n//\n//   Examples where this is used include:\n//     (a = …);\n//     const a = …;\n//     try { … } catch (a) { … }\n//   where a is the node to be checked.\n//\n// - checkLValInnerPattern() shall be used if the syntactic construct supports\n//   anything checkLValPattern() supports, as well as default assignment\n//   patterns, rest elements, and other constructs that may appear within an\n//   object or array destructuring pattern.\n//\n//   As a special case, function parameters also use checkLValInnerPattern(),\n//   as they also support defaults and rest constructs.\n//\n// These functions deliberately support both assignment and binding constructs,\n// as the logic for both is exceedingly similar. If the node is the target of\n// an assignment, then bindingType should be set to BIND_NONE. Otherwise, it\n// should be set to the appropriate BIND_* constant, like BIND_VAR or\n// BIND_LEXICAL.\n//\n// If the function is called with a non-BIND_NONE bindingType, then\n// additionally a checkClashes object may be specified to allow checking for\n// duplicate argument names. checkClashes is ignored if the provided construct\n// is an assignment (i.e., bindingType is BIND_NONE).\n\npp$7.checkLValSimple = function(expr, bindingType, checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  var isBind = bindingType !== BIND_NONE;\n\n  switch (expr.type) {\n  case \"Identifier\":\n    if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n      { this.raiseRecoverable(expr.start, (isBind ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\"); }\n    if (isBind) {\n      if (bindingType === BIND_LEXICAL && expr.name === \"let\")\n        { this.raiseRecoverable(expr.start, \"let is disallowed as a lexically bound name\"); }\n      if (checkClashes) {\n        if (hasOwn(checkClashes, expr.name))\n          { this.raiseRecoverable(expr.start, \"Argument name clash\"); }\n        checkClashes[expr.name] = true;\n      }\n      if (bindingType !== BIND_OUTSIDE) { this.declareName(expr.name, bindingType, expr.start); }\n    }\n    break\n\n  case \"ChainExpression\":\n    this.raiseRecoverable(expr.start, \"Optional chaining cannot appear in left-hand side\");\n    break\n\n  case \"MemberExpression\":\n    if (isBind) { this.raiseRecoverable(expr.start, \"Binding member expression\"); }\n    break\n\n  case \"ParenthesizedExpression\":\n    if (isBind) { this.raiseRecoverable(expr.start, \"Binding parenthesized expression\"); }\n    return this.checkLValSimple(expr.expression, bindingType, checkClashes)\n\n  default:\n    this.raise(expr.start, (isBind ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n};\n\npp$7.checkLValPattern = function(expr, bindingType, checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  switch (expr.type) {\n  case \"ObjectPattern\":\n    for (var i = 0, list = expr.properties; i < list.length; i += 1) {\n      var prop = list[i];\n\n    this.checkLValInnerPattern(prop, bindingType, checkClashes);\n    }\n    break\n\n  case \"ArrayPattern\":\n    for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n      var elem = list$1[i$1];\n\n    if (elem) { this.checkLValInnerPattern(elem, bindingType, checkClashes); }\n    }\n    break\n\n  default:\n    this.checkLValSimple(expr, bindingType, checkClashes);\n  }\n};\n\npp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {\n  if ( bindingType === void 0 ) bindingType = BIND_NONE;\n\n  switch (expr.type) {\n  case \"Property\":\n    // AssignmentProperty has type === \"Property\"\n    this.checkLValInnerPattern(expr.value, bindingType, checkClashes);\n    break\n\n  case \"AssignmentPattern\":\n    this.checkLValPattern(expr.left, bindingType, checkClashes);\n    break\n\n  case \"RestElement\":\n    this.checkLValPattern(expr.argument, bindingType, checkClashes);\n    break\n\n  default:\n    this.checkLValPattern(expr, bindingType, checkClashes);\n  }\n};\n\n// The algorithm used to determine whether a regexp can appear at a\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n  this.generator = !!generator;\n};\n\nvar types = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", false),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),\n  f_stat: new TokContext(\"function\", false),\n  f_expr: new TokContext(\"function\", true),\n  f_expr_gen: new TokContext(\"function\", true, false, null, true),\n  f_gen: new TokContext(\"function\", false, false, null, true)\n};\n\nvar pp$6 = Parser.prototype;\n\npp$6.initialContext = function() {\n  return [types.b_stat]\n};\n\npp$6.curContext = function() {\n  return this.context[this.context.length - 1]\n};\n\npp$6.braceIsBlock = function(prevType) {\n  var parent = this.curContext();\n  if (parent === types.f_expr || parent === types.f_stat)\n    { return true }\n  if (prevType === types$1.colon && (parent === types.b_stat || parent === types.b_expr))\n    { return !parent.isExpr }\n\n  // The check for `tt.name && exprAllowed` detects whether we are\n  // after a `yield` or `of` construct. See the `updateContext` for\n  // `tt.name`.\n  if (prevType === types$1._return || prevType === types$1.name && this.exprAllowed)\n    { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }\n  if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow)\n    { return true }\n  if (prevType === types$1.braceL)\n    { return parent === types.b_stat }\n  if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name)\n    { return false }\n  return !this.exprAllowed\n};\n\npp$6.inGeneratorContext = function() {\n  for (var i = this.context.length - 1; i >= 1; i--) {\n    var context = this.context[i];\n    if (context.token === \"function\")\n      { return context.generator }\n  }\n  return false\n};\n\npp$6.updateContext = function(prevType) {\n  var update, type = this.type;\n  if (type.keyword && prevType === types$1.dot)\n    { this.exprAllowed = false; }\n  else if (update = type.updateContext)\n    { update.call(this, prevType); }\n  else\n    { this.exprAllowed = type.beforeExpr; }\n};\n\n// Used to handle egde case when token context could not be inferred correctly in tokenize phase\npp$6.overrideContext = function(tokenCtx) {\n  if (this.curContext() !== tokenCtx) {\n    this.context[this.context.length - 1] = tokenCtx;\n  }\n};\n\n// Token-specific context update code\n\ntypes$1.parenR.updateContext = types$1.braceR.updateContext = function() {\n  if (this.context.length === 1) {\n    this.exprAllowed = true;\n    return\n  }\n  var out = this.context.pop();\n  if (out === types.b_stat && this.curContext().token === \"function\") {\n    out = this.context.pop();\n  }\n  this.exprAllowed = !out.isExpr;\n};\n\ntypes$1.braceL.updateContext = function(prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);\n  this.exprAllowed = true;\n};\n\ntypes$1.dollarBraceL.updateContext = function() {\n  this.context.push(types.b_tmpl);\n  this.exprAllowed = true;\n};\n\ntypes$1.parenL.updateContext = function(prevType) {\n  var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;\n  this.context.push(statementParens ? types.p_stat : types.p_expr);\n  this.exprAllowed = true;\n};\n\ntypes$1.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n};\n\ntypes$1._function.updateContext = types$1._class.updateContext = function(prevType) {\n  if (prevType.beforeExpr && prevType !== types$1._else &&\n      !(prevType === types$1.semi && this.curContext() !== types.p_stat) &&\n      !(prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) &&\n      !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat))\n    { this.context.push(types.f_expr); }\n  else\n    { this.context.push(types.f_stat); }\n  this.exprAllowed = false;\n};\n\ntypes$1.backQuote.updateContext = function() {\n  if (this.curContext() === types.q_tmpl)\n    { this.context.pop(); }\n  else\n    { this.context.push(types.q_tmpl); }\n  this.exprAllowed = false;\n};\n\ntypes$1.star.updateContext = function(prevType) {\n  if (prevType === types$1._function) {\n    var index = this.context.length - 1;\n    if (this.context[index] === types.f_expr)\n      { this.context[index] = types.f_expr_gen; }\n    else\n      { this.context[index] = types.f_gen; }\n  }\n  this.exprAllowed = true;\n};\n\ntypes$1.name.updateContext = function(prevType) {\n  var allowed = false;\n  if (this.options.ecmaVersion >= 6 && prevType !== types$1.dot) {\n    if (this.value === \"of\" && !this.exprAllowed ||\n        this.value === \"yield\" && this.inGeneratorContext())\n      { allowed = true; }\n  }\n  this.exprAllowed = allowed;\n};\n\n// A recursive descent parser operates by defining functions for all\n\nvar pp$5 = Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\")\n    { return }\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n    { return }\n  var key = prop.key;\n  var name;\n  switch (key.type) {\n  case \"Identifier\": name = key.name; break\n  case \"Literal\": name = String(key.value); break\n  default: return\n  }\n  var kind = prop.kind;\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) {\n        if (refDestructuringErrors) {\n          if (refDestructuringErrors.doubleProto < 0) {\n            refDestructuringErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\");\n        }\n      }\n      propHash.proto = true;\n    }\n    return\n  }\n  name = \"$\" + name;\n  var other = propHash[name];\n  if (other) {\n    var redefinition;\n    if (kind === \"init\") {\n      redefinition = this.strict && other.init || other.get || other.set;\n    } else {\n      redefinition = other.init || other[kind];\n    }\n    if (redefinition)\n      { this.raiseRecoverable(key.start, \"Redefinition of property\"); }\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp$5.parseExpression = function(forInit, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(forInit, refDestructuringErrors);\n  if (this.type === types$1.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(types$1.comma)) { node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors)); }\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {\n  if (this.isContextual(\"yield\")) {\n    if (this.inGenerator) { return this.parseYield(forInit) }\n    // The tokenizer will assume an expression is allowed after\n    // `yield`, but this isn't that kind of yield\n    else { this.exprAllowed = false; }\n  }\n\n  var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;\n  if (refDestructuringErrors) {\n    oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n    oldTrailingComma = refDestructuringErrors.trailingComma;\n    oldDoubleProto = refDestructuringErrors.doubleProto;\n    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n  } else {\n    refDestructuringErrors = new DestructuringErrors;\n    ownDestructuringErrors = true;\n  }\n\n  var startPos = this.start, startLoc = this.startLoc;\n  if (this.type === types$1.parenL || this.type === types$1.name) {\n    this.potentialArrowAt = this.start;\n    this.potentialArrowInForAwait = forInit === \"await\";\n  }\n  var left = this.parseMaybeConditional(forInit, refDestructuringErrors);\n  if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }\n  if (this.type.isAssign) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    if (this.type === types$1.eq)\n      { left = this.toAssignable(left, false, refDestructuringErrors); }\n    if (!ownDestructuringErrors) {\n      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;\n    }\n    if (refDestructuringErrors.shorthandAssign >= left.start)\n      { refDestructuringErrors.shorthandAssign = -1; } // reset because shorthand default was used correctly\n    if (this.type === types$1.eq)\n      { this.checkLValPattern(left); }\n    else\n      { this.checkLValSimple(left); }\n    node.left = left;\n    this.next();\n    node.right = this.parseMaybeAssign(forInit);\n    if (oldDoubleProto > -1) { refDestructuringErrors.doubleProto = oldDoubleProto; }\n    return this.finishNode(node, \"AssignmentExpression\")\n  } else {\n    if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }\n  }\n  if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }\n  if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }\n  return left\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprOps(forInit, refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  if (this.eat(types$1.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(types$1.colon);\n    node.alternate = this.parseMaybeAssign(forInit);\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n};\n\n// Start the precedence parser.\n\npp$5.parseExprOps = function(forInit, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit)\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {\n  var prec = this.type.binop;\n  if (prec != null && (!forInit || this.type !== types$1._in)) {\n    if (prec > minPrec) {\n      var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND;\n      var coalesce = this.type === types$1.coalesce;\n      if (coalesce) {\n        // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n        // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n        prec = types$1.logicalAND.binop;\n      }\n      var op = this.value;\n      this.next();\n      var startPos = this.start, startLoc = this.startLoc;\n      var right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit);\n      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);\n      if ((logical && this.type === types$1.coalesce) || (coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND))) {\n        this.raiseRecoverable(this.start, \"Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses\");\n      }\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit)\n    }\n  }\n  return left\n};\n\npp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n  if (right.type === \"PrivateIdentifier\") { this.raise(right.start, \"Private identifier can only be left side of binary expression\"); }\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.operator = op;\n  node.right = right;\n  return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {\n  var startPos = this.start, startLoc = this.startLoc, expr;\n  if (this.isContextual(\"await\") && this.canAwait) {\n    expr = this.parseAwait(forInit);\n    sawUnary = true;\n  } else if (this.type.prefix) {\n    var node = this.startNode(), update = this.type === types$1.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true, update, forInit);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    if (update) { this.checkLValSimple(node.argument); }\n    else if (this.strict && node.operator === \"delete\" &&\n             node.argument.type === \"Identifier\")\n      { this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\"); }\n    else if (node.operator === \"delete\" && isPrivateFieldAccess(node.argument))\n      { this.raiseRecoverable(node.start, \"Private fields can not be deleted\"); }\n    else { sawUnary = true; }\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else if (!sawUnary && this.type === types$1.privateId) {\n    if (forInit || this.privateNameStack.length === 0) { this.unexpected(); }\n    expr = this.parsePrivateIdent();\n    // only could be private fields in 'in', such as #x in obj\n    if (this.type !== types$1._in) { this.unexpected(); }\n  } else {\n    expr = this.parseExprSubscripts(refDestructuringErrors, forInit);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    while (this.type.postfix && !this.canInsertSemicolon()) {\n      var node$1 = this.startNodeAt(startPos, startLoc);\n      node$1.operator = this.value;\n      node$1.prefix = false;\n      node$1.argument = expr;\n      this.checkLValSimple(expr);\n      this.next();\n      expr = this.finishNode(node$1, \"UpdateExpression\");\n    }\n  }\n\n  if (!incDec && this.eat(types$1.starstar)) {\n    if (sawUnary)\n      { this.unexpected(this.lastTokStart); }\n    else\n      { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), \"**\", false) }\n  } else {\n    return expr\n  }\n};\n\nfunction isPrivateFieldAccess(node) {\n  return (\n    node.type === \"MemberExpression\" && node.property.type === \"PrivateIdentifier\" ||\n    node.type === \"ChainExpression\" && isPrivateFieldAccess(node.expression)\n  )\n}\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors, forInit);\n  if (expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\")\n    { return expr }\n  var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);\n  if (refDestructuringErrors && result.type === \"MemberExpression\") {\n    if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }\n    if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }\n    if (refDestructuringErrors.trailingComma >= result.start) { refDestructuringErrors.trailingComma = -1; }\n  }\n  return result\n};\n\npp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {\n  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&\n      this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 &&\n      this.potentialArrowAt === base.start;\n  var optionalChained = false;\n\n  while (true) {\n    var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);\n\n    if (element.optional) { optionalChained = true; }\n    if (element === base || element.type === \"ArrowFunctionExpression\") {\n      if (optionalChained) {\n        var chainNode = this.startNodeAt(startPos, startLoc);\n        chainNode.expression = element;\n        element = this.finishNode(chainNode, \"ChainExpression\");\n      }\n      return element\n    }\n\n    base = element;\n  }\n};\n\npp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {\n  var optionalSupported = this.options.ecmaVersion >= 11;\n  var optional = optionalSupported && this.eat(types$1.questionDot);\n  if (noCalls && optional) { this.raise(this.lastTokStart, \"Optional chaining cannot appear in the callee of new expressions\"); }\n\n  var computed = this.eat(types$1.bracketL);\n  if (computed || (optional && this.type !== types$1.parenL && this.type !== types$1.backQuote) || this.eat(types$1.dot)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(types$1.bracketR);\n    } else if (this.type === types$1.privateId && base.type !== \"Super\") {\n      node.property = this.parsePrivateIdent();\n    } else {\n      node.property = this.parseIdent(this.options.allowReserved !== \"never\");\n    }\n    node.computed = !!computed;\n    if (optionalSupported) {\n      node.optional = optional;\n    }\n    base = this.finishNode(node, \"MemberExpression\");\n  } else if (!noCalls && this.eat(types$1.parenL)) {\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    this.awaitIdentPos = 0;\n    var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);\n    if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat(types$1.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      if (this.awaitIdentPos > 0)\n        { this.raise(this.awaitIdentPos, \"Cannot use 'await' as identifier inside an async function\"); }\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      this.awaitIdentPos = oldAwaitIdentPos;\n      return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit)\n    }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n    this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;\n    var node$1 = this.startNodeAt(startPos, startLoc);\n    node$1.callee = base;\n    node$1.arguments = exprList;\n    if (optionalSupported) {\n      node$1.optional = optional;\n    }\n    base = this.finishNode(node$1, \"CallExpression\");\n  } else if (this.type === types$1.backQuote) {\n    if (optional || optionalChained) {\n      this.raise(this.start, \"Optional chaining cannot appear in the tag of tagged template expressions\");\n    }\n    var node$2 = this.startNodeAt(startPos, startLoc);\n    node$2.tag = base;\n    node$2.quasi = this.parseTemplate({isTagged: true});\n    base = this.finishNode(node$2, \"TaggedTemplateExpression\");\n  }\n  return base\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp$5.parseExprAtom = function(refDestructuringErrors, forInit) {\n  // If a division operator appears in an expression position, the\n  // tokenizer got confused, and we force it to read a regexp instead.\n  if (this.type === types$1.slash) { this.readRegexp(); }\n\n  var node, canBeArrow = this.potentialArrowAt === this.start;\n  switch (this.type) {\n  case types$1._super:\n    if (!this.allowSuper)\n      { this.raise(this.start, \"'super' keyword outside a method\"); }\n    node = this.startNode();\n    this.next();\n    if (this.type === types$1.parenL && !this.allowDirectSuper)\n      { this.raise(node.start, \"super() call outside constructor of a subclass\"); }\n    // The `super` keyword can appear at below:\n    // SuperProperty:\n    //     super [ Expression ]\n    //     super . IdentifierName\n    // SuperCall:\n    //     super ( Arguments )\n    if (this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL)\n      { this.unexpected(); }\n    return this.finishNode(node, \"Super\")\n\n  case types$1._this:\n    node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"ThisExpression\")\n\n  case types$1.name:\n    var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n    var id = this.parseIdent(false);\n    if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types$1._function)) {\n      this.overrideContext(types.f_expr);\n      return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit)\n    }\n    if (canBeArrow && !this.canInsertSemicolon()) {\n      if (this.eat(types$1.arrow))\n        { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit) }\n      if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types$1.name && !containsEsc &&\n          (!this.potentialArrowInForAwait || this.value !== \"of\" || this.containsEsc)) {\n        id = this.parseIdent(false);\n        if (this.canInsertSemicolon() || !this.eat(types$1.arrow))\n          { this.unexpected(); }\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit)\n      }\n    }\n    return id\n\n  case types$1.regexp:\n    var value = this.value;\n    node = this.parseLiteral(value.value);\n    node.regex = {pattern: value.pattern, flags: value.flags};\n    return node\n\n  case types$1.num: case types$1.string:\n    return this.parseLiteral(this.value)\n\n  case types$1._null: case types$1._true: case types$1._false:\n    node = this.startNode();\n    node.value = this.type === types$1._null ? null : this.type === types$1._true;\n    node.raw = this.type.keyword;\n    this.next();\n    return this.finishNode(node, \"Literal\")\n\n  case types$1.parenL:\n    var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);\n    if (refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\n        { refDestructuringErrors.parenthesizedAssign = start; }\n      if (refDestructuringErrors.parenthesizedBind < 0)\n        { refDestructuringErrors.parenthesizedBind = start; }\n    }\n    return expr\n\n  case types$1.bracketL:\n    node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors);\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case types$1.braceL:\n    this.overrideContext(types.b_expr);\n    return this.parseObj(false, refDestructuringErrors)\n\n  case types$1._function:\n    node = this.startNode();\n    this.next();\n    return this.parseFunction(node, 0)\n\n  case types$1._class:\n    return this.parseClass(this.startNode(), false)\n\n  case types$1._new:\n    return this.parseNew()\n\n  case types$1.backQuote:\n    return this.parseTemplate()\n\n  case types$1._import:\n    if (this.options.ecmaVersion >= 11) {\n      return this.parseExprImport()\n    } else {\n      return this.unexpected()\n    }\n\n  default:\n    this.unexpected();\n  }\n};\n\npp$5.parseExprImport = function() {\n  var node = this.startNode();\n\n  // Consume `import` as an identifier for `import.meta`.\n  // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.\n  if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword import\"); }\n  var meta = this.parseIdent(true);\n\n  switch (this.type) {\n  case types$1.parenL:\n    return this.parseDynamicImport(node)\n  case types$1.dot:\n    node.meta = meta;\n    return this.parseImportMeta(node)\n  default:\n    this.unexpected();\n  }\n};\n\npp$5.parseDynamicImport = function(node) {\n  this.next(); // skip `(`\n\n  // Parse node.source.\n  node.source = this.parseMaybeAssign();\n\n  // Verify ending.\n  if (!this.eat(types$1.parenR)) {\n    var errorPos = this.start;\n    if (this.eat(types$1.comma) && this.eat(types$1.parenR)) {\n      this.raiseRecoverable(errorPos, \"Trailing comma is not allowed in import()\");\n    } else {\n      this.unexpected(errorPos);\n    }\n  }\n\n  return this.finishNode(node, \"ImportExpression\")\n};\n\npp$5.parseImportMeta = function(node) {\n  this.next(); // skip `.`\n\n  var containsEsc = this.containsEsc;\n  node.property = this.parseIdent(true);\n\n  if (node.property.name !== \"meta\")\n    { this.raiseRecoverable(node.property.start, \"The only valid meta property for import is 'import.meta'\"); }\n  if (containsEsc)\n    { this.raiseRecoverable(node.start, \"'import.meta' must not contain escaped characters\"); }\n  if (this.options.sourceType !== \"module\" && !this.options.allowImportExportEverywhere)\n    { this.raiseRecoverable(node.start, \"Cannot use 'import.meta' outside a module\"); }\n\n  return this.finishNode(node, \"MetaProperty\")\n};\n\npp$5.parseLiteral = function(value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  if (node.raw.charCodeAt(node.raw.length - 1) === 110) { node.bigint = node.raw.slice(0, -1).replace(/_/g, \"\"); }\n  this.next();\n  return this.finishNode(node, \"Literal\")\n};\n\npp$5.parseParenExpression = function() {\n  this.expect(types$1.parenL);\n  var val = this.parseExpression();\n  this.expect(types$1.parenR);\n  return val\n};\n\npp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {\n  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    var innerStartPos = this.start, innerStartLoc = this.startLoc;\n    var exprList = [], first = true, lastIsComma = false;\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    // Do not save awaitIdentPos to allow checking awaits nested in parameters\n    while (this.type !== types$1.parenR) {\n      first ? first = false : this.expect(types$1.comma);\n      if (allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {\n        lastIsComma = true;\n        break\n      } else if (this.type === types$1.ellipsis) {\n        spreadStart = this.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding()));\n        if (this.type === types$1.comma) { this.raise(this.start, \"Comma is not permitted after the rest element\"); }\n        break\n      } else {\n        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n      }\n    }\n    var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;\n    this.expect(types$1.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types$1.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      return this.parseParenArrowList(startPos, startLoc, exprList, forInit)\n    }\n\n    if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }\n    if (spreadStart) { this.unexpected(spreadStart); }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\")\n  } else {\n    return val\n  }\n};\n\npp$5.parseParenItem = function(item) {\n  return item\n};\n\npp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit)\n};\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty = [];\n\npp$5.parseNew = function() {\n  if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword new\"); }\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(types$1.dot)) {\n    node.meta = meta;\n    var containsEsc = this.containsEsc;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"target\")\n      { this.raiseRecoverable(node.property.start, \"The only valid meta property for new is 'new.target'\"); }\n    if (containsEsc)\n      { this.raiseRecoverable(node.start, \"'new.target' must not contain escaped characters\"); }\n    if (!this.allowNewDotTarget)\n      { this.raiseRecoverable(node.start, \"'new.target' can only be used in functions and class static block\"); }\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types$1._import;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true, false);\n  if (isImport && node.callee.type === \"ImportExpression\") {\n    this.raise(startPos, \"Cannot use new with import()\");\n  }\n  if (this.eat(types$1.parenL)) { node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false); }\n  else { node.arguments = empty; }\n  return this.finishNode(node, \"NewExpression\")\n};\n\n// Parse template expression.\n\npp$5.parseTemplateElement = function(ref) {\n  var isTagged = ref.isTagged;\n\n  var elem = this.startNode();\n  if (this.type === types$1.invalidTemplate) {\n    if (!isTagged) {\n      this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n    }\n    elem.value = {\n      raw: this.value,\n      cooked: null\n    };\n  } else {\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.value\n    };\n  }\n  this.next();\n  elem.tail = this.type === types$1.backQuote;\n  return this.finishNode(elem, \"TemplateElement\")\n};\n\npp$5.parseTemplate = function(ref) {\n  if ( ref === void 0 ) ref = {};\n  var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;\n\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement({isTagged: isTagged});\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    if (this.type === types$1.eof) { this.raise(this.pos, \"Unterminated template literal\"); }\n    this.expect(types$1.dollarBraceL);\n    node.expressions.push(this.parseExpression());\n    this.expect(types$1.braceR);\n    node.quasis.push(curElt = this.parseTemplateElement({isTagged: isTagged}));\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\")\n};\n\npp$5.isAsyncProp = function(prop) {\n  return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" &&\n    (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types$1.star)) &&\n    !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\n// Parse an object literal or binding pattern.\n\npp$5.parseObj = function(isPattern, refDestructuringErrors) {\n  var node = this.startNode(), first = true, propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(types$1.braceR)) {\n    if (!first) {\n      this.expect(types$1.comma);\n      if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) { break }\n    } else { first = false; }\n\n    var prop = this.parseProperty(isPattern, refDestructuringErrors);\n    if (!isPattern) { this.checkPropClash(prop, propHash, refDestructuringErrors); }\n    node.properties.push(prop);\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n};\n\npp$5.parseProperty = function(isPattern, refDestructuringErrors) {\n  var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n  if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) {\n    if (isPattern) {\n      prop.argument = this.parseIdent(false);\n      if (this.type === types$1.comma) {\n        this.raise(this.start, \"Comma is not permitted after the rest element\");\n      }\n      return this.finishNode(prop, \"RestElement\")\n    }\n    // To disallow parenthesized identifier via `this.toAssignable()`.\n    if (this.type === types$1.parenL && refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0) {\n        refDestructuringErrors.parenthesizedAssign = this.start;\n      }\n      if (refDestructuringErrors.parenthesizedBind < 0) {\n        refDestructuringErrors.parenthesizedBind = this.start;\n      }\n    }\n    // Parse argument.\n    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    // To disallow trailing comma via `this.toAssignable()`.\n    if (this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n      refDestructuringErrors.trailingComma = this.start;\n    }\n    // Finish\n    return this.finishNode(prop, \"SpreadElement\")\n  }\n  if (this.options.ecmaVersion >= 6) {\n    prop.method = false;\n    prop.shorthand = false;\n    if (isPattern || refDestructuringErrors) {\n      startPos = this.start;\n      startLoc = this.startLoc;\n    }\n    if (!isPattern)\n      { isGenerator = this.eat(types$1.star); }\n  }\n  var containsEsc = this.containsEsc;\n  this.parsePropertyName(prop);\n  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n    isAsync = true;\n    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star);\n    this.parsePropertyName(prop, refDestructuringErrors);\n  } else {\n    isAsync = false;\n  }\n  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n  return this.finishNode(prop, \"Property\")\n};\n\npp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n  if ((isGenerator || isAsync) && this.type === types$1.colon)\n    { this.unexpected(); }\n\n  if (this.eat(types$1.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === types$1.parenL) {\n    if (isPattern) { this.unexpected(); }\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator, isAsync);\n  } else if (!isPattern && !containsEsc &&\n             this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n             (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n             (this.type !== types$1.comma && this.type !== types$1.braceR && this.type !== types$1.eq)) {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n      if (prop.kind === \"get\")\n        { this.raiseRecoverable(start, \"getter should have no params\"); }\n      else\n        { this.raiseRecoverable(start, \"setter should have exactly one param\"); }\n    } else {\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n        { this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\"); }\n    }\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    this.checkUnreserved(prop.key);\n    if (prop.key.name === \"await\" && !this.awaitIdentPos)\n      { this.awaitIdentPos = startPos; }\n    prop.kind = \"init\";\n    if (isPattern) {\n      prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\n    } else if (this.type === types$1.eq && refDestructuringErrors) {\n      if (refDestructuringErrors.shorthandAssign < 0)\n        { refDestructuringErrors.shorthandAssign = this.start; }\n      prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));\n    } else {\n      prop.value = this.copyNode(prop.key);\n    }\n    prop.shorthand = true;\n  } else { this.unexpected(); }\n};\n\npp$5.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(types$1.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types$1.bracketR);\n      return prop.key\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== \"never\")\n};\n\n// Initialize empty function node.\n\npp$5.initFunction = function(node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) { node.generator = node.expression = false; }\n  if (this.options.ecmaVersion >= 8) { node.async = false; }\n};\n\n// Parse object or class method.\n\npp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {\n  var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6)\n    { node.generator = isGenerator; }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n  this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n\n  this.expect(types$1.parenL);\n  node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n  this.parseFunctionBody(node, false, true, false);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, \"FunctionExpression\")\n};\n\n// Parse arrow function expression with given parameters.\n\npp$5.parseArrowExpression = function(node, params, isAsync, forInit) {\n  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;\n\n  this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 8) { node.async = !!isAsync; }\n\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.awaitIdentPos = 0;\n\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true, false, forInit);\n\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.awaitIdentPos = oldAwaitIdentPos;\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n};\n\n// Parse function body and check parameters.\n\npp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {\n  var isExpression = isArrowFunction && this.type !== types$1.braceL;\n  var oldStrict = this.strict, useStrict = false;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign(forInit);\n    node.expression = true;\n    this.checkParams(node, false);\n  } else {\n    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n    if (!oldStrict || nonSimple) {\n      useStrict = this.strictDirective(this.end);\n      // If this is a strict mode function, verify that argument names\n      // are not repeated, and it does not try to bind the words `eval`\n      // or `arguments`.\n      if (useStrict && nonSimple)\n        { this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\"); }\n    }\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldLabels = this.labels;\n    this.labels = [];\n    if (useStrict) { this.strict = true; }\n\n    // Add the params to varDeclaredNames to ensure that an error is thrown\n    // if a let/const declaration in the function clashes with one of the params.\n    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));\n    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n    if (this.strict && node.id) { this.checkLValSimple(node.id, BIND_OUTSIDE); }\n    node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);\n    node.expression = false;\n    this.adaptDirectivePrologue(node.body.body);\n    this.labels = oldLabels;\n  }\n  this.exitScope();\n};\n\npp$5.isSimpleParamList = function(params) {\n  for (var i = 0, list = params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    if (param.type !== \"Identifier\") { return false\n  } }\n  return true\n};\n\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\npp$5.checkParams = function(node, allowDuplicates) {\n  var nameHash = Object.create(null);\n  for (var i = 0, list = node.params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash);\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this.expect(types$1.comma);\n      if (allowTrailingComma && this.afterTrailingComma(close)) { break }\n    } else { first = false; }\n\n    var elt = (void 0);\n    if (allowEmpty && this.type === types$1.comma)\n      { elt = null; }\n    else if (this.type === types$1.ellipsis) {\n      elt = this.parseSpread(refDestructuringErrors);\n      if (refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0)\n        { refDestructuringErrors.trailingComma = this.start; }\n    } else {\n      elt = this.parseMaybeAssign(false, refDestructuringErrors);\n    }\n    elts.push(elt);\n  }\n  return elts\n};\n\npp$5.checkUnreserved = function(ref) {\n  var start = ref.start;\n  var end = ref.end;\n  var name = ref.name;\n\n  if (this.inGenerator && name === \"yield\")\n    { this.raiseRecoverable(start, \"Cannot use 'yield' as identifier inside a generator\"); }\n  if (this.inAsync && name === \"await\")\n    { this.raiseRecoverable(start, \"Cannot use 'await' as identifier inside an async function\"); }\n  if (this.currentThisScope().inClassFieldInit && name === \"arguments\")\n    { this.raiseRecoverable(start, \"Cannot use 'arguments' in class field initializer\"); }\n  if (this.inClassStaticBlock && (name === \"arguments\" || name === \"await\"))\n    { this.raise(start, (\"Cannot use \" + name + \" in class static initialization block\")); }\n  if (this.keywords.test(name))\n    { this.raise(start, (\"Unexpected keyword '\" + name + \"'\")); }\n  if (this.options.ecmaVersion < 6 &&\n    this.input.slice(start, end).indexOf(\"\\\\\") !== -1) { return }\n  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n  if (re.test(name)) {\n    if (!this.inAsync && name === \"await\")\n      { this.raiseRecoverable(start, \"Cannot use keyword 'await' outside an async function\"); }\n    this.raiseRecoverable(start, (\"The keyword '\" + name + \"' is reserved\"));\n  }\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp$5.parseIdent = function(liberal, isBinding) {\n  var node = this.startNode();\n  if (this.type === types$1.name) {\n    node.name = this.value;\n  } else if (this.type.keyword) {\n    node.name = this.type.keyword;\n\n    // To fix https://github.com/acornjs/acorn/issues/575\n    // `class` and `function` keywords push new context into this.context.\n    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n    if ((node.name === \"class\" || node.name === \"function\") &&\n        (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n      this.context.pop();\n    }\n  } else {\n    this.unexpected();\n  }\n  this.next(!!liberal);\n  this.finishNode(node, \"Identifier\");\n  if (!liberal) {\n    this.checkUnreserved(node);\n    if (node.name === \"await\" && !this.awaitIdentPos)\n      { this.awaitIdentPos = node.start; }\n  }\n  return node\n};\n\npp$5.parsePrivateIdent = function() {\n  var node = this.startNode();\n  if (this.type === types$1.privateId) {\n    node.name = this.value;\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  this.finishNode(node, \"PrivateIdentifier\");\n\n  // For validating existence\n  if (this.privateNameStack.length === 0) {\n    this.raise(node.start, (\"Private field '#\" + (node.name) + \"' must be declared in an enclosing class\"));\n  } else {\n    this.privateNameStack[this.privateNameStack.length - 1].used.push(node);\n  }\n\n  return node\n};\n\n// Parses yield expression inside generator.\n\npp$5.parseYield = function(forInit) {\n  if (!this.yieldPos) { this.yieldPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  if (this.type === types$1.semi || this.canInsertSemicolon() || (this.type !== types$1.star && !this.type.startsExpr)) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(types$1.star);\n    node.argument = this.parseMaybeAssign(forInit);\n  }\n  return this.finishNode(node, \"YieldExpression\")\n};\n\npp$5.parseAwait = function(forInit) {\n  if (!this.awaitPos) { this.awaitPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeUnary(null, true, false, forInit);\n  return this.finishNode(node, \"AwaitExpression\")\n};\n\nvar pp$4 = Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp$4.raise = function(pos, message) {\n  var loc = getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\n  throw err\n};\n\npp$4.raiseRecoverable = pp$4.raise;\n\npp$4.curPosition = function() {\n  if (this.options.locations) {\n    return new Position(this.curLine, this.pos - this.lineStart)\n  }\n};\n\nvar pp$3 = Parser.prototype;\n\nvar Scope = function Scope(flags) {\n  this.flags = flags;\n  // A list of var-declared names in the current lexical scope\n  this.var = [];\n  // A list of lexically-declared names in the current lexical scope\n  this.lexical = [];\n  // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n  this.functions = [];\n  // A switch to disallow the identifier reference 'arguments'\n  this.inClassFieldInit = false;\n};\n\n// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n\npp$3.enterScope = function(flags) {\n  this.scopeStack.push(new Scope(flags));\n};\n\npp$3.exitScope = function() {\n  this.scopeStack.pop();\n};\n\n// The spec says:\n// > At the top level of a function, or script, function declarations are\n// > treated like var declarations rather than like lexical declarations.\npp$3.treatFunctionsAsVarInScope = function(scope) {\n  return (scope.flags & SCOPE_FUNCTION) || !this.inModule && (scope.flags & SCOPE_TOP)\n};\n\npp$3.declareName = function(name, bindingType, pos) {\n  var redeclared = false;\n  if (bindingType === BIND_LEXICAL) {\n    var scope = this.currentScope();\n    redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    scope.lexical.push(name);\n    if (this.inModule && (scope.flags & SCOPE_TOP))\n      { delete this.undefinedExports[name]; }\n  } else if (bindingType === BIND_SIMPLE_CATCH) {\n    var scope$1 = this.currentScope();\n    scope$1.lexical.push(name);\n  } else if (bindingType === BIND_FUNCTION) {\n    var scope$2 = this.currentScope();\n    if (this.treatFunctionsAsVar)\n      { redeclared = scope$2.lexical.indexOf(name) > -1; }\n    else\n      { redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1; }\n    scope$2.functions.push(name);\n  } else {\n    for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n      var scope$3 = this.scopeStack[i];\n      if (scope$3.lexical.indexOf(name) > -1 && !((scope$3.flags & SCOPE_SIMPLE_CATCH) && scope$3.lexical[0] === name) ||\n          !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {\n        redeclared = true;\n        break\n      }\n      scope$3.var.push(name);\n      if (this.inModule && (scope$3.flags & SCOPE_TOP))\n        { delete this.undefinedExports[name]; }\n      if (scope$3.flags & SCOPE_VAR) { break }\n    }\n  }\n  if (redeclared) { this.raiseRecoverable(pos, (\"Identifier '\" + name + \"' has already been declared\")); }\n};\n\npp$3.checkLocalExport = function(id) {\n  // scope.functions must be empty as Module code is always strict.\n  if (this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n      this.scopeStack[0].var.indexOf(id.name) === -1) {\n    this.undefinedExports[id.name] = id;\n  }\n};\n\npp$3.currentScope = function() {\n  return this.scopeStack[this.scopeStack.length - 1]\n};\n\npp$3.currentVarScope = function() {\n  for (var i = this.scopeStack.length - 1;; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.flags & SCOPE_VAR) { return scope }\n  }\n};\n\n// Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\npp$3.currentThisScope = function() {\n  for (var i = this.scopeStack.length - 1;; i--) {\n    var scope = this.scopeStack[i];\n    if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) { return scope }\n  }\n};\n\nvar Node = function Node(parser, pos, loc) {\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  if (parser.options.locations)\n    { this.loc = new SourceLocation(parser, loc); }\n  if (parser.options.directSourceFile)\n    { this.sourceFile = parser.options.directSourceFile; }\n  if (parser.options.ranges)\n    { this.range = [pos, 0]; }\n};\n\n// Start an AST node, attaching a start offset.\n\nvar pp$2 = Parser.prototype;\n\npp$2.startNode = function() {\n  return new Node(this, this.start, this.startLoc)\n};\n\npp$2.startNodeAt = function(pos, loc) {\n  return new Node(this, pos, loc)\n};\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  if (this.options.locations)\n    { node.loc.end = loc; }\n  if (this.options.ranges)\n    { node.range[1] = pos; }\n  return node\n}\n\npp$2.finishNode = function(node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n};\n\n// Finish node at given position\n\npp$2.finishNodeAt = function(node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc)\n};\n\npp$2.copyNode = function(node) {\n  var newNode = new Node(this, node.start, this.startLoc);\n  for (var prop in node) { newNode[prop] = node[prop]; }\n  return newNode\n};\n\n// This file contains Unicode properties extracted from the ECMAScript\n// specification. The lists are extracted like so:\n// $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)\n\n// #table-binary-unicode-properties\nvar ecma9BinaryProperties = \"ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS\";\nvar ecma10BinaryProperties = ecma9BinaryProperties + \" Extended_Pictographic\";\nvar ecma11BinaryProperties = ecma10BinaryProperties;\nvar ecma12BinaryProperties = ecma11BinaryProperties + \" EBase EComp EMod EPres ExtPict\";\nvar ecma13BinaryProperties = ecma12BinaryProperties;\nvar unicodeBinaryProperties = {\n  9: ecma9BinaryProperties,\n  10: ecma10BinaryProperties,\n  11: ecma11BinaryProperties,\n  12: ecma12BinaryProperties,\n  13: ecma13BinaryProperties\n};\n\n// #table-unicode-general-category-values\nvar unicodeGeneralCategoryValues = \"Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu\";\n\n// #table-unicode-script-values\nvar ecma9ScriptValues = \"Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb\";\nvar ecma10ScriptValues = ecma9ScriptValues + \" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd\";\nvar ecma11ScriptValues = ecma10ScriptValues + \" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho\";\nvar ecma12ScriptValues = ecma11ScriptValues + \" Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi\";\nvar ecma13ScriptValues = ecma12ScriptValues + \" Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith\";\nvar unicodeScriptValues = {\n  9: ecma9ScriptValues,\n  10: ecma10ScriptValues,\n  11: ecma11ScriptValues,\n  12: ecma12ScriptValues,\n  13: ecma13ScriptValues\n};\n\nvar data = {};\nfunction buildUnicodeData(ecmaVersion) {\n  var d = data[ecmaVersion] = {\n    binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + \" \" + unicodeGeneralCategoryValues),\n    nonBinary: {\n      General_Category: wordsRegexp(unicodeGeneralCategoryValues),\n      Script: wordsRegexp(unicodeScriptValues[ecmaVersion])\n    }\n  };\n  d.nonBinary.Script_Extensions = d.nonBinary.Script;\n\n  d.nonBinary.gc = d.nonBinary.General_Category;\n  d.nonBinary.sc = d.nonBinary.Script;\n  d.nonBinary.scx = d.nonBinary.Script_Extensions;\n}\n\nfor (var i = 0, list = [9, 10, 11, 12, 13]; i < list.length; i += 1) {\n  var ecmaVersion = list[i];\n\n  buildUnicodeData(ecmaVersion);\n}\n\nvar pp$1 = Parser.prototype;\n\nvar RegExpValidationState = function RegExpValidationState(parser) {\n  this.parser = parser;\n  this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\") + (parser.options.ecmaVersion >= 13 ? \"d\" : \"\");\n  this.unicodeProperties = data[parser.options.ecmaVersion >= 13 ? 13 : parser.options.ecmaVersion];\n  this.source = \"\";\n  this.flags = \"\";\n  this.start = 0;\n  this.switchU = false;\n  this.switchN = false;\n  this.pos = 0;\n  this.lastIntValue = 0;\n  this.lastStringValue = \"\";\n  this.lastAssertionIsQuantifiable = false;\n  this.numCapturingParens = 0;\n  this.maxBackReference = 0;\n  this.groupNames = [];\n  this.backReferenceNames = [];\n};\n\nRegExpValidationState.prototype.reset = function reset (start, pattern, flags) {\n  var unicode = flags.indexOf(\"u\") !== -1;\n  this.start = start | 0;\n  this.source = pattern + \"\";\n  this.flags = flags;\n  this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n  this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n};\n\nRegExpValidationState.prototype.raise = function raise (message) {\n  this.parser.raiseRecoverable(this.start, (\"Invalid regular expression: /\" + (this.source) + \"/: \" + message));\n};\n\n// If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\nRegExpValidationState.prototype.at = function at (i, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return -1\n  }\n  var c = s.charCodeAt(i);\n  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return c\n  }\n  var next = s.charCodeAt(i + 1);\n  return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c\n};\n\nRegExpValidationState.prototype.nextIndex = function nextIndex (i, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return l\n  }\n  var c = s.charCodeAt(i), next;\n  if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l ||\n      (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) {\n    return i + 1\n  }\n  return i + 2\n};\n\nRegExpValidationState.prototype.current = function current (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  return this.at(this.pos, forceU)\n};\n\nRegExpValidationState.prototype.lookahead = function lookahead (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  return this.at(this.nextIndex(this.pos, forceU), forceU)\n};\n\nRegExpValidationState.prototype.advance = function advance (forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  this.pos = this.nextIndex(this.pos, forceU);\n};\n\nRegExpValidationState.prototype.eat = function eat (ch, forceU) {\n    if ( forceU === void 0 ) forceU = false;\n\n  if (this.current(forceU) === ch) {\n    this.advance(forceU);\n    return true\n  }\n  return false\n};\n\nfunction codePointToString$1(ch) {\n  if (ch <= 0xFFFF) { return String.fromCharCode(ch) }\n  ch -= 0x10000;\n  return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00)\n}\n\n/**\n * Validate the flags part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$1.validateRegExpFlags = function(state) {\n  var validFlags = state.validFlags;\n  var flags = state.flags;\n\n  for (var i = 0; i < flags.length; i++) {\n    var flag = flags.charAt(i);\n    if (validFlags.indexOf(flag) === -1) {\n      this.raise(state.start, \"Invalid regular expression flag\");\n    }\n    if (flags.indexOf(flag, i + 1) > -1) {\n      this.raise(state.start, \"Duplicate regular expression flag\");\n    }\n  }\n};\n\n/**\n * Validate the pattern part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$1.validateRegExpPattern = function(state) {\n  this.regexp_pattern(state);\n\n  // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n  // parsing contains a |GroupName|, reparse with the goal symbol\n  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n  // exception if _P_ did not conform to the grammar, if any elements of _P_\n  // were not matched by the parse, or if any Early Error conditions exist.\n  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n    state.switchN = true;\n    this.regexp_pattern(state);\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\npp$1.regexp_pattern = function(state) {\n  state.pos = 0;\n  state.lastIntValue = 0;\n  state.lastStringValue = \"\";\n  state.lastAssertionIsQuantifiable = false;\n  state.numCapturingParens = 0;\n  state.maxBackReference = 0;\n  state.groupNames.length = 0;\n  state.backReferenceNames.length = 0;\n\n  this.regexp_disjunction(state);\n\n  if (state.pos !== state.source.length) {\n    // Make the same messages as V8.\n    if (state.eat(0x29 /* ) */)) {\n      state.raise(\"Unmatched ')'\");\n    }\n    if (state.eat(0x5D /* ] */) || state.eat(0x7D /* } */)) {\n      state.raise(\"Lone quantifier brackets\");\n    }\n  }\n  if (state.maxBackReference > state.numCapturingParens) {\n    state.raise(\"Invalid escape\");\n  }\n  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\n    var name = list[i];\n\n    if (state.groupNames.indexOf(name) === -1) {\n      state.raise(\"Invalid named capture referenced\");\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\npp$1.regexp_disjunction = function(state) {\n  this.regexp_alternative(state);\n  while (state.eat(0x7C /* | */)) {\n    this.regexp_alternative(state);\n  }\n\n  // Make the same message as V8.\n  if (this.regexp_eatQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  if (state.eat(0x7B /* { */)) {\n    state.raise(\"Lone quantifier brackets\");\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\npp$1.regexp_alternative = function(state) {\n  while (state.pos < state.source.length && this.regexp_eatTerm(state))\n    { }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\npp$1.regexp_eatTerm = function(state) {\n  if (this.regexp_eatAssertion(state)) {\n    // Handle `QuantifiableAssertion Quantifier` alternative.\n    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n    // is a QuantifiableAssertion.\n    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n      // Make the same message as V8.\n      if (state.switchU) {\n        state.raise(\"Invalid quantifier\");\n      }\n    }\n    return true\n  }\n\n  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n    this.regexp_eatQuantifier(state);\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\npp$1.regexp_eatAssertion = function(state) {\n  var start = state.pos;\n  state.lastAssertionIsQuantifiable = false;\n\n  // ^, $\n  if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {\n    return true\n  }\n\n  // \\b \\B\n  if (state.eat(0x5C /* \\ */)) {\n    if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  // Lookahead / Lookbehind\n  if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {\n    var lookbehind = false;\n    if (this.options.ecmaVersion >= 9) {\n      lookbehind = state.eat(0x3C /* < */);\n    }\n    if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {\n      this.regexp_disjunction(state);\n      if (!state.eat(0x29 /* ) */)) {\n        state.raise(\"Unterminated group\");\n      }\n      state.lastAssertionIsQuantifiable = !lookbehind;\n      return true\n    }\n  }\n\n  state.pos = start;\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\npp$1.regexp_eatQuantifier = function(state, noError) {\n  if ( noError === void 0 ) noError = false;\n\n  if (this.regexp_eatQuantifierPrefix(state, noError)) {\n    state.eat(0x3F /* ? */);\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\npp$1.regexp_eatQuantifierPrefix = function(state, noError) {\n  return (\n    state.eat(0x2A /* * */) ||\n    state.eat(0x2B /* + */) ||\n    state.eat(0x3F /* ? */) ||\n    this.regexp_eatBracedQuantifier(state, noError)\n  )\n};\npp$1.regexp_eatBracedQuantifier = function(state, noError) {\n  var start = state.pos;\n  if (state.eat(0x7B /* { */)) {\n    var min = 0, max = -1;\n    if (this.regexp_eatDecimalDigits(state)) {\n      min = state.lastIntValue;\n      if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {\n        max = state.lastIntValue;\n      }\n      if (state.eat(0x7D /* } */)) {\n        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n        if (max !== -1 && max < min && !noError) {\n          state.raise(\"numbers out of order in {} quantifier\");\n        }\n        return true\n      }\n    }\n    if (state.switchU && !noError) {\n      state.raise(\"Incomplete quantifier\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\npp$1.regexp_eatAtom = function(state) {\n  return (\n    this.regexp_eatPatternCharacters(state) ||\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state)\n  )\n};\npp$1.regexp_eatReverseSolidusAtomEscape = function(state) {\n  var start = state.pos;\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatAtomEscape(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$1.regexp_eatUncapturingGroup = function(state) {\n  var start = state.pos;\n  if (state.eat(0x28 /* ( */)) {\n    if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {\n      this.regexp_disjunction(state);\n      if (state.eat(0x29 /* ) */)) {\n        return true\n      }\n      state.raise(\"Unterminated group\");\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$1.regexp_eatCapturingGroup = function(state) {\n  if (state.eat(0x28 /* ( */)) {\n    if (this.options.ecmaVersion >= 9) {\n      this.regexp_groupSpecifier(state);\n    } else if (state.current() === 0x3F /* ? */) {\n      state.raise(\"Invalid group\");\n    }\n    this.regexp_disjunction(state);\n    if (state.eat(0x29 /* ) */)) {\n      state.numCapturingParens += 1;\n      return true\n    }\n    state.raise(\"Unterminated group\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\npp$1.regexp_eatExtendedAtom = function(state) {\n  return (\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state) ||\n    this.regexp_eatInvalidBracedQuantifier(state) ||\n    this.regexp_eatExtendedPatternCharacter(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\npp$1.regexp_eatInvalidBracedQuantifier = function(state) {\n  if (this.regexp_eatBracedQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\npp$1.regexp_eatSyntaxCharacter = function(state) {\n  var ch = state.current();\n  if (isSyntaxCharacter(ch)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isSyntaxCharacter(ch) {\n  return (\n    ch === 0x24 /* $ */ ||\n    ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||\n    ch === 0x2E /* . */ ||\n    ch === 0x3F /* ? */ ||\n    ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||\n    ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n// But eat eager.\npp$1.regexp_eatPatternCharacters = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n    state.advance();\n  }\n  return state.pos !== start\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\npp$1.regexp_eatExtendedPatternCharacter = function(state) {\n  var ch = state.current();\n  if (\n    ch !== -1 &&\n    ch !== 0x24 /* $ */ &&\n    !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&\n    ch !== 0x2E /* . */ &&\n    ch !== 0x3F /* ? */ &&\n    ch !== 0x5B /* [ */ &&\n    ch !== 0x5E /* ^ */ &&\n    ch !== 0x7C /* | */\n  ) {\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// GroupSpecifier ::\n//   [empty]\n//   `?` GroupName\npp$1.regexp_groupSpecifier = function(state) {\n  if (state.eat(0x3F /* ? */)) {\n    if (this.regexp_eatGroupName(state)) {\n      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n        state.raise(\"Duplicate capture group name\");\n      }\n      state.groupNames.push(state.lastStringValue);\n      return\n    }\n    state.raise(\"Invalid group\");\n  }\n};\n\n// GroupName ::\n//   `<` RegExpIdentifierName `>`\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$1.regexp_eatGroupName = function(state) {\n  state.lastStringValue = \"\";\n  if (state.eat(0x3C /* < */)) {\n    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {\n      return true\n    }\n    state.raise(\"Invalid capture group name\");\n  }\n  return false\n};\n\n// RegExpIdentifierName ::\n//   RegExpIdentifierStart\n//   RegExpIdentifierName RegExpIdentifierPart\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$1.regexp_eatRegExpIdentifierName = function(state) {\n  state.lastStringValue = \"\";\n  if (this.regexp_eatRegExpIdentifierStart(state)) {\n    state.lastStringValue += codePointToString$1(state.lastIntValue);\n    while (this.regexp_eatRegExpIdentifierPart(state)) {\n      state.lastStringValue += codePointToString$1(state.lastIntValue);\n    }\n    return true\n  }\n  return false\n};\n\n// RegExpIdentifierStart ::\n//   UnicodeIDStart\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\npp$1.regexp_eatRegExpIdentifierStart = function(state) {\n  var start = state.pos;\n  var forceU = this.options.ecmaVersion >= 11;\n  var ch = state.current(forceU);\n  state.advance(forceU);\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierStart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierStart(ch) {\n  return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */\n}\n\n// RegExpIdentifierPart ::\n//   UnicodeIDContinue\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[+U]\n//   <ZWNJ>\n//   <ZWJ>\npp$1.regexp_eatRegExpIdentifierPart = function(state) {\n  var start = state.pos;\n  var forceU = this.options.ecmaVersion >= 11;\n  var ch = state.current(forceU);\n  state.advance(forceU);\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierPart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierPart(ch) {\n  return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\npp$1.regexp_eatAtomEscape = function(state) {\n  if (\n    this.regexp_eatBackReference(state) ||\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state) ||\n    (state.switchN && this.regexp_eatKGroupName(state))\n  ) {\n    return true\n  }\n  if (state.switchU) {\n    // Make the same message as V8.\n    if (state.current() === 0x63 /* c */) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.raise(\"Invalid escape\");\n  }\n  return false\n};\npp$1.regexp_eatBackReference = function(state) {\n  var start = state.pos;\n  if (this.regexp_eatDecimalEscape(state)) {\n    var n = state.lastIntValue;\n    if (state.switchU) {\n      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n      if (n > state.maxBackReference) {\n        state.maxBackReference = n;\n      }\n      return true\n    }\n    if (n <= state.numCapturingParens) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$1.regexp_eatKGroupName = function(state) {\n  if (state.eat(0x6B /* k */)) {\n    if (this.regexp_eatGroupName(state)) {\n      state.backReferenceNames.push(state.lastStringValue);\n      return true\n    }\n    state.raise(\"Invalid named reference\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\npp$1.regexp_eatCharacterEscape = function(state) {\n  return (\n    this.regexp_eatControlEscape(state) ||\n    this.regexp_eatCControlLetter(state) ||\n    this.regexp_eatZero(state) ||\n    this.regexp_eatHexEscapeSequence(state) ||\n    this.regexp_eatRegExpUnicodeEscapeSequence(state, false) ||\n    (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||\n    this.regexp_eatIdentityEscape(state)\n  )\n};\npp$1.regexp_eatCControlLetter = function(state) {\n  var start = state.pos;\n  if (state.eat(0x63 /* c */)) {\n    if (this.regexp_eatControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$1.regexp_eatZero = function(state) {\n  if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {\n    state.lastIntValue = 0;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\npp$1.regexp_eatControlEscape = function(state) {\n  var ch = state.current();\n  if (ch === 0x74 /* t */) {\n    state.lastIntValue = 0x09; /* \\t */\n    state.advance();\n    return true\n  }\n  if (ch === 0x6E /* n */) {\n    state.lastIntValue = 0x0A; /* \\n */\n    state.advance();\n    return true\n  }\n  if (ch === 0x76 /* v */) {\n    state.lastIntValue = 0x0B; /* \\v */\n    state.advance();\n    return true\n  }\n  if (ch === 0x66 /* f */) {\n    state.lastIntValue = 0x0C; /* \\f */\n    state.advance();\n    return true\n  }\n  if (ch === 0x72 /* r */) {\n    state.lastIntValue = 0x0D; /* \\r */\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\npp$1.regexp_eatControlLetter = function(state) {\n  var ch = state.current();\n  if (isControlLetter(ch)) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isControlLetter(ch) {\n  return (\n    (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\npp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {\n  if ( forceU === void 0 ) forceU = false;\n\n  var start = state.pos;\n  var switchU = forceU || state.switchU;\n\n  if (state.eat(0x75 /* u */)) {\n    if (this.regexp_eatFixedHexDigits(state, 4)) {\n      var lead = state.lastIntValue;\n      if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n        var leadSurrogateEnd = state.pos;\n        if (state.eat(0x5C /* \\ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {\n          var trail = state.lastIntValue;\n          if (trail >= 0xDC00 && trail <= 0xDFFF) {\n            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n            return true\n          }\n        }\n        state.pos = leadSurrogateEnd;\n        state.lastIntValue = lead;\n      }\n      return true\n    }\n    if (\n      switchU &&\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatHexDigits(state) &&\n      state.eat(0x7D /* } */) &&\n      isValidUnicode(state.lastIntValue)\n    ) {\n      return true\n    }\n    if (switchU) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.pos = start;\n  }\n\n  return false\n};\nfunction isValidUnicode(ch) {\n  return ch >= 0 && ch <= 0x10FFFF\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\npp$1.regexp_eatIdentityEscape = function(state) {\n  if (state.switchU) {\n    if (this.regexp_eatSyntaxCharacter(state)) {\n      return true\n    }\n    if (state.eat(0x2F /* / */)) {\n      state.lastIntValue = 0x2F; /* / */\n      return true\n    }\n    return false\n  }\n\n  var ch = state.current();\n  if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\npp$1.regexp_eatDecimalEscape = function(state) {\n  state.lastIntValue = 0;\n  var ch = state.current();\n  if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {\n    do {\n      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n      state.advance();\n    } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\npp$1.regexp_eatCharacterClassEscape = function(state) {\n  var ch = state.current();\n\n  if (isCharacterClassEscape(ch)) {\n    state.lastIntValue = -1;\n    state.advance();\n    return true\n  }\n\n  if (\n    state.switchU &&\n    this.options.ecmaVersion >= 9 &&\n    (ch === 0x50 /* P */ || ch === 0x70 /* p */)\n  ) {\n    state.lastIntValue = -1;\n    state.advance();\n    if (\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatUnicodePropertyValueExpression(state) &&\n      state.eat(0x7D /* } */)\n    ) {\n      return true\n    }\n    state.raise(\"Invalid property name\");\n  }\n\n  return false\n};\nfunction isCharacterClassEscape(ch) {\n  return (\n    ch === 0x64 /* d */ ||\n    ch === 0x44 /* D */ ||\n    ch === 0x73 /* s */ ||\n    ch === 0x53 /* S */ ||\n    ch === 0x77 /* w */ ||\n    ch === 0x57 /* W */\n  )\n}\n\n// UnicodePropertyValueExpression ::\n//   UnicodePropertyName `=` UnicodePropertyValue\n//   LoneUnicodePropertyNameOrValue\npp$1.regexp_eatUnicodePropertyValueExpression = function(state) {\n  var start = state.pos;\n\n  // UnicodePropertyName `=` UnicodePropertyValue\n  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {\n    var name = state.lastStringValue;\n    if (this.regexp_eatUnicodePropertyValue(state)) {\n      var value = state.lastStringValue;\n      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n      return true\n    }\n  }\n  state.pos = start;\n\n  // LoneUnicodePropertyNameOrValue\n  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n    var nameOrValue = state.lastStringValue;\n    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n    return true\n  }\n  return false\n};\npp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n  if (!hasOwn(state.unicodeProperties.nonBinary, name))\n    { state.raise(\"Invalid property name\"); }\n  if (!state.unicodeProperties.nonBinary[name].test(value))\n    { state.raise(\"Invalid property value\"); }\n};\npp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n  if (!state.unicodeProperties.binary.test(nameOrValue))\n    { state.raise(\"Invalid property name\"); }\n};\n\n// UnicodePropertyName ::\n//   UnicodePropertyNameCharacters\npp$1.regexp_eatUnicodePropertyName = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyNameCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString$1(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyNameCharacter(ch) {\n  return isControlLetter(ch) || ch === 0x5F /* _ */\n}\n\n// UnicodePropertyValue ::\n//   UnicodePropertyValueCharacters\npp$1.regexp_eatUnicodePropertyValue = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyValueCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString$1(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyValueCharacter(ch) {\n  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)\n}\n\n// LoneUnicodePropertyNameOrValue ::\n//   UnicodePropertyValueCharacters\npp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n  return this.regexp_eatUnicodePropertyValue(state)\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\npp$1.regexp_eatCharacterClass = function(state) {\n  if (state.eat(0x5B /* [ */)) {\n    state.eat(0x5E /* ^ */);\n    this.regexp_classRanges(state);\n    if (state.eat(0x5D /* ] */)) {\n      return true\n    }\n    // Unreachable since it threw \"unterminated regular expression\" error before.\n    state.raise(\"Unterminated character class\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\npp$1.regexp_classRanges = function(state) {\n  while (this.regexp_eatClassAtom(state)) {\n    var left = state.lastIntValue;\n    if (state.eat(0x2D /* - */) && this.regexp_eatClassAtom(state)) {\n      var right = state.lastIntValue;\n      if (state.switchU && (left === -1 || right === -1)) {\n        state.raise(\"Invalid character class\");\n      }\n      if (left !== -1 && right !== -1 && left > right) {\n        state.raise(\"Range out of order in character class\");\n      }\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\npp$1.regexp_eatClassAtom = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatClassEscape(state)) {\n      return true\n    }\n    if (state.switchU) {\n      // Make the same message as V8.\n      var ch$1 = state.current();\n      if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {\n        state.raise(\"Invalid class escape\");\n      }\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n\n  var ch = state.current();\n  if (ch !== 0x5D /* ] */) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\npp$1.regexp_eatClassEscape = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x62 /* b */)) {\n    state.lastIntValue = 0x08; /* <BS> */\n    return true\n  }\n\n  if (state.switchU && state.eat(0x2D /* - */)) {\n    state.lastIntValue = 0x2D; /* - */\n    return true\n  }\n\n  if (!state.switchU && state.eat(0x63 /* c */)) {\n    if (this.regexp_eatClassControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  return (\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\npp$1.regexp_eatClassControlLetter = function(state) {\n  var ch = state.current();\n  if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$1.regexp_eatHexEscapeSequence = function(state) {\n  var start = state.pos;\n  if (state.eat(0x78 /* x */)) {\n    if (this.regexp_eatFixedHexDigits(state, 2)) {\n      return true\n    }\n    if (state.switchU) {\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\npp$1.regexp_eatDecimalDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isDecimalDigit(ch = state.current())) {\n    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isDecimalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\npp$1.regexp_eatHexDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isHexDigit(ch = state.current())) {\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isHexDigit(ch) {\n  return (\n    (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||\n    (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)\n  )\n}\nfunction hexToInt(ch) {\n  if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {\n    return 10 + (ch - 0x41 /* A */)\n  }\n  if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {\n    return 10 + (ch - 0x61 /* a */)\n  }\n  return ch - 0x30 /* 0 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n// Allows only 0-377(octal) i.e. 0-255(decimal).\npp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {\n  if (this.regexp_eatOctalDigit(state)) {\n    var n1 = state.lastIntValue;\n    if (this.regexp_eatOctalDigit(state)) {\n      var n2 = state.lastIntValue;\n      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n      } else {\n        state.lastIntValue = n1 * 8 + n2;\n      }\n    } else {\n      state.lastIntValue = n1;\n    }\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\npp$1.regexp_eatOctalDigit = function(state) {\n  var ch = state.current();\n  if (isOctalDigit(ch)) {\n    state.lastIntValue = ch - 0x30; /* 0 */\n    state.advance();\n    return true\n  }\n  state.lastIntValue = 0;\n  return false\n};\nfunction isOctalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$1.regexp_eatFixedHexDigits = function(state, length) {\n  var start = state.pos;\n  state.lastIntValue = 0;\n  for (var i = 0; i < length; ++i) {\n    var ch = state.current();\n    if (!isHexDigit(ch)) {\n      state.pos = start;\n      return false\n    }\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return true\n};\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations)\n    { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }\n  if (p.options.ranges)\n    { this.range = [p.start, p.end]; }\n};\n\n// ## Tokenizer\n\nvar pp = Parser.prototype;\n\n// Move to the next token\n\npp.next = function(ignoreEscapeSequenceInKeyword) {\n  if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc)\n    { this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + this.type.keyword); }\n  if (this.options.onToken)\n    { this.options.onToken(new Token(this)); }\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp.getToken = function() {\n  this.next();\n  return new Token(this)\n};\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\")\n  { pp[Symbol.iterator] = function() {\n    var this$1$1 = this;\n\n    return {\n      next: function () {\n        var token = this$1$1.getToken();\n        return {\n          done: token.type === types$1.eof,\n          value: token\n        }\n      }\n    }\n  }; }\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp.nextToken = function() {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }\n\n  this.start = this.pos;\n  if (this.options.locations) { this.startLoc = this.curPosition(); }\n  if (this.pos >= this.input.length) { return this.finishToken(types$1.eof) }\n\n  if (curContext.override) { return curContext.override(this) }\n  else { this.readToken(this.fullCharCodeAtPos()); }\n};\n\npp.readToken = function(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n    { return this.readWord() }\n\n  return this.getTokenFromCode(code)\n};\n\npp.fullCharCodeAtPos = function() {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 0xd7ff || code >= 0xdc00) { return code }\n  var next = this.input.charCodeAt(this.pos + 1);\n  return next <= 0xdbff || next >= 0xe000 ? code : (code << 10) + next - 0x35fdc00\n};\n\npp.skipBlockComment = function() {\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n  if (end === -1) { this.raise(this.pos - 2, \"Unterminated comment\"); }\n  this.pos = end + 2;\n  if (this.options.locations) {\n    for (var nextBreak = (void 0), pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1;) {\n      ++this.curLine;\n      pos = this.lineStart = nextBreak;\n    }\n  }\n  if (this.options.onComment)\n    { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\npp.skipLineComment = function(startSkip) {\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n  while (this.pos < this.input.length && !isNewLine(ch)) {\n    ch = this.input.charCodeAt(++this.pos);\n  }\n  if (this.options.onComment)\n    { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp.skipSpace = function() {\n  loop: while (this.pos < this.input.length) {\n    var ch = this.input.charCodeAt(this.pos);\n    switch (ch) {\n    case 32: case 160: // ' '\n      ++this.pos;\n      break\n    case 13:\n      if (this.input.charCodeAt(this.pos + 1) === 10) {\n        ++this.pos;\n      }\n    case 10: case 8232: case 8233:\n      ++this.pos;\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      break\n    case 47: // '/'\n      switch (this.input.charCodeAt(this.pos + 1)) {\n      case 42: // '*'\n        this.skipBlockComment();\n        break\n      case 47:\n        this.skipLineComment(2);\n        break\n      default:\n        break loop\n      }\n      break\n    default:\n      if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n        ++this.pos;\n      } else {\n        break loop\n      }\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp.finishToken = function(type, val) {\n  this.end = this.pos;\n  if (this.options.locations) { this.endLoc = this.curPosition(); }\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp.readToken_dot = function() {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) { return this.readNumber(true) }\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(types$1.ellipsis)\n  } else {\n    ++this.pos;\n    return this.finishToken(types$1.dot)\n  }\n};\n\npp.readToken_slash = function() { // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\n  if (next === 61) { return this.finishOp(types$1.assign, 2) }\n  return this.finishOp(types$1.slash, 1)\n};\n\npp.readToken_mult_modulo_exp = function(code) { // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  var tokentype = code === 42 ? types$1.star : types$1.modulo;\n\n  // exponentiation operator ** and **=\n  if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n    ++size;\n    tokentype = types$1.starstar;\n    next = this.input.charCodeAt(this.pos + 2);\n  }\n\n  if (next === 61) { return this.finishOp(types$1.assign, size + 1) }\n  return this.finishOp(tokentype, size)\n};\n\npp.readToken_pipe_amp = function(code) { // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (this.options.ecmaVersion >= 12) {\n      var next2 = this.input.charCodeAt(this.pos + 2);\n      if (next2 === 61) { return this.finishOp(types$1.assign, 3) }\n    }\n    return this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2)\n  }\n  if (next === 61) { return this.finishOp(types$1.assign, 2) }\n  return this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1)\n};\n\npp.readToken_caret = function() { // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types$1.assign, 2) }\n  return this.finishOp(types$1.bitwiseXOR, 1)\n};\n\npp.readToken_plus_min = function(code) { // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&\n        (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken()\n    }\n    return this.finishOp(types$1.incDec, 2)\n  }\n  if (next === 61) { return this.finishOp(types$1.assign, 2) }\n  return this.finishOp(types$1.plusMin, 1)\n};\n\npp.readToken_lt_gt = function(code) { // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types$1.assign, size + 1) }\n    return this.finishOp(types$1.bitShift, size)\n  }\n  if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&\n      this.input.charCodeAt(this.pos + 3) === 45) {\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken()\n  }\n  if (next === 61) { size = 2; }\n  return this.finishOp(types$1.relational, size)\n};\n\npp.readToken_eq_excl = function(code) { // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types$1.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n    this.pos += 2;\n    return this.finishToken(types$1.arrow)\n  }\n  return this.finishOp(code === 61 ? types$1.eq : types$1.prefix, 1)\n};\n\npp.readToken_question = function() { // '?'\n  var ecmaVersion = this.options.ecmaVersion;\n  if (ecmaVersion >= 11) {\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 46) {\n      var next2 = this.input.charCodeAt(this.pos + 2);\n      if (next2 < 48 || next2 > 57) { return this.finishOp(types$1.questionDot, 2) }\n    }\n    if (next === 63) {\n      if (ecmaVersion >= 12) {\n        var next2$1 = this.input.charCodeAt(this.pos + 2);\n        if (next2$1 === 61) { return this.finishOp(types$1.assign, 3) }\n      }\n      return this.finishOp(types$1.coalesce, 2)\n    }\n  }\n  return this.finishOp(types$1.question, 1)\n};\n\npp.readToken_numberSign = function() { // '#'\n  var ecmaVersion = this.options.ecmaVersion;\n  var code = 35; // '#'\n  if (ecmaVersion >= 13) {\n    ++this.pos;\n    code = this.fullCharCodeAtPos();\n    if (isIdentifierStart(code, true) || code === 92 /* '\\' */) {\n      return this.finishToken(types$1.privateId, this.readWord1())\n    }\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp.getTokenFromCode = function(code) {\n  switch (code) {\n  // The interpretation of a dot depends on whether it is followed\n  // by a digit or another two dots.\n  case 46: // '.'\n    return this.readToken_dot()\n\n  // Punctuation tokens.\n  case 40: ++this.pos; return this.finishToken(types$1.parenL)\n  case 41: ++this.pos; return this.finishToken(types$1.parenR)\n  case 59: ++this.pos; return this.finishToken(types$1.semi)\n  case 44: ++this.pos; return this.finishToken(types$1.comma)\n  case 91: ++this.pos; return this.finishToken(types$1.bracketL)\n  case 93: ++this.pos; return this.finishToken(types$1.bracketR)\n  case 123: ++this.pos; return this.finishToken(types$1.braceL)\n  case 125: ++this.pos; return this.finishToken(types$1.braceR)\n  case 58: ++this.pos; return this.finishToken(types$1.colon)\n\n  case 96: // '`'\n    if (this.options.ecmaVersion < 6) { break }\n    ++this.pos;\n    return this.finishToken(types$1.backQuote)\n\n  case 48: // '0'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number\n    if (this.options.ecmaVersion >= 6) {\n      if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number\n      if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number\n    }\n\n  // Anything else beginning with a digit is an integer, octal\n  // number, or float.\n  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n    return this.readNumber(false)\n\n  // Quotes produce strings.\n  case 34: case 39: // '\"', \"'\"\n    return this.readString(code)\n\n  // Operators are parsed inline in tiny state machines. '=' (61) is\n  // often referred to. `finishOp` simply skips the amount of\n  // characters it is given as second argument, and returns a token\n  // of the type given by its first argument.\n  case 47: // '/'\n    return this.readToken_slash()\n\n  case 37: case 42: // '%*'\n    return this.readToken_mult_modulo_exp(code)\n\n  case 124: case 38: // '|&'\n    return this.readToken_pipe_amp(code)\n\n  case 94: // '^'\n    return this.readToken_caret()\n\n  case 43: case 45: // '+-'\n    return this.readToken_plus_min(code)\n\n  case 60: case 62: // '<>'\n    return this.readToken_lt_gt(code)\n\n  case 61: case 33: // '=!'\n    return this.readToken_eq_excl(code)\n\n  case 63: // '?'\n    return this.readToken_question()\n\n  case 126: // '~'\n    return this.finishOp(types$1.prefix, 1)\n\n  case 35: // '#'\n    return this.readToken_numberSign()\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp.finishOp = function(type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str)\n};\n\npp.readRegexp = function() {\n  var escaped, inClass, start = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(start, \"Unterminated regular expression\"); }\n    var ch = this.input.charAt(this.pos);\n    if (lineBreak.test(ch)) { this.raise(start, \"Unterminated regular expression\"); }\n    if (!escaped) {\n      if (ch === \"[\") { inClass = true; }\n      else if (ch === \"]\" && inClass) { inClass = false; }\n      else if (ch === \"/\" && !inClass) { break }\n      escaped = ch === \"\\\\\";\n    } else { escaped = false; }\n    ++this.pos;\n  }\n  var pattern = this.input.slice(start, this.pos);\n  ++this.pos;\n  var flagsStart = this.pos;\n  var flags = this.readWord1();\n  if (this.containsEsc) { this.unexpected(flagsStart); }\n\n  // Validate pattern\n  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n  state.reset(start, pattern, flags);\n  this.validateRegExpFlags(state);\n  this.validateRegExpPattern(state);\n\n  // Create Literal#value property value.\n  var value = null;\n  try {\n    value = new RegExp(pattern, flags);\n  } catch (e) {\n    // ESTree requires null if it failed to instantiate RegExp object.\n    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n  }\n\n  return this.finishToken(types$1.regexp, {pattern: pattern, flags: flags, value: value})\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {\n  // `len` is used for character escape sequences. In that case, disallow separators.\n  var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined;\n\n  // `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x,0o,0b)\n  // and isn't fraction part nor exponent part. In that case, if the first digit\n  // is zero then disallow separators.\n  var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;\n\n  var start = this.pos, total = 0, lastCode = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {\n    var code = this.input.charCodeAt(this.pos), val = (void 0);\n\n    if (allowSeparators && code === 95) {\n      if (isLegacyOctalNumericLiteral) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed in legacy octal numeric literals\"); }\n      if (lastCode === 95) { this.raiseRecoverable(this.pos, \"Numeric separator must be exactly one underscore\"); }\n      if (i === 0) { this.raiseRecoverable(this.pos, \"Numeric separator is not allowed at the first of digits\"); }\n      lastCode = code;\n      continue\n    }\n\n    if (code >= 97) { val = code - 97 + 10; } // a\n    else if (code >= 65) { val = code - 65 + 10; } // A\n    else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9\n    else { val = Infinity; }\n    if (val >= radix) { break }\n    lastCode = code;\n    total = total * radix + val;\n  }\n\n  if (allowSeparators && lastCode === 95) { this.raiseRecoverable(this.pos - 1, \"Numeric separator is not allowed at the last of digits\"); }\n  if (this.pos === start || len != null && this.pos - start !== len) { return null }\n\n  return total\n};\n\nfunction stringToNumber(str, isLegacyOctalNumericLiteral) {\n  if (isLegacyOctalNumericLiteral) {\n    return parseInt(str, 8)\n  }\n\n  // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.\n  return parseFloat(str.replace(/_/g, \"\"))\n}\n\nfunction stringToBigInt(str) {\n  if (typeof BigInt !== \"function\") {\n    return null\n  }\n\n  // `BigInt(value)` throws syntax error if the string contains numeric separators.\n  return BigInt(str.replace(/_/g, \"\"))\n}\n\npp.readRadixNumber = function(radix) {\n  var start = this.pos;\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) { this.raise(this.start + 2, \"Expected number in radix \" + radix); }\n  if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {\n    val = stringToBigInt(this.input.slice(start, this.pos));\n    ++this.pos;\n  } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n  return this.finishToken(types$1.num, val)\n};\n\n// Read an integer, octal integer, or floating-point number.\n\npp.readNumber = function(startsWithDot) {\n  var start = this.pos;\n  if (!startsWithDot && this.readInt(10, undefined, true) === null) { this.raise(start, \"Invalid number\"); }\n  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n  if (octal && this.strict) { this.raise(start, \"Invalid number\"); }\n  var next = this.input.charCodeAt(this.pos);\n  if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {\n    var val$1 = stringToBigInt(this.input.slice(start, this.pos));\n    ++this.pos;\n    if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n    return this.finishToken(types$1.num, val$1)\n  }\n  if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }\n  if (next === 46 && !octal) { // '.'\n    ++this.pos;\n    this.readInt(10);\n    next = this.input.charCodeAt(this.pos);\n  }\n  if ((next === 69 || next === 101) && !octal) { // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) { ++this.pos; } // '+-'\n    if (this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n  }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n\n  var val = stringToNumber(this.input.slice(start, this.pos), octal);\n  return this.finishToken(types$1.num, val)\n};\n\n// Read a string value, interpreting backslash-escapes.\n\npp.readCodePoint = function() {\n  var ch = this.input.charCodeAt(this.pos), code;\n\n  if (ch === 123) { // '{'\n    if (this.options.ecmaVersion < 6) { this.unexpected(); }\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n    ++this.pos;\n    if (code > 0x10FFFF) { this.invalidStringToken(codePos, \"Code point out of bounds\"); }\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code\n};\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) { return String.fromCharCode(code) }\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n}\n\npp.readString = function(quote) {\n  var out = \"\", chunkStart = ++this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated string constant\"); }\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === quote) { break }\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(false);\n      chunkStart = this.pos;\n    } else if (ch === 0x2028 || ch === 0x2029) {\n      if (this.options.ecmaVersion < 10) { this.raise(this.start, \"Unterminated string constant\"); }\n      ++this.pos;\n      if (this.options.locations) {\n        this.curLine++;\n        this.lineStart = this.pos;\n      }\n    } else {\n      if (isNewLine(ch)) { this.raise(this.start, \"Unterminated string constant\"); }\n      ++this.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(types$1.string, out)\n};\n\n// Reads template string tokens.\n\nvar INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\npp.tryReadTemplateToken = function() {\n  this.inTemplateElement = true;\n  try {\n    this.readTmplToken();\n  } catch (err) {\n    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n      this.readInvalidTemplateToken();\n    } else {\n      throw err\n    }\n  }\n\n  this.inTemplateElement = false;\n};\n\npp.invalidStringToken = function(position, message) {\n  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n    throw INVALID_TEMPLATE_ESCAPE_ERROR\n  } else {\n    this.raise(position, message);\n  }\n};\n\npp.readTmplToken = function() {\n  var out = \"\", chunkStart = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) { this.raise(this.start, \"Unterminated template\"); }\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'\n      if (this.pos === this.start && (this.type === types$1.template || this.type === types$1.invalidTemplate)) {\n        if (ch === 36) {\n          this.pos += 2;\n          return this.finishToken(types$1.dollarBraceL)\n        } else {\n          ++this.pos;\n          return this.finishToken(types$1.backQuote)\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos);\n      return this.finishToken(types$1.template, out)\n    }\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(true);\n      chunkStart = this.pos;\n    } else if (isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.pos);\n      ++this.pos;\n      switch (ch) {\n      case 13:\n        if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; }\n      case 10:\n        out += \"\\n\";\n        break\n      default:\n        out += String.fromCharCode(ch);\n        break\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      chunkStart = this.pos;\n    } else {\n      ++this.pos;\n    }\n  }\n};\n\n// Reads a template token to search for the end, without validating any escape sequences\npp.readInvalidTemplateToken = function() {\n  for (; this.pos < this.input.length; this.pos++) {\n    switch (this.input[this.pos]) {\n    case \"\\\\\":\n      ++this.pos;\n      break\n\n    case \"$\":\n      if (this.input[this.pos + 1] !== \"{\") {\n        break\n      }\n\n    // falls through\n    case \"`\":\n      return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos))\n\n    // no default\n    }\n  }\n  this.raise(this.start, \"Unterminated template\");\n};\n\n// Used to read escaped characters\n\npp.readEscapedChar = function(inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n  switch (ch) {\n  case 110: return \"\\n\" // 'n' -> '\\n'\n  case 114: return \"\\r\" // 'r' -> '\\r'\n  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n  case 117: return codePointToString(this.readCodePoint()) // 'u'\n  case 116: return \"\\t\" // 't' -> '\\t'\n  case 98: return \"\\b\" // 'b' -> '\\b'\n  case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n  case 102: return \"\\f\" // 'f' -> '\\f'\n  case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\\r\\n'\n  case 10: // ' \\n'\n    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n    return \"\"\n  case 56:\n  case 57:\n    if (this.strict) {\n      this.invalidStringToken(\n        this.pos - 1,\n        \"Invalid escape sequence\"\n      );\n    }\n    if (inTemplate) {\n      var codePos = this.pos - 1;\n\n      this.invalidStringToken(\n        codePos,\n        \"Invalid escape sequence in template string\"\n      );\n\n      return null\n    }\n  default:\n    if (ch >= 48 && ch <= 55) {\n      var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n      var octal = parseInt(octalStr, 8);\n      if (octal > 255) {\n        octalStr = octalStr.slice(0, -1);\n        octal = parseInt(octalStr, 8);\n      }\n      this.pos += octalStr.length - 1;\n      ch = this.input.charCodeAt(this.pos);\n      if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n        this.invalidStringToken(\n          this.pos - 1 - octalStr.length,\n          inTemplate\n            ? \"Octal literal in template string\"\n            : \"Octal literal in strict mode\"\n        );\n      }\n      return String.fromCharCode(octal)\n    }\n    if (isNewLine(ch)) {\n      // Unicode new line characters after \\ get removed from output in both\n      // template literals and strings\n      return \"\"\n    }\n    return String.fromCharCode(ch)\n  }\n};\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp.readHexChar = function(len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n  if (n === null) { this.invalidStringToken(codePos, \"Bad character escape sequence\"); }\n  return n\n};\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp.readWord1 = function() {\n  this.containsEsc = false;\n  var word = \"\", first = true, chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this.fullCharCodeAtPos();\n    if (isIdentifierChar(ch, astral)) {\n      this.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) { // \"\\\"\n      this.containsEsc = true;\n      word += this.input.slice(chunkStart, this.pos);\n      var escStart = this.pos;\n      if (this.input.charCodeAt(++this.pos) !== 117) // \"u\"\n        { this.invalidStringToken(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\"); }\n      ++this.pos;\n      var esc = this.readCodePoint();\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n        { this.invalidStringToken(escStart, \"Invalid Unicode escape\"); }\n      word += codePointToString(esc);\n      chunkStart = this.pos;\n    } else {\n      break\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart, this.pos)\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp.readWord = function() {\n  var word = this.readWord1();\n  var type = types$1.name;\n  if (this.keywords.test(word)) {\n    type = keywords[word];\n  }\n  return this.finishToken(type, word)\n};\n\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n\nvar version = \"8.7.0\";\n\nParser.acorn = {\n  Parser: Parser,\n  version: version,\n  defaultOptions: defaultOptions,\n  Position: Position,\n  SourceLocation: SourceLocation,\n  getLineInfo: getLineInfo,\n  Node: Node,\n  TokenType: TokenType,\n  tokTypes: types$1,\n  keywordTypes: keywords,\n  TokContext: TokContext,\n  tokContexts: types,\n  isIdentifierChar: isIdentifierChar,\n  isIdentifierStart: isIdentifierStart,\n  Token: Token,\n  isNewLine: isNewLine,\n  lineBreak: lineBreak,\n  lineBreakG: lineBreakG,\n  nonASCIIwhitespace: nonASCIIwhitespace\n};\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return Parser.parse(input, options)\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nfunction parseExpressionAt(input, pos, options) {\n  return Parser.parseExpressionAt(input, pos, options)\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nfunction tokenizer(input, options) {\n  return Parser.tokenizer(input, options)\n}\n\nexport { Node, Parser, Position, SourceLocation, TokContext, Token, TokenType, defaultOptions, getLineInfo, isIdentifierChar, isIdentifierStart, isNewLine, keywords as keywordTypes, lineBreak, lineBreakG, nonASCIIwhitespace, parse, parseExpressionAt, types as tokContexts, types$1 as tokTypes, tokenizer, version };\n","export default {\n  undefined: 'void(0)',\n  Infinity:  'Number.POSITIVE_INFINITY',\n  NaN:       'Number.NaN',\n  E:         'Math.E',\n  LN2:       'Math.LN2',\n  LN10:      'Math.LN10',\n  LOG2E:     'Math.LOG2E',\n  LOG10E:    'Math.LOG10E',\n  PI:        'Math.PI',\n  SQRT1_2:   'Math.SQRT1_2',\n  SQRT2:     'Math.SQRT2'\n};","import { parse } from 'acorn';\nimport {\n  ArrayPattern,\n  Constant,\n  Function,\n  Identifier,\n  Literal,\n  MemberExpression,\n  ObjectPattern,\n  Op,\n  Parameter,\n  Property\n} from './ast/constants';\nimport { is, isFunctionExpression } from './ast/util';\nimport walk from './ast/walk';\nimport constants from './constants';\nimport rewrite from './rewrite';\nimport { ROW_OBJECT, rowObjectExpression } from './row-object';\nimport {\n  getAggregate, getWindow,\n  hasAggregate, hasFunction, hasWindow\n} from '../op';\n\nimport error from '../util/error';\nimport has from '../util/has';\nimport isArray from '../util/is-array';\nimport isNumber from '../util/is-number';\nimport toString from '../util/to-string';\n\nconst PARSER_OPT = { ecmaVersion: 11 };\nconst DEFAULT_PARAM_ID = '$';\nconst DEFAULT_TUPLE_ID = 'd';\nconst DEFAULT_TUPLE_ID1 = 'd1';\nconst DEFAULT_TUPLE_ID2 = 'd2';\n\nconst NO = msg => (node, ctx) => ctx.error(node, msg + ' not allowed');\nconst ERROR_AGGREGATE = NO('Aggregate function');\nconst ERROR_WINDOW = NO('Window function');\nconst ERROR_ARGUMENT = 'Invalid argument';\nconst ERROR_COLUMN = 'Invalid column reference';\nconst ERROR_AGGRONLY = ERROR_COLUMN + ' (must be input to an aggregate function)';\nconst ERROR_FUNCTION = 'Invalid function call';\nconst ERROR_MEMBER = 'Invalid member expression';\nconst ERROR_OP_PARAMETER = 'Invalid operator parameter';\nconst ERROR_PARAM = 'Invalid param reference';\nconst ERROR_VARIABLE = 'Invalid variable reference';\nconst ERROR_VARIABLE_OP = 'Variable not accessible in operator call';\nconst ERROR_DECLARATION = 'Unsupported variable declaration';\nconst ERROR_DESTRUCTURE = 'Unsupported destructuring pattern';\nconst ERROR_CLOSURE = 'Table expressions do not support closures';\nconst ERROR_ESCAPE = 'Use aq.escape(fn) to use a function as-is (including closures)';\nconst ERROR_USE_PARAMS = 'use table.params({ name: value }) to define dynamic parameters';\nconst ERROR_ADD_FUNCTION = 'use aq.addFunction(name, fn) to add new op functions';\nconst ERROR_VARIABLE_NOTE = `\\nNote: ${ERROR_CLOSURE}. ${ERROR_ESCAPE}, or ${ERROR_USE_PARAMS}.`;\nconst ERROR_FUNCTION_NOTE = `\\nNote: ${ERROR_CLOSURE}. ${ERROR_ESCAPE}, or ${ERROR_ADD_FUNCTION}.`;\nconst ERROR_ROW_OBJECT = `The ${ROW_OBJECT} method is not valid in multi-table expressions.`;\n\nexport default function parseExpression(ctx, spec) {\n  const ast = parseAST(spec);\n  let node = ctx.root = ast;\n  ctx.spec = spec;\n  ctx.tuple = null;\n  ctx.tuple1 = null;\n  ctx.tuple2 = null;\n  ctx.$param = null;\n  ctx.$op = 0;\n  ctx.scope = new Set();\n  ctx.paramsRef = new Map();\n  ctx.columnRef = new Map();\n\n  // parse input column parameters\n  // if no function def, assume default tuple identifiers\n  if (isFunctionExpression(node)) {\n    parseFunction(node, ctx);\n    node = node.body;\n  } else if (ctx.join) {\n    ctx.scope.add(ctx.tuple1 = DEFAULT_TUPLE_ID1);\n    ctx.scope.add(ctx.tuple2 = DEFAULT_TUPLE_ID2);\n    ctx.scope.add(ctx.$param = DEFAULT_PARAM_ID);\n  } else {\n    ctx.scope.add(ctx.tuple = DEFAULT_TUPLE_ID);\n    ctx.scope.add(ctx.$param = DEFAULT_PARAM_ID);\n  }\n\n  // rewrite column references & function calls\n  walk(node, ctx, visitors);\n\n  return ctx.root;\n}\n\nfunction parseAST(expr) {\n  try {\n    const code = expr.field ? fieldRef(expr)\n      : isArray(expr) ? toString(expr)\n      : expr;\n    return parse(`expr=(${code})`, PARSER_OPT).body[0].expression.right;\n  } catch (err) {\n    error(`Expression parse error: ${expr+''}`, err);\n  }\n}\n\nfunction fieldRef(expr) {\n  const col = JSON.stringify(expr+'');\n  return !(expr.table || 0) ? `d=>d[${col}]` : `(a,b)=>b[${col}]`;\n}\n\nconst visitors = {\n  FunctionDeclaration: NO('Function definitions'),\n  ForStatement: NO('For loops'),\n  ForOfStatement: NO('For-of loops'),\n  ForInStatement: NO('For-in loops'),\n  WhileStatement: NO('While loops'),\n  DoWhileStatement: NO('Do-while loops'),\n  AwaitExpression: NO('Await expressions'),\n  ArrowFunctionExpression: NO('Function definitions'),\n  AssignmentExpression: NO('Assignments'),\n  FunctionExpression: NO('Function definitions'),\n  NewExpression: NO('Use of \"new\"'),\n  UpdateExpression: NO('Update expressions'),\n\n  VariableDeclarator(node, ctx) {\n    handleDeclaration(node.id, ctx);\n  },\n  Identifier(node, ctx, parent) {\n    if (handleIdentifier(node, ctx, parent) && !ctx.scope.has(node.name)) {\n      // handle identifier passed responsibility here\n      // raise error if identifier not defined in scope\n      ctx.error(node, ERROR_VARIABLE, ERROR_VARIABLE_NOTE);\n    }\n  },\n  CallExpression(node, ctx) {\n    const name = functionName(node.callee);\n    const def = getAggregate(name) || getWindow(name);\n\n    // parse operator and rewrite invocation\n    if (def) {\n      if ((ctx.join || ctx.aggregate === false) && hasAggregate(def)) {\n        ERROR_AGGREGATE(node, ctx);\n      }\n      if ((ctx.join || ctx.window === false) && hasWindow(def)) {\n        ERROR_WINDOW(node, ctx);\n      }\n\n      ctx.$op = 1;\n      if (ctx.ast) {\n        updateFunctionNode(node, name, ctx);\n        node.arguments.forEach(arg => walk(arg, ctx, opVisitors));\n      } else {\n        const op = ctx.op(parseOperator(ctx, def, name, node.arguments));\n        Object.assign(node, { type: Op, name: op.id });\n      }\n      ctx.$op = 0;\n      return false;\n    } else if (hasFunction(name)) {\n      updateFunctionNode(node, name, ctx);\n    } else {\n      ctx.error(node, ERROR_FUNCTION, ERROR_FUNCTION_NOTE);\n    }\n  },\n  MemberExpression(node, ctx, parent) {\n    const { object, property } = node;\n\n    // bail if left head is not an identifier\n    // in this case we will recurse and handle it later\n    if (!is(Identifier, object)) return;\n    const { name } = object;\n\n    // allow use of Math prefix to access constant values\n    if (isMath(node) && is(Identifier, property)\n        && has(constants, property.name)) {\n      updateConstantNode(node, property.name);\n      return;\n    }\n\n    const index = name === ctx.tuple ? 0\n      : name === ctx.tuple1 ? 1\n      : name === ctx.tuple2 ? 2\n      : -1;\n\n    if (index >= 0) {\n      // replace member expression with column ref\n      return spliceMember(node, index, ctx, checkColumn, parent);\n    } else if (name === ctx.$param) {\n      // replace member expression with param ref\n      return spliceMember(node, index, ctx, checkParam);\n    } else if (ctx.paramsRef.has(name)) {\n      updateParameterNode(node, ctx.paramsRef.get(name));\n    } else if (ctx.columnRef.has(name)) {\n      updateColumnNode(object, name, ctx, node);\n    } else if (has(ctx.params, name)) {\n      updateParameterNode(object, name);\n    }\n  }\n};\n\nfunction spliceMember(node, index, ctx, check, parent) {\n  const { property, computed } = node;\n  let name;\n\n  if (!computed) {\n    name = property.name;\n  } else if (is(Literal, property)) {\n    name = property.value;\n  } else try {\n    name = ctx.param(property);\n  } catch (e) {\n    ctx.error(node, ERROR_MEMBER);\n  }\n\n  check(node, name, index, ctx, parent);\n  return false;\n}\n\nconst opVisitors = {\n  ...visitors,\n  VariableDeclarator: NO('Variable declaration in operator call'),\n  Identifier(node, ctx, parent) {\n    if (handleIdentifier(node, ctx, parent)) {\n      ctx.error(node, ERROR_VARIABLE_OP);\n    }\n  },\n  CallExpression(node, ctx) {\n    const name = functionName(node.callee);\n\n    // rewrite if built-in function\n    if (hasFunction(name)) {\n      updateFunctionNode(node, name, ctx);\n    } else {\n      ctx.error(node, ERROR_FUNCTION, ERROR_FUNCTION_NOTE);\n    }\n  }\n};\n\nfunction parseFunction(node, ctx) {\n  if (node.generator) NO('Generator functions')(node, ctx);\n  if (node.async) NO('Async functions')(node, ctx);\n\n  const { params } = node;\n  const len = params.length;\n  const setc = index => (name, key) => ctx.columnRef.set(name, [key, index]);\n  const setp = (name, key) => ctx.paramsRef.set(name, key);\n\n  if (!len) {\n    // do nothing\n  } else if (ctx.join) {\n    parseRef(ctx, params[0], 'tuple1', setc(1));\n    if (len > 1) parseRef(ctx, params[1], 'tuple2', setc(2));\n    if (len > 2) parseRef(ctx, params[2], '$param', setp);\n  } else {\n    parseRef(ctx, params[0], 'tuple', setc(0));\n    if (len > 1) parseRef(ctx, params[1], '$param', setp);\n  }\n\n  ctx.root = node.body;\n}\n\nfunction parseRef(ctx, node, refName, alias) {\n  if (is(Identifier, node)) {\n    ctx.scope.add(node.name);\n    ctx[refName] = node.name;\n  } else if (is(ObjectPattern, node)) {\n    node.properties.forEach(p => {\n      const key = is(Identifier, p.key) ? p.key.name\n        : is(Literal, p.key) ? p.key.value\n        : ctx.error(p, ERROR_ARGUMENT);\n      if (!is(Identifier, p.value)) {\n        ctx.error(p.value, ERROR_DESTRUCTURE);\n      }\n      alias(p.value.name, key);\n    });\n  }\n}\n\nfunction parseOperator(ctx, def, name, args) {\n  const fields = [];\n  const params = [];\n  const idxFields = def.param[0] || 0;\n  const idxParams = idxFields + (def.param[1] || 0);\n\n  args.forEach((arg, index) => {\n    if (index < idxFields) {\n      walk(arg, ctx, opVisitors);\n      fields.push(ctx.field(arg));\n    } else if (index < idxParams) {\n      walk(arg, ctx, opVisitors);\n      params.push(ctx.param(arg));\n    } else {\n      ctx.error(arg, ERROR_OP_PARAMETER);\n    }\n  });\n\n  return { name, fields, params, ...(ctx.spec.window || {}) };\n}\n\nfunction functionName(node) {\n  return is(Identifier, node) ? node.name\n    : !is(MemberExpression, node) ? null\n    : isMath(node) ? rewriteMath(node.property.name)\n    : node.property.name;\n}\n\nfunction isMath(node) {\n  return is(Identifier, node.object) && node.object.name === 'Math';\n}\n\nfunction rewriteMath(name) {\n  return name === 'max' ? 'greatest'\n    : name === 'min' ? 'least'\n    : name;\n}\n\nfunction handleIdentifier(node, ctx, parent) {\n  const { name } = node;\n\n  if (is(MemberExpression, parent) && parent.property === node) {\n    // do nothing: check head node, not nested properties\n  } else if (is(Property, parent) && parent.key === node) {\n    // do nothing: identifiers allowed in object expressions\n  } else if (ctx.paramsRef.has(name)) {\n    updateParameterNode(node, ctx.paramsRef.get(name));\n  } else if (ctx.columnRef.has(name)) {\n    updateColumnNode(node, name, ctx, parent);\n  } else if (has(ctx.params, name)) {\n    updateParameterNode(node, name);\n  } else if (has(constants, name)) {\n    updateConstantNode(node, name);\n  } else {\n    return true;\n  }\n}\n\nfunction checkColumn(node, name, index, ctx, parent) {\n  // check column existence if we have a backing table\n  const table = index === 0 ? ctx.table\n    : index > 0 ? ctx.join[index - 1]\n    : null;\n  const col = table && table.column(name);\n  if (table && !col) {\n    ctx.error(node, ERROR_COLUMN);\n  }\n\n  // check if column reference is valid in current context\n  if (ctx.aggronly && !ctx.$op) {\n    ctx.error(node, ERROR_AGGRONLY);\n  }\n\n  // rewrite ast node as a column access\n  rewrite(node, name, index, col, parent);\n}\n\nfunction updateColumnNode(node, key, ctx, parent) {\n  const [name, index] = ctx.columnRef.get(key);\n  checkColumn(node, name, index, ctx, parent);\n}\n\nfunction checkParam(node, name, index, ctx) {\n  if (ctx.params && !has(ctx.params, name)) {\n    ctx.error(node, ERROR_PARAM);\n  }\n  updateParameterNode(node, name);\n}\n\nfunction updateParameterNode(node, name) {\n  node.type = Parameter;\n  node.name = name;\n}\n\nfunction updateConstantNode(node, name) {\n  node.type = Constant;\n  node.name = name;\n  node.raw = constants[name];\n}\n\nfunction updateFunctionNode(node, name, ctx) {\n  if (name === ROW_OBJECT) {\n    const t = ctx.table;\n    if (!t) ctx.error(node, ERROR_ROW_OBJECT);\n    rowObjectExpression(node,\n      node.arguments.length\n        ? node.arguments.map(node => {\n            const col = ctx.param(node);\n            const name = isNumber(col) ? t.columnName(col) : col;\n            if (!t.column(name)) ctx.error(node, ERROR_COLUMN);\n            return name;\n          })\n        : t.columnNames()\n    );\n  } else {\n    node.callee = { type: Function, name };\n  }\n}\n\nfunction handleDeclaration(node, ctx) {\n  if (is(Identifier, node)) {\n    ctx.scope.add(node.name);\n  } else if (is(ArrayPattern, node)) {\n    node.elements.forEach(elm => handleDeclaration(elm, ctx));\n  } else if (is(ObjectPattern, node)) {\n    node.properties.forEach(prop => handleDeclaration(prop.value, ctx));\n  } else {\n    ctx.error(node.id, ERROR_DECLARATION);\n  }\n}","import { Column, Literal, Op } from './ast/constants';\nimport clean from './ast/clean';\nimport { is } from './ast/util';\nimport codegen from './codegen';\nimport compile from './compile';\nimport entries from '../util/entries';\nimport error from '../util/error';\nimport isFunction from '../util/is-function';\nimport isObject from '../util/is-object';\nimport parseEscape from './parse-escape';\nimport parseExpression from './parse-expression';\n\nconst ANNOTATE = { [Column]: 1, [Op]: 1 };\n\nexport default function(input, opt = {}) {\n  const generate = opt.generate || codegen;\n  const compiler = opt.compiler || compile;\n  const params = getParams(opt);\n  const fields = {};\n  const opcall = {};\n  const names = [];\n  const exprs = [];\n  let fieldId = 0;\n  let opId = -1;\n\n  const compileExpr = opt.join ? compiler.join\n    : opt.index == 1 ? compiler.expr2\n    : compiler.expr;\n\n  // parser context\n  const ctx = {\n    op(op) {\n      const key = opKey(op);\n      return opcall[key] || (op.id = ++opId, opcall[key] = op);\n    },\n    field(node) {\n      const code = generate(node);\n      return fields[code] || (fields[code] = ++fieldId);\n    },\n    param(node) {\n      return is(Literal, node)\n        ? node.value\n        : compiler.param(generate(node), params);\n    },\n    value(name, node) {\n      names.push(name);\n      const e = node.escape || (opt.ast\n        ? clean(node)\n        : compileExpr(generate(node), params));\n      exprs.push(e);\n      // annotate expression if it is a direct column or op access\n      // this permits downstream optimizations\n      if (ANNOTATE[node.type] && e !== node && isObject(e)) {\n        e.field = node.name;\n      }\n    },\n    error(node, msg, note = '') {\n      // both expresions and fields are parsed\n      // with added code prefixes of length 6!\n      const i = node.start - 6;\n      const j = node.end - 6;\n      const snippet = String(ctx.spec).slice(i, j);\n      error(`${msg}: \"${snippet}\"${note}`);\n    }\n  };\n\n  // copy all options to context, potentially overwriting methods\n  Object.assign(ctx, opt, { params });\n\n  // parse each expression\n  for (const [name, value] of entries(input)) {\n    ctx.value(\n      name + '',\n      value.escape\n        ? parseEscape(ctx, value, params)\n        : parseExpression(ctx, value)\n    );\n  }\n\n  // return expression asts if requested\n  if (opt.ast) {\n    return { names, exprs };\n  }\n\n  // compile input field accessors\n  const f = [];\n  for (const key in fields) {\n    f[fields[key]] = compiler.expr(key, params);\n  }\n\n  // resolve input fields to operations\n  const ops = Object.values(opcall);\n  ops.forEach(op => op.fields = op.fields.map(id => f[id]));\n\n  return { names, exprs, ops };\n}\n\nfunction opKey(op) {\n  let key = `${op.name}(${op.fields.concat(op.params).join(',')})`;\n  if (op.frame) {\n    const frame = op.frame.map(v => Number.isFinite(v) ? Math.abs(v) : -1);\n    key += `[${frame},${!!op.peers}]`;\n  }\n  return key;\n}\n\nfunction getParams(opt) {\n  return (opt.table ? getTableParams(opt.table)\n    : opt.join ? {\n        ...getTableParams(opt.join[1]),\n        ...getTableParams(opt.join[0])\n      }\n    : {}) || {};\n}\n\nfunction getTableParams(table) {\n  return table && isFunction(table.params) ? table.params() : {};\n}","export const Expr = 'Expr';\nexport const ExprList = 'ExprList';\nexport const ExprNumber = 'ExprNumber';\nexport const ExprObject = 'ExprObject';\nexport const JoinKeys = 'JoinKeys';\nexport const JoinValues = 'JoinValues';\nexport const Options = 'Options';\nexport const OrderbyKeys = 'OrderKeys';\nexport const SelectionList = 'SelectionList';\nexport const TableRef = 'TableRef';\nexport const TableRefList = 'TableRefList';\n\nexport const Descending = 'Descending';\nexport const Query = 'Query';\nexport const Selection = 'Selection';\nexport const Verb = 'Verb';\nexport const Window = 'Window';","import isFunction from '../util/is-function';\n\n/**\n * Annotate an expression in an object wrapper.\n * @param {string|Function|object} expr An expression to annotate.\n * @param {object} properties The properties to annotate with.\n * @return {object} A new wrapped expression object.\n */\nexport default function(expr, properties) {\n  return expr && expr.expr\n    ? new Wrapper({ ...expr, ...properties })\n    : new Wrapper(properties, expr);\n}\n\nclass Wrapper {\n  constructor(properties, expr) {\n    this.expr = expr;\n    Object.assign(this, properties);\n  }\n  toString() {\n    return String(this.expr);\n  }\n  toObject() {\n    return {\n      ...this,\n      expr: this.toString(),\n      ...(isFunction(this.expr) ? { func: true } : {})\n    };\n  }\n}","import wrap from './wrap';\n\n/**\n * Annotate a table expression to indicate descending sort order.\n * @param {string|Function|object} expr The table expression to annotate.\n * @return {object} A wrapped expression indicating descending sort.\n * @example desc('colA')\n * @example desc(d => d.colA)\n */\nexport default function(expr) {\n  return wrap(expr, { desc: true });\n}","import wrap from './wrap';\n\n/**\n * Annotate an expression to indicate it is a string field reference.\n * @param {string|object} expr The column name, or an existing wrapped\n *  expression for a column name.\n * @param {string} [name] The column name to use. If provided, will\n *  overwrite the input expression value.\n * @param {number} [table=0] The table index of the field, in case of\n *  expressions over multiple tables.\n * @return A wrapped expression for a named column.\n * @example field('colA')\n */\nexport default function(expr, name, table = 0) {\n  const props = table ? { field: true, table } : { field: true };\n  return wrap(\n    expr,\n    name ? { expr: name, ...props } : props\n  );\n}","import wrap from './wrap';\n\n/**\n * Annotate a table expression to compute rolling aggregate or window\n * functions within a sliding window frame. For example, to specify a\n * rolling 7-day average centered on the current day, use rolling with\n * a frame value of [-3, 3].\n * @param {string|Function|object} expr The table expression to annotate.\n * @param {[number?, number?]} [frame=[-Infinity, 0]] The sliding window frame\n *  offsets. Each entry indicates an offset from the current value. If an\n *  entry is non-finite, the frame will be unbounded in that direction,\n *  including all preceding or following values. If unspecified, the frame\n *  will include the current values and all preceding values.\n * @param {boolean} [includePeers=false] Indicates if the sliding window frame\n *  should ignore peer (tied) values. If false (the default), the window frame\n *  boundaries are insensitive to peer values. If `true`, the window frame\n *  expands to include all peers. This parameter only affects operations that\n *  depend on the window frame: aggregate functions and the first_value,\n *  last_value, and nth_value window functions.\n * @return A new wrapped expression annotated with rolling window parameters.\n * @example rolling(d => mean(d.colA), [-3, 3])\n * @example rolling(d => last_value(d.colA), null, true)\n */\nexport default function(expr, frame, includePeers) {\n  return wrap(expr, {\n    window: {\n      frame: frame || [-Infinity, 0],\n      peers: !!includePeers\n    }\n  });\n}","import desc from '../helpers/desc';\nimport field from '../helpers/field';\nimport rolling from '../helpers/rolling';\nimport { all, matches, not, range } from '../helpers/selection';\nimport Query from './query';\nimport error from '../util/error';\nimport isArray from '../util/is-array';\nimport isFunction from '../util/is-function';\nimport isNumber from '../util/is-number';\nimport isObject from '../util/is-object';\nimport isString from '../util/is-string';\nimport map from '../util/map-object';\nimport toArray from '../util/to-array';\n\nfunction func(expr) {\n  const f = d => d;\n  f.toString = () => expr;\n  return f;\n}\n\nexport function getTable(catalog, ref) {\n  ref = ref && isFunction(ref.query) ? ref.query() : ref;\n  return ref && isFunction(ref.evaluate)\n    ? ref.evaluate(null, catalog)\n    : catalog(ref);\n}\n\nexport function isSelection(value) {\n  return isObject(value) && (\n    isArray(value.all) ||\n    isArray(value.matches) ||\n    isArray(value.not) ||\n    isArray(value.range)\n  );\n}\n\nexport function toObject(value) {\n  return value && isFunction(value.toObject) ? value.toObject()\n    : isFunction(value) ? { expr: String(value), func: true }\n    : isArray(value) ? value.map(toObject)\n    : isObject(value) ? map(value, _ => toObject(_))\n    : value;\n}\n\nexport function fromObject(value) {\n  return isArray(value) ? value.map(fromObject)\n    : !isObject(value) ? value\n    : isArray(value.verbs) ? Query.from(value)\n    : isArray(value.all) ? all()\n    : isArray(value.range) ? range(...value.range)\n    : isArray(value.match) ? matches(RegExp(...value.match))\n    : isArray(value.not) ? not(value.not.map(toObject))\n    : fromExprObject(value);\n}\n\nfunction fromExprObject(value) {\n  let output = value;\n  let expr = value.expr;\n\n  if (expr != null) {\n    if (value.field === true) {\n      output = expr = field(expr);\n    } else if (value.func === true) {\n      output = expr = func(expr);\n    }\n\n    if (isObject(value.window)) {\n      const { frame, peers } = value.window;\n      output = expr = rolling(expr, frame, peers);\n    }\n\n    if (value.desc === true) {\n      output = desc(expr);\n    }\n  }\n\n  return value === output\n    ? map(value, _ => fromObject(_))\n    : output;\n}\n\nexport function joinKeys(keys) {\n  return isArray(keys) ? keys.map(parseJoinKeys)\n    : keys;\n}\n\nfunction parseJoinKeys(keys) {\n  const list = [];\n\n  toArray(keys).forEach(param => {\n    isNumber(param) ? list.push(param)\n      : isString(param) ? list.push(field(param, null))\n      : isObject(param) && param.expr ? list.push(param)\n      : isFunction(param) ? list.push(param)\n      : error(`Invalid key value: ${param+''}`);\n  });\n\n  return list;\n}\n\nexport function joinValues(values) {\n  return isArray(values)\n    ? values.map(parseJoinValues)\n    : values;\n}\n\nfunction parseJoinValues(values, index) {\n  return index < 2 ? toArray(values) : values;\n}\n\nexport function orderbyKeys(keys) {\n  const list = [];\n\n  keys.forEach(param => {\n    const expr = param.expr != null ? param.expr : param;\n    if (isObject(expr) && !isFunction(expr)) {\n      for (const key in expr) {\n        list.push(expr[key]);\n      }\n    } else {\n      param = isNumber(expr) ? expr\n        : isString(expr) ? field(param)\n        : isFunction(expr) ? param\n        : error(`Invalid orderby field: ${param+''}`);\n      list.push(param);\n    }\n  });\n\n  return list;\n}","import error from '../util/error';\nimport isArray from '../util/is-array';\nimport isFunction from '../util/is-function';\nimport isNumber from '../util/is-number';\nimport isObject from '../util/is-object';\nimport isString from '../util/is-string';\nimport toArray from '../util/to-array';\nimport parse from '../expression/parse';\nimport { isSelection, toObject } from './util';\n\nimport { Column } from '../expression/ast/constants';\nimport {\n  Descending,\n  Expr,\n  ExprList,\n  ExprNumber,\n  ExprObject,\n  JoinKeys,\n  JoinValues,\n  Options,\n  OrderbyKeys,\n  Selection,\n  SelectionList,\n  TableRef,\n  TableRefList,\n  Window\n} from './constants';\n\nconst Methods = {\n  [Expr]: astExpr,\n  [ExprList]: astExprList,\n  [ExprNumber]: astExprNumber,\n  [ExprObject]: astExprObject,\n  [JoinKeys]: astJoinKeys,\n  [JoinValues]: astJoinValues,\n  [OrderbyKeys]: astExprList,\n  [SelectionList]: astSelectionList\n};\n\nexport default function(value, type, propTypes) {\n  return type === TableRef ? astTableRef(value)\n    : type === TableRefList ? value.map(astTableRef)\n    : ast(toObject(value), type, propTypes);\n}\n\nfunction ast(value, type, propTypes) {\n  return type === Options\n    ? (value ? astOptions(value, propTypes) : value)\n    : Methods[type](value);\n}\n\nfunction astOptions(value, types = {}) {\n  const output = {};\n  for (const key in value) {\n    const prop = value[key];\n    output[key] = types[key] ? ast(prop, types[key]) : prop;\n  }\n  return output;\n}\n\nfunction astParse(expr, opt) {\n  return parse({ expr }, { ...opt, ast: true }).exprs[0];\n}\n\nfunction astColumn(name) {\n  return { type: Column, name };\n}\n\nfunction astColumnIndex(index) {\n  return { type: Column, index };\n}\n\nfunction astExprObject(obj, opt) {\n  if (isString(obj)) {\n    return astParse(obj, opt);\n  }\n\n  if (obj.expr) {\n    let ast;\n    if (obj.field === true) {\n      ast = astColumn(obj.expr);\n    } else if (obj.func === true) {\n      ast = astExprObject(obj.expr, opt);\n    }\n    if (ast) {\n      if (obj.desc) {\n        ast = { type: Descending, expr: ast };\n      }\n      if (obj.window) {\n        ast = { type: Window, expr: ast, ...obj.window };\n      }\n      return ast;\n    }\n  }\n\n  return Object.keys(obj)\n    .map(key => ({\n      ...astExprObject(obj[key], opt),\n      as: key\n    }));\n}\n\nfunction astSelection(sel) {\n  const type = Selection;\n  return sel.all ? { type, operator: 'all' }\n    : sel.not ? { type, operator: 'not', arguments: astExprList(sel.not) }\n    : sel.range ? { type, operator: 'range', arguments: astExprList(sel.range) }\n    : sel.matches ? { type, operator: 'matches', arguments: sel.matches }\n    : error('Invalid input');\n}\n\nfunction astSelectionList(arr) {\n  return toArray(arr).map(astSelectionItem).flat();\n}\n\nfunction astSelectionItem(val) {\n  return isSelection(val) ? astSelection(val)\n    : isNumber(val) ? astColumnIndex(val)\n    : isString(val) ? astColumn(val)\n    : isObject(val) ? Object.keys(val)\n      .map(name => ({ type: Column, name, as: val[name] }))\n    : error('Invalid input');\n}\n\nfunction astExpr(val) {\n  return isSelection(val) ? astSelection(val)\n    : isNumber(val) ? astColumnIndex(val)\n    : isString(val) ? astColumn(val)\n    : isObject(val) ? astExprObject(val)\n    : error('Invalid input');\n}\n\nfunction astExprList(arr) {\n  return toArray(arr).map(astExpr).flat();\n}\n\nfunction astExprNumber(val) {\n  return isNumber(val) ? val : astExprObject(val);\n}\n\nfunction astJoinKeys(val) {\n  return isArray(val)\n    ? val.map(astExprList)\n    : astExprObject(val, { join: true });\n}\n\nfunction astJoinValues(val) {\n  return isArray(val)\n    ? val.map((v, i) => i < 2\n        ? astExprList(v)\n        : astExprObject(v, { join: true })\n      )\n    : astExprObject(val, { join: true });\n}\n\nfunction astTableRef(value) {\n  return value && isFunction(value.toAST)\n    ? value.toAST()\n    : value;\n}","import { Verb as VerbType } from './constants';\n\nimport {\n  fromObject,\n  getTable,\n  joinKeys,\n  joinValues,\n  orderbyKeys,\n  toObject\n} from './util';\n\nimport {\n  Expr,\n  ExprList,\n  ExprNumber,\n  ExprObject,\n  JoinKeys,\n  JoinValues,\n  Options,\n  OrderbyKeys,\n  SelectionList,\n  TableRef,\n  TableRefList\n} from './constants';\n\nimport toAST from './to-ast';\n\n/**\n * Model an Arquero verb as a serializable object.\n */\nexport class Verb {\n\n  /**\n   * Construct a new verb instance.\n   * @param {string} verb The verb name.\n   * @param {object[]} schema Schema describing verb parameters.\n   * @param {any[]} params Array of parameter values.\n   */\n  constructor(verb, schema = [], params = []) {\n    this.verb = verb;\n    this.schema = schema;\n    schema.forEach((s, index) => {\n      const type = s.type;\n      const param = params[index];\n      const value = type === JoinKeys ? joinKeys(param)\n        : type === JoinValues ? joinValues(param)\n        : type === OrderbyKeys ? orderbyKeys(param)\n        : param;\n      this[s.name] = value !== undefined ? value : s.default;\n    });\n  }\n\n  /**\n   * Create new verb instance from the given serialized object.\n   * @param {object} object A serialized verb representation, such as\n   *  those generated by Verb.toObject.\n   * @returns {Verb} The instantiated verb.\n   */\n  static from(object) {\n    const verb = Verbs[object.verb];\n    const params = (verb.schema || [])\n      .map(({ name }) => fromObject(object[name]));\n    return verb(...params);\n  }\n\n  /**\n   * Evaluate this verb against a given table and catalog.\n   * @param {Table} table The Arquero table to process.\n   * @param {Function} catalog A table lookup function that accepts a table\n   *  name string as input and returns a corresponding Arquero table.\n   * @returns {Table} The resulting Arquero table.\n   */\n  evaluate(table, catalog) {\n    const params = this.schema.map(({ name, type }) => {\n      const value = this[name];\n      return type === TableRef ? getTable(catalog, value)\n        : type === TableRefList ? value.map(t => getTable(catalog, t))\n        : value;\n    });\n    return table[this.verb](...params);\n  }\n\n  /**\n   * Serialize this verb as a JSON-compatible object. The resulting\n   * object can be passed to Verb.from to re-instantiate this verb.\n   * @returns {object} A JSON-compatible object representing this verb.\n   */\n  toObject() {\n    const obj = { verb: this.verb };\n    this.schema.forEach(({ name }) => {\n      obj[name] = toObject(this[name]);\n    });\n    return obj;\n  }\n\n  /**\n   * Serialize this verb to a JSON-compatible abstract syntax tree.\n   * All table expressions will be parsed and represented as AST instances\n   * using a modified form of the Mozilla JavaScript AST format.\n   * This method can be used to output parsed and serialized representations\n   * to translate Arquero verbs to alternative data processing platforms.\n   * @returns {object} A JSON-compatible abstract syntax tree object.\n   */\n  toAST() {\n    const obj = { type: VerbType, verb: this.verb };\n    this.schema.forEach(({ name, type, props }) => {\n      obj[name] = toAST(this[name], type, props);\n    });\n    return obj;\n  }\n}\n\n/**\n * Verb parameter type.\n * @typedef {Expr|ExprList|ExprNumber|ExprObject|JoinKeys|JoinValues|Options|OrderbyKeys|SelectionList|TableRef|TableRefList} ParamType\n */\n\n/**\n * Verb parameter schema.\n * @typedef {object} ParamDef\n * @property {string} name The name of the parameter.\n * @property {ParamType} type The type of the parameter.\n * @property {{ [key: string]: ParamType }} [props] Types for non-literal properties.\n */\n\n/**\n * Create a new constructors.\n * @param {string} name The name of the verb.\n * @param {ParamDef[]} schema The verb parameter schema.\n * @return {Function} A verb constructor function.\n */\nexport function createVerb(name, schema) {\n  return Object.assign(\n    (...params) => new Verb(name, schema, params),\n    { schema }\n  );\n}\n\n/**\n * A lookup table of verb classes.\n */\nexport const Verbs = {\n  count:      createVerb('count', [\n                { name: 'options', type: Options }\n              ]),\n  derive:     createVerb('derive', [\n                { name: 'values', type: ExprObject },\n                { name: 'options', type: Options,\n                  props: { before: SelectionList, after: SelectionList }\n                }\n              ]),\n  filter:     createVerb('filter', [\n                { name: 'criteria', type: ExprObject }\n              ]),\n  groupby:    createVerb('groupby', [\n                { name: 'keys', type: ExprList }\n              ]),\n  orderby:    createVerb('orderby', [\n                { name: 'keys', type: OrderbyKeys }\n              ]),\n  relocate:   createVerb('relocate', [\n                { name: 'columns', type: SelectionList },\n                { name: 'options', type: Options,\n                  props: { before: SelectionList, after: SelectionList }\n                }\n              ]),\n  rename:     createVerb('rename', [\n                { name: 'columns', type: SelectionList }\n              ]),\n  rollup:     createVerb('rollup', [\n                { name: 'values', type: ExprObject }\n              ]),\n  sample:     createVerb('sample', [\n                { name: 'size', type: ExprNumber },\n                { name: 'options', type: Options, props: { weight: Expr } }\n              ]),\n  select:     createVerb('select', [\n                { name: 'columns', type: SelectionList }\n              ]),\n  ungroup:    createVerb('ungroup'),\n  unorder:    createVerb('unorder'),\n  reify:      createVerb('reify'),\n  dedupe:     createVerb('dedupe', [\n                { name: 'keys', type: ExprList, default: [] }\n              ]),\n  impute:     createVerb('impute', [\n                { name: 'values', type: ExprObject },\n                { name: 'options', type: Options, props: { expand: ExprList } }\n              ]),\n  fold:       createVerb('fold', [\n                { name: 'values', type: ExprList },\n                { name: 'options', type: Options }\n              ]),\n  pivot:      createVerb('pivot', [\n                { name: 'keys', type: ExprList },\n                { name: 'values', type: ExprList },\n                { name: 'options', type: Options }\n              ]),\n  spread:     createVerb('spread', [\n                { name: 'values', type: ExprList },\n                { name: 'options', type: Options }\n              ]),\n  unroll:     createVerb('unroll', [\n                { name: 'values', type: ExprList },\n                { name: 'options', type: Options, props: { drop: ExprList } }\n              ]),\n  lookup:     createVerb('lookup', [\n                { name: 'table', type: TableRef },\n                { name: 'on', type: JoinKeys },\n                { name: 'values', type: ExprList }\n              ]),\n  join:       createVerb('join', [\n                { name: 'table', type: TableRef },\n                { name: 'on', type: JoinKeys },\n                { name: 'values', type: JoinValues },\n                { name: 'options', type: Options }\n              ]),\n  cross:      createVerb('cross', [\n                { name: 'table', type: TableRef },\n                { name: 'values', type: JoinValues },\n                { name: 'options', type: Options }\n              ]),\n  semijoin:   createVerb('semijoin', [\n                { name: 'table', type: TableRef },\n                { name: 'on', type: JoinKeys }\n              ]),\n  antijoin:   createVerb('antijoin', [\n                { name: 'table', type: TableRef },\n                { name: 'on', type: JoinKeys }\n              ]),\n  concat:     createVerb('concat', [\n                { name: 'tables', type: TableRefList }\n              ]),\n  union:      createVerb('union', [\n                { name: 'tables', type: TableRefList }\n              ]),\n  intersect:  createVerb('intersect', [\n                { name: 'tables', type: TableRefList }\n              ]),\n  except:     createVerb('except', [\n                { name: 'tables', type: TableRefList }\n              ])\n};","import Transformable from '../table/transformable';\nimport { Query as QueryType } from './constants';\nimport { Verb, Verbs } from './verb';\n\n/**\n * Create a new query instance. The query interface provides\n * a table-like verb API to construct a query that can be\n * serialized or evaluated against Arquero tables.\n * @param {string} [tableName] The name of the table to query. If\n *  provided, will be used as the default input table to pull from\n *  a provided catalog to run the query against.\n * @return {Query} A new builder instance.\n */\nexport function query(tableName) {\n  return new Query(null, null, tableName);\n}\n\n/**\n * Create a new query instance from a serialized object.\n * @param {object} object A serialized query representation, such as\n *  those generated by query(...).toObject().\n * @returns {Query} The instantiated query instance.\n */\nexport function queryFrom(object) {\n  return Query.from(object);\n}\n\n/**\n * Model a query as a collection of serializble verbs.\n * Provides a table-like interface for constructing queries.\n */\nexport default class Query extends Transformable {\n\n  /**\n   * Construct a new query instance.\n   * @param {Verb[]} verbs An array of verb instances.\n   * @param {object} [params] Optional query parameters, corresponding\n   *  to parameter references in table expressions.\n   * @param {string} [table] Optional name of the table to query.\n   */\n  constructor(verbs, params, table) {\n    super(params);\n    this._verbs = verbs || [];\n    this._table = table;\n  }\n\n  /**\n   * Create a new query instance from the given serialized object.\n   * @param {QueryObject} object A serialized query representation, such as\n   *  those generated by Query.toObject.\n   * @returns {Query} The instantiated query.\n   */\n  static from({ verbs, table, params }) {\n    return new Query(verbs.map(Verb.from), params, table);\n  }\n\n  /**\n   * Provide an informative object string tag.\n   */\n  get [Symbol.toStringTag]() {\n    if (!this._verbs) return 'Object'; // bail if called on prototype\n    const ns = this._verbs.length;\n    return `Query: ${ns} verbs` + (this._table ? ` on '${this._table}'` : '');\n  }\n\n  /**\n   * Return the number of verbs in this query.\n   */\n  get length() {\n    return this._verbs.length;\n  }\n\n  /**\n   * Return the name of the table this query applies to.\n   * @return {string} The name of the source table, or undefined.\n   */\n  get tableName() {\n    return this._table;\n  }\n\n  /**\n   * Get or set table expression parameter values.\n   * If called with no arguments, returns the current parameter values\n   * as an object. Otherwise, adds the provided parameters to this\n   * query's parameter set and returns the table. Any prior parameters\n   * with names matching the input parameters are overridden.\n   * @param {object} values The parameter values.\n   * @return {Query|object} The current parameter values (if called\n   *  with no arguments) or this query.\n   */\n  params(values) {\n    if (arguments.length) {\n      this._params = { ...this._params, ...values };\n      return this;\n    } else {\n      return this._params;\n    }\n  }\n\n  /**\n   * Evaluate this query against a given table and catalog.\n   * @param {Table} table The Arquero table to process.\n   * @param {Function} catalog A table lookup function that accepts a table\n   *  name string as input and returns a corresponding Arquero table.\n   * @returns {Table} The resulting Arquero table.\n   */\n  evaluate(table, catalog) {\n    table = table || catalog(this._table);\n    for (const verb of this._verbs) {\n      table = verb.evaluate(table.params(this._params), catalog);\n    }\n    return table;\n  }\n\n  /**\n   * Serialize this query as a JSON-compatible object. The resulting\n   * object can be passed to Query.from to re-instantiate this query.\n   * @returns {object} A JSON-compatible object representing this query.\n   */\n  toObject() {\n    return serialize(this, 'toObject');\n  }\n\n  /**\n   * Serialize this query as a JSON-compatible object. The resulting\n   * object can be passed to Query.from to re-instantiate this query.\n   * This method simply returns the result of toObject, but is provided\n   * as a separate method to allow later customization of JSON export.\n   * @returns {object} A JSON-compatible object representing this query.\n   */\n  toJSON() {\n    return this.toObject();\n  }\n\n  /**\n   * Serialize this query to a JSON-compatible abstract syntax tree.\n   * All table expressions will be parsed and represented as AST instances\n   * using a modified form of the Mozilla JavaScript AST format.\n   * This method can be used to output parsed and serialized representations\n   * to translate Arquero queries to alternative data processing platforms.\n   * @returns {object} A JSON-compatible abstract syntax tree object.\n   */\n  toAST() {\n    return serialize(this, 'toAST', { type: QueryType });\n  }\n}\n\n/**\n * Serialized object representation of a query.\n * @typedef {object} QueryObject\n * @property {object[]} verbs An array of verb definitions.\n * @property {object} [params] An object of parameter values.\n * @property {string} [table] The name of the table to query.\n */\n\nfunction serialize(query, method, props) {\n  return {\n    ...props,\n    verbs: query._verbs.map(verb => verb[method]()),\n    ...(query._params ? { params: query._params } : null),\n    ...(query._table ? { table: query._table } : null)\n  };\n}\n\nfunction append(qb, verb) {\n  return new Query(\n    qb._verbs.concat(verb),\n    qb._params,\n    qb._table\n  );\n}\n\nexport function addQueryVerb(name, verb) {\n  Query.prototype[name] = function(...args) {\n    return append(this, verb(...args));\n  };\n}\n\n// Internal verb handlers\nfor (const name in Verbs) {\n  const verb = Verbs[name];\n  Query.prototype['__' + name] = function(qb, ...args) {\n    return append(qb, verb(...args));\n  };\n}","import sequence from '../op/functions/sequence';\n\n/**\n * Create a new Arquero column that proxies access to an\n * Apache Arrow dictionary column.\n * @param {object} vector An Apache Arrow dictionary column.\n */\nexport default function(vector) {\n  const { chunks, dictionary, length, nullCount } = vector;\n  const size = dictionary.length;\n  const keys = dictKeys(chunks || [vector], length, nullCount, size);\n  const values = Array(size);\n\n  const value = k => k == null || k < 0 || k >= size ? null\n    : values[k] !== undefined ? values[k]\n    : (values[k] = dictionary.get(k));\n\n  return {\n    vector,\n    length,\n\n    get: row => value(keys[row]),\n\n    key: row => keys[row],\n\n    keyFor(value) {\n      if (value === null) return nullCount ? size : -1;\n      for (let i = 0; i < size; ++i) {\n        if (values[i] === undefined) values[i] = dictionary.get(i);\n        if (values[i] === value) return i;\n      }\n      return -1;\n    },\n\n    groups(names) {\n      const s = size + (nullCount ? 1 : 0);\n      return { keys, get: [value], names, rows: sequence(0, s), size: s };\n    },\n\n    [Symbol.iterator]() {\n      return vector[Symbol.iterator]();\n    }\n  };\n}\n\n/**\n * Generate a dictionary key array\n * @param {object[]} chunks Arrow column chunks\n * @param {number} length The length of the Arrow column\n * @param {number} nulls The count of column null values\n * @param {number} size The backing dictionary size\n */\nfunction dictKeys(chunks, length, nulls, size) {\n  const v = chunks.length > 1 || nulls\n    ? flatten(chunks, length, chunks[0].type.indices)\n    : chunks[0].values;\n  return nulls ? nullKeys(chunks, v, size) : v;\n}\n\n/**\n * Flatten Arrow column chunks into a single array.\n */\nfunction flatten(chunks, length, type) {\n  const array = new type.ArrayType(length);\n  const n = chunks.length;\n  for (let i = 0, idx = 0, len; i < n; ++i) {\n    len = chunks[i].length;\n    array.set(chunks[i].values.subarray(0, len), idx);\n    idx += len;\n  }\n  return array;\n}\n\n/**\n * Encode null values as an additional dictionary key.\n * Returns a new key array with null values added.\n * TODO: safeguard against integer overflow?\n */\nfunction nullKeys(chunks, keys, key) {\n  // iterate over null bitmaps, encode null values as key\n  const n = chunks.length;\n  for (let i = 0, idx = 0, m, base, bits, byte; i < n; ++i) {\n    bits = chunks[i].nullBitmap;\n    m = chunks[i].length >> 3;\n    if (bits && bits.length) {\n      for (let j = 0; j <= m; ++j) {\n        if ((byte = bits[j]) !== 255) {\n          base = idx + (j << 3);\n          if ((byte & (1 << 0)) === 0) keys[base + 0] = key;\n          if ((byte & (1 << 1)) === 0) keys[base + 1] = key;\n          if ((byte & (1 << 2)) === 0) keys[base + 2] = key;\n          if ((byte & (1 << 3)) === 0) keys[base + 3] = key;\n          if ((byte & (1 << 4)) === 0) keys[base + 4] = key;\n          if ((byte & (1 << 5)) === 0) keys[base + 5] = key;\n          if ((byte & (1 << 6)) === 0) keys[base + 6] = key;\n          if ((byte & (1 << 7)) === 0) keys[base + 7] = key;\n        }\n      }\n    }\n    idx += chunks[i].length;\n  }\n  return keys;\n}","export default function(args, code, ...lists) {\n  const v = ['_', '$'];\n  const a = v.slice(0, lists.length);\n  a.push('\"use strict\"; const '\n    + lists\n        .map((l, j) => l.map((_, i) => `${v[j]}${i} = ${v[j]}[${i}]`).join(', '))\n        .join(', ')\n    + `; return (${args}) => ${code};`\n  );\n  return Function(...a)(...lists);\n}","import arrowDictionary from './arrow-dictionary';\nimport Type from './arrow-types';\nimport error from '../util/error';\nimport repeat from '../util/repeat';\nimport toString from '../util/to-string';\nimport unroll from '../util/unroll';\n\nconst isList = id => id === Type.List || id === Type.FixedSizeList;\n\n/**\n * Create an Arquero column that proxies access to an Arrow column.\n * @param {object} arrow An Apache Arrow column.\n * @return {import('../table/column').ColumnType} An Arquero-compatible column.\n */\nexport default function arrowColumn(arrow, nested) {\n  if (arrow.dictionary) return arrowDictionary(arrow);\n  const { typeId, chunks, length, numChildren } = arrow;\n  const vector = chunks && chunks.length === 1 ? chunks[0] : arrow;\n  const get = numChildren && nested ? getNested(vector)\n    : numChildren ? memoize(getNested(vector))\n    : typeId === Type.Utf8 ? memoize(row => vector.get(row))\n    : null;\n\n  return get\n    ? { vector, length, get, [Symbol.iterator]: () => iterator(length, get) }\n    : vector;\n}\n\nfunction memoize(get) {\n  const values = [];\n  return row => {\n    const v = values[row];\n    return v !== undefined ? v : (values[row] = get(row));\n  };\n}\n\nfunction* iterator(n, get) {\n  for (let i = 0; i < n; ++i) {\n    yield get(i);\n  }\n}\n\nconst arrayFrom = vector => vector.numChildren\n  ? repeat(vector.length, getNested(vector))\n  : vector.nullCount ? [...vector]\n  : vector.toArray();\n\nconst getNested = vector => isList(vector.typeId) ? getList(vector)\n  : vector.typeId === Type.Struct ? getStruct(vector)\n  : error(`Unsupported Arrow type: ${toString(vector.VectorName)}`);\n\nconst getList = vector => vector.nullCount\n  ? row => vector.isValid(row) ? arrayFrom(vector.get(row)) : null\n  : row => arrayFrom(vector.get(row));\n\nfunction getStruct(vector) {\n  const props = [];\n  const code = [];\n  vector.type.children.forEach((field, i) => {\n    props.push(arrowColumn(vector.getChildAt(i), true));\n    code.push(`${toString(field.name)}:_${i}.get(row)`);\n  });\n  const get = unroll('row', '({' + code + '})', props);\n\n  return vector.nullCount\n    ? row => vector.isValid(row) ? get(row) : null\n    : get;\n}","const ONE = 0x80000000;\nconst ALL = 0xFFFFFFFF;\n\n/**\n * Represent an indexable set of bits.\n */\nexport default class BitSet {\n  /**\n   * Instantiate a new BitSet instance.\n   * @param {number} size The number of bits.\n   */\n  constructor(size) {\n    this._size = size;\n    this._bits = new Uint32Array(Math.ceil(size / 32));\n  }\n\n  /**\n   * The number of bits.\n   * @return {number}\n   */\n  get length() {\n    return this._size;\n  }\n\n  /**\n   * The number of bits set to one.\n   * https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan\n   * @return {number}\n   */\n  count() {\n    const n = this._bits.length;\n    let count = 0;\n    for (let i = 0; i < n; ++i) {\n      for (let b = this._bits[i]; b; ++count) {\n        b &= b - 1;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Get the bit at a given index.\n   * @param {number} i The bit index.\n   */\n  get(i) {\n    return this._bits[i >> 5] & (ONE >>> i);\n  }\n\n  /**\n   * Set the bit at a given index to one.\n   * @param {number} i The bit index.\n   */\n  set(i) {\n    this._bits[i >> 5] |= (ONE >>> i);\n  }\n\n  /**\n   * Clear the bit at a given index to zero.\n   * @param {number} i The bit index.\n   */\n  clear(i) {\n    this._bits[i >> 5] &= ~(ONE >>> i);\n  }\n\n  /**\n   * Scan the bits, invoking a callback function with the index of\n   * each non-zero bit.\n   * @param {(i: number) => void} fn A callback function.\n   */\n  scan(fn) {\n    for (let i = this.next(0); i >= 0; i = this.next(i + 1)) {\n      fn(i);\n    }\n  }\n\n  /**\n   * Get the next non-zero bit starting from a given index.\n   * @param {number} i The bit index.\n   */\n  next(i) {\n    const bits = this._bits;\n    const n = bits.length;\n\n    let index = i >> 5;\n    let curr = bits[index] & (ALL >>> i);\n\n    for (; index < n; curr = bits[++index]) {\n      if (curr !== 0) {\n        return (index << 5) + Math.clz32(curr);\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Return the index of the nth non-zero bit.\n   * @param {number} n The number of non-zero bits to advance.\n   * @return {number} The index of the nth non-zero bit.\n   */\n  nth(n) {\n    let i = this.next(0);\n    while (n-- && i >= 0) i = this.next(i + 1);\n    return i;\n  }\n\n  /**\n   * Negate all bits in this bitset.\n   * Modifies this BitSet in place.\n   * @return {this}\n   */\n  not() {\n    const bits = this._bits;\n    const n = bits.length;\n\n    // invert all bits\n    for (let i = 0; i < n; ++i) {\n      bits[i] = ~bits[i];\n    }\n\n    // unset extraneous trailing bits\n    const tail = this._size % 32;\n    if (tail) {\n      bits[n - 1] &= ONE >> (tail - 1);\n    }\n\n    return this;\n  }\n\n  /**\n   * Compute the logical AND of this BitSet and another.\n   * @param {BitSet} bitset The BitSet to combine with.\n   * @return {BitSet} This BitSet updated with the logical AND.\n   */\n  and(bitset) {\n    if (bitset) {\n      const a = this._bits;\n      const b = bitset._bits;\n      const n = a.length;\n\n      for (let i = 0; i < n; ++i) {\n        a[i] &= b[i];\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Compute the logical OR of this BitSet and another.\n   * @param {BitSet} bitset The BitSet to combine with.\n   * @return {BitSet} This BitSet updated with the logical OR.\n   */\n  or(bitset) {\n    if (bitset) {\n      const a = this._bits;\n      const b = bitset._bits;\n      const n = a.length;\n\n      for (let i = 0; i < n; ++i) {\n        a[i] |= b[i];\n      }\n    }\n    return this;\n  }\n}","import { from } from '../arrow/arrow-table';\nimport arrowColumn from '../arrow/arrow-column';\nimport resolve, { all } from '../helpers/selection';\nimport BitSet from '../table/bit-set';\nimport columnSet from '../table/column-set';\nimport ColumnTable from '../table/column-table';\n\n/**\n * Options for Apache Arrow import.\n * @typedef {object} ArrowOptions\n * @property {import('../table/transformable').Select} columns\n *  An ordered set of columns to import. The input may consist of column name\n *  strings, column integer indices, objects with current column names as keys\n *  and new column names as values (for renaming), or selection helper\n *  functions such as {@link all}, {@link not}, or {@link range}.\n */\n\n/**\n * Create a new table backed by an Apache Arrow table instance.\n * @param {object} arrow An Apache Arrow data table or byte buffer.\n * @param {ArrowOptions} options Options for Arrow import.\n * @return {ColumnTable} A new table containing the imported values.\n */\nexport default function(arrow, options = {}) {\n  arrow = from(arrow);\n  const { chunks, length, schema } = arrow;\n\n  // resolve column selection\n  const fields = schema.fields.map(f => f.name);\n  const sel = resolve({\n    columnNames: test => test ? fields.filter(test) : fields.slice(),\n    columnIndex: name => fields.indexOf(name)\n  }, options.columns || all());\n\n  // build Arquero columns for backing Arrow columns\n  const cols = columnSet();\n  sel.forEach((name, key) => {\n    cols.add(name, arrowColumn(arrow.getColumn(key)));\n  });\n\n  // build row filter bit mask as needed\n  const bits = arrow.count() !== length ? new BitSet(length) : null;\n  if (bits) {\n    let b = 0;\n    let c = 0;\n    arrow.scan(\n      idx => bits.set(b + idx),\n      batch => { while (chunks[c] !== batch) b += chunks[c++].length; }\n    );\n  }\n\n  return new ColumnTable(cols.data, cols.names, bits);\n}","export default x => x;","import identity from './identity';\nimport isISODateString from './is-iso-date-string';\n\nconst parseBoolean = [ // boolean\n  v => (v === 'true') || (v === 'false'),\n  v => v === 'false' ? false : true\n];\n\nconst parseNumber = [ // number\n  v => v === 'NaN' || (v = +v) === v,\n  v => +v\n];\n\nconst parseDate = [ // iso date\n  isISODateString,\n  v => new Date(Date.parse(v))\n];\n\nfunction numberParser(options) {\n  const { decimal } = options;\n  return decimal && decimal !== '.'\n    ? parseNumber.map(f => s => f(s && s.replace(decimal, '.')))\n    : parseNumber;\n}\n\nexport default function(values, options) {\n  const types = [parseBoolean, numberParser(options), parseDate];\n  const n = types.length;\n  for (let i = 0; i < n; ++i) {\n    const [test, parser] = types[i];\n    if (check(values, test)) {\n      return parser;\n    }\n  }\n  return identity;\n}\n\nfunction check(values, test) {\n  const n = values.length;\n  for (let i = 0; i < n; ++i) {\n    const v = values[i];\n    if (v != null && !test(v)) {\n      return false;\n    }\n  }\n  return true;\n}","import ColumnTable from '../table/column-table';\nimport identity from '../util/identity';\nimport isFunction from '../util/is-function';\nimport repeat from '../util/repeat';\nimport valueParser from '../util/parse-values';\n\nfunction defaultNames(n, off = 0) {\n  return repeat(n - off, i => `col${i + off + 1}`);\n}\n\nexport default function(next, names, options) {\n  let row = next();\n  const n = row.length;\n  const automax = +options.autoMax || 1000;\n  const values = repeat(n, () => []);\n  names = names\n    ? names.length < n ? [...names, defaultNames(n, names.length)] : names\n    : defaultNames(n);\n\n  // read in initial rows to guess types\n  let idx = 0;\n  for (; idx < automax && row; ++idx, row = next()) {\n    for (let i = 0; i < n; ++i) {\n      values[i].push(row[i] === '' ? null : row[i]);\n    }\n  }\n\n  // initialize parsers\n  const parsers = getParsers(names, values, options);\n\n  // apply parsers\n  parsers.forEach((parse, i) => {\n    if (parse === identity) return;\n    const v = values[i];\n    for (let r = 0; r < idx; ++r) {\n      if (v[r] != null) v[r] = parse(v[r]);\n    }\n  });\n\n  // parse remainder of file\n  for (; row; row = next()) {\n    for (let i = 0; i < n; ++i) {\n      values[i].push(row[i] ? parsers[i](row[i]) : null);\n    }\n  }\n\n  const columns = {};\n  names.forEach((name, i) => columns[name] = values[i]);\n  return new ColumnTable(columns, names);\n}\n\nfunction getParsers(names, values, options) {\n  const { parse = {} } = options;\n  const noParse = options.autoType === false;\n\n  return names.map(\n    (name, i) => isFunction(parse[name]) ? parse[name]\n      : noParse ? identity\n      : valueParser(values[i], options)\n  );\n}","export const EOL = {};\nexport const EOF = {};\nexport const QUOTE = 34;\nexport const NEWLINE = 10;\nexport const RETURN = 13;","export default function(read, skip, drop) {\n  // skip initial lines, if requested\n  let s = +skip || 0;\n  while (--s >= 0) read();\n\n  // return filtered stream\n  return drop ? () => {\n    let line;\n    while (!line) {\n      if (drop(line = read())) line = null;\n      else return line;\n    }\n  } : read;\n}\n","import ColumnTable from '../table/column-table'; // eslint-disable-line no-unused-vars\n\nimport fromTextRows from './from-text-rows';\nimport parseDelimited from './parse/parse-delimited';\n\n/**\n * Options for CSV parsing.\n * @typedef {object} CSVParseOptions\n * @property {string} [delimiter=','] Single-character delimiter between values.\n * @property {string} [decimal='.'] Single-character numeric decimal separator.\n * @property {boolean} [header=true] Flag to specify presence of header row.\n *  If true, assumes the CSV contains a header row with column names. If false,\n *  indicates the CSV does not contain a header row; columns are given the\n *  names 'col1', 'col2', etc unless the *names* option is specified.\n * @property {string[]} [names] An array of column names to use for header-less\n *  CSV files. This option is ignored if the header option is true.\n * @property {number} [skip=0] The number of lines to skip before reading data.\n * @property {string} [comment] A string used to identify comment lines. Any\n *  lines that start with the comment pattern are skipped.\n * @property {boolean} [autoType=true] Flag for automatic type inference.\n * @property {number} [autoMax=1000] Maximum number of initial values to use\n *  for type inference.\n * @property {Object.<string, (value: string) => any>} [parse] Object of\n *  column parsing options. The object keys should be column names. The object\n *  values should be parsing functions that transform values upon input.\n */\n\n/**\n * Parse a comma-separated values (CSV) string into a table. Other\n * delimiters, such as tabs or pipes ('|'), can be specified using\n * the options argument. By default, automatic type inference is performed\n * for input values; string values that match the ISO standard\n * date format are parsed into JavaScript Date objects. To disable this\n * behavior, set the autoType option to false. To perform custom parsing\n * of input column values, use the parse option.\n * @param {string} text A string in a delimited-value format.\n * @param {CSVParseOptions} options The formatting options.\n * @return {ColumnTable} A new table containing the parsed values.\n */\nexport default function(text, options = {}) {\n  const next = parseDelimited(text, options);\n  return fromTextRows(\n    next,\n    options.header !== false ? next() : options.names,\n    options\n  );\n}","import { EOF, EOL, NEWLINE, QUOTE, RETURN } from './constants';\nimport filter from './text-filter';\nimport error from '../../util/error';\n\n// Adapted from d3-dsv: https://github.com/d3/d3-dsv/blob/master/src/dsv.js\n// Copyright 2013-2016 Mike Bostock\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without modification,\n// are permitted provided that the following conditions are met:\n// * Redistributions of source code must retain the above copyright notice, this\n//   list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above copyright notice,\n//   this list of conditions and the following disclaimer in the documentation\n//   and/or other materials provided with the distribution.\n// * Neither the name of the author nor the names of contributors may be used to\n//   endorse or promote products derived from this software without specific prior\n//   written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n// ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nexport default function(text, { delimiter = ',', skip, comment }) {\n  if (delimiter.length !== 1) {\n    error(`Text \"delimiter\" should be a single character, found \"${delimiter}\"`);\n  }\n  const delimCode = delimiter.charCodeAt(0);\n\n  let N = text.length;\n  let I = 0; // current character index\n  let t; // current token\n  let eof = N <= 0; // current token followed by EOF?\n  let eol = false; // current token followed by EOL?\n\n  // Strip the trailing newline.\n  if (text.charCodeAt(N - 1) === NEWLINE) --N;\n  if (text.charCodeAt(N - 1) === RETURN) --N;\n\n  function token() {\n    if (eof) return EOF;\n    if (eol) return eol = false, EOL;\n\n    // Unescape quotes.\n    const j = I;\n    let i, c;\n    if (text.charCodeAt(j) === QUOTE) {\n      while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n      if ((i = I) >= N) eof = true;\n      else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n      else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n      return text.slice(j + 1, i - 1).replace(/\"\"/g, '\"');\n    }\n\n    // Find next delimiter or newline.\n    while (I < N) {\n      if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n      else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n      else if (c !== delimCode) continue;\n      return text.slice(j, i);\n    }\n\n    // Return last token before EOF.\n    return eof = true, text.slice(j, N);\n  }\n\n  function next() {\n    if ((t = token()) !== EOF) {\n      const row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      return row;\n    }\n  }\n\n  return filter(\n    next, skip,\n    comment && (x => (x && x[0] || '').startsWith(comment))\n  );\n}","import ColumnTable from '../table/column-table'; // eslint-disable-line no-unused-vars\n\nimport fromTextRows from './from-text-rows';\nimport parseLines from './parse/parse-lines';\nimport error from '../util/error';\n\n/**\n * Options for fixed width file parsing.\n * @typedef {object} FixedParseOptions\n * @property {[number, number][]} [positions] Array of start, end indices for\n *  fixed-width columns.\n * @property {number[]} [widths] Array of fixed column widths. This option is\n *  ignored if the positions property is specified.\n * @property {string[]} [names] An array of column names. The array length\n *  should match the length of the positions array. If not specified or\n *  shorter than the positions array, default column names are generated.\n * @property {string} [decimal='.'] Single-character numeric decimal separator.\n * @property {number} [skip=0] The number of lines to skip before reading data.\n * @property {string} [comment] A string used to identify comment lines. Any\n *  lines that start with the comment pattern are skipped.\n * @property {boolean} [autoType=true] Flag for automatic type inference.\n * @property {number} [autoMax=1000] Maximum number of initial values to use\n *  for type inference.\n * @property {Object.<string, (value: string) => any>} [parse] Object of\n *  column parsing options. The object keys should be column names. The object\n *  values should be parsing functions that transform values upon input.\n */\n\n/**\n * Parse a fixed-width file (FWF) string into a table. By default, automatic\n * type inference is performed for input values; string values that match the\n * ISO standard date format are parsed into JavaScript Date objects. To\n * disable this behavior, set the autoType option to false. To perform custom\n * parsing of input column values, use the parse option.\n * @param {string} text A string in a fixed-width file format.\n * @param {FixedParseOptions} options The formatting options.\n * @return {ColumnTable} A new table containing the parsed values.\n */\nexport default function(text, options = {}) {\n  const read = parseLines(text, options);\n  const p = positions(options);\n  return fromTextRows(\n    () => {\n      const line = read();\n      if (line) {\n        return p.map(([i, j]) => line.slice(i, j).trim());\n      }\n    },\n    options.names,\n    options\n  );\n}\n\nfunction positions({ positions, widths }) {\n  if (!positions && !widths) {\n    error('Fixed width files require a \"positions\" or \"widths\" option');\n  }\n  let i = 0;\n  return positions || widths.map(w => [i, i += w]);\n}","import { NEWLINE, RETURN } from './constants';\nimport filter from './text-filter';\n\nexport default function(text, { skip, comment }) {\n  let N = text.length;\n  let I = 0; // current character index\n\n  // Strip the trailing newline.\n  if (text.charCodeAt(N - 1) === NEWLINE) --N;\n  if (text.charCodeAt(N - 1) === RETURN) --N;\n\n  function read() {\n    if (I >= N) return;\n\n    const j = I;\n    let eol = false;\n    let i, c;\n\n    // Find next newline.\n    while (I < N) {\n      if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n      else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n      if (eol) return text.slice(j, i);\n    }\n\n    // Return last line before EOF.\n    return text.slice(j, N);\n  }\n\n  return filter(\n    read, skip,\n    comment && (x => (x || '').startsWith(comment))\n  );\n}","export default function(value) {\n  const n = value.length;\n  for (let i = 0; i < n; ++i) {\n    const c = value.charCodeAt(i);\n    if (c < 48 || c > 57) return false;\n  }\n  return true;\n}","import ColumnTable from '../table/column-table';\nimport defaultTrue from '../util/default-true';\nimport isArrayType from '../util/is-array-type';\nimport isDigitString from '../util/is-digit-string';\nimport isISODateString from '../util/is-iso-date-string';\nimport isObject from '../util/is-object';\nimport isString from '../util/is-string';\n\n/**\n * Options for JSON parsing.\n * @typedef {object} JSONParseOptions\n * @property {boolean} [autoType=true] Flag controlling automatic type\n *  inference. If false, date parsing for input JSON strings is disabled.\n * @property {Object.<string, (value: any) => any>} [parse] Object of column\n *  parsing options. The object keys should be column names. The object values\n *  should be parsing functions that transform values upon input.\n */\n\n/**\n * Parse JavaScript Object Notation (JSON) data into a table.\n * The expected JSON data format is an object with column names for keys\n * and column value arrays for values. By default string values that match\n * the ISO standard date format are parsed into JavaScript Date objects.\n * To disable this behavior, set the autoType option to false. To perform\n * custom parsing of input column values, use the parse option. Auto-type\n * parsing is not performed for columns with custom parse options.\n * The data payload can also be provided as the \"data\" property of an\n * enclosing object, with an optional \"schema\" property containing table\n * metadata such as a \"fields\" array of ordered column information.\n * @param {string|object} data A string in JSON format, or pre-parsed object.\n * @param {JSONParseOptions} options The formatting options.\n * @return {ColumnTable} A new table containing the parsed values.\n */\nexport default function(json, options = {}) {\n  const autoType = defaultTrue(options.autoType);\n\n  // parse string input\n  if (isString(json)) {\n    json = JSON.parse(json);\n  }\n\n  // separate schema and data, as needed\n  let data = json.data, names;\n  if (isObject(data) && !isArrayType(data)) {\n    if (json.schema && json.schema.fields) {\n      names = json.schema.fields.map(f => f.name);\n    }\n  } else {\n    data = json;\n  }\n\n  // parse values as necessary\n  if (autoType || options.parse) {\n    const parsers = options.parse || {};\n    for (const name in data) {\n      const col = data[name];\n      const len = col.length;\n      if (parsers[name]) {\n        // apply custom parser\n        for (let i = 0; i < len; ++i) {\n          col[i] = parsers[name](col[i]);\n        }\n      } else if (autoType) {\n        // apply autoType parser\n        for (let i = 0; i < len; ++i) {\n          const val = col[i];\n          if (isString(val) && isISODateString(val) && !isDigitString(val)) {\n            col[i] = new Date(val);\n          }\n        }\n      }\n    }\n  }\n\n  return new ColumnTable(data, names);\n}","import columnSet from '../table/column-set';\nimport error from '../util/error';\nimport isString from '../util/is-string';\n\nexport default function(table, columns) {\n  const cols = columnSet();\n\n  columns.forEach((value, curr) => {\n    const next = isString(value) ? value : curr;\n    if (next) {\n      const col = table.column(curr) || error(`Unrecognized column: ${curr}`);\n      cols.add(next, col);\n    }\n  });\n\n  return table.create(cols);\n}","import _select from '../engine/select';\nimport resolve from '../helpers/selection';\nimport error from '../util/error';\n\nexport default function(table, columns, { before, after } = {}) {\n  const bef = before != null;\n  const aft = after != null;\n\n  if (!(bef || aft)) {\n    error('relocate requires a before or after option.');\n  }\n  if (bef && aft) {\n    error('relocate accepts only one of the before or after options.');\n  }\n\n  columns = resolve(table, columns);\n  const anchors = [...resolve(table, bef ? before : after).keys()];\n  const anchor = bef ? anchors[0] : anchors.pop();\n  const select = new Map();\n\n  // marshal inputs to select in desired order\n  table.columnNames().forEach(name => {\n    // check if we should assign the current column\n    const assign = !columns.has(name);\n\n    // at anchor column, insert relocated columns\n    if (name === anchor) {\n      if (aft && assign) select.set(name, name);\n      for (const [key, value] of columns) {\n        select.set(key, value);\n      }\n      if (aft) return; // exit if current column has been handled\n    }\n\n    if (assign) select.set(name, name);\n  });\n\n  return _select(table, select);\n}","export default function(list, fn = (x => x), delim = '') {\n  const n = list.length;\n  if (!n) return '';\n\n  let s = fn(list[0], 0);\n  for (let i = 1; i < n; ++i) {\n    s += delim + fn(list[i], i);\n  }\n\n  return s;\n}","export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}","import isBigInt from './is-bigint';\n\nexport default function(value) {\n  return isBigInt(value) ? value : +value;\n}","import ascending from './ascending';\nimport min from './min';\nimport max from './max';\nimport quantile from './quantile';\n\nexport default class ValueList {\n  constructor(values) {\n    this._values = values || [];\n    this._sorted = null;\n    this._start = 0;\n  }\n\n  values(copy) {\n    if (this._start) {\n      this._values = this._values.slice(this._start);\n      this._start = 0;\n    }\n    return copy\n      ? this._values.slice()\n      : this._values;\n  }\n\n  add(value) {\n    this._values.push(value);\n    this._sorted = null;\n  }\n\n  rem() {\n    this._start += 1;\n    this._sorted = null;\n  }\n\n  min() {\n    return this._sorted && this._sorted.length\n      ? this._sorted[0]\n      : min(this._values, this._start);\n  }\n\n  max() {\n    return this._sorted && this._sorted.length\n      ? this._sorted[this._sorted.length - 1]\n      : max(this._values, this._start);\n  }\n\n  quantile(p) {\n    if (!this._sorted) {\n      this._sorted = this.values(true);\n      this._sorted.sort(ascending);\n    }\n    return quantile(this._sorted, p);\n  }\n}","import NULL from './null';\n\nexport default function(values, start = 0, stop = values.length) {\n  let min = stop ? values[start++] : NULL;\n\n  for (let i = start; i < stop; ++i) {\n    if (min > values[i]) {\n      min = values[i];\n    }\n  }\n\n  return min;\n}","import NULL from './null';\n\nexport default function(values, start = 0, stop = values.length) {\n  let max = stop ? values[start++] : NULL;\n\n  for (let i = start; i < stop; ++i) {\n    if (max < values[i]) {\n      max = values[i];\n    }\n  }\n\n  return max;\n}","import isBigInt from './is-bigint';\nimport NULL from './null';\nimport toNumeric from './to-numeric';\n\nexport default function quantile(values, p) {\n  const n = values.length;\n\n  if (!n) return NULL;\n  if ((p = +p) <= 0 || n < 2) return toNumeric(values[0]);\n  if (p >= 1) return toNumeric(values[n - 1]);\n\n  const i = (n - 1) * p;\n  const i0 = Math.floor(i);\n  const v0 = toNumeric(values[i0]);\n  return isBigInt(v0)\n    ? v0\n    : v0 + (toNumeric(values[i0 + 1]) - v0) * (i - i0);\n}","import Reducer from './reducer';\nimport { getAggregate } from '../../op';\nimport concat from '../../util/concat';\nimport error from '../../util/error';\nimport isValid from '../../util/is-valid';\nimport unroll from '../../util/unroll';\nimport ValueList from '../../util/value-list';\n\nconst update = (ops, args, fn) => unroll(\n  args,\n  '{' + concat(ops, (_, i) => `_${i}.${fn}(${args});`) + '}',\n  ops\n);\n\nexport default function(oplist, stream) {\n  const { ops, output } = expand(oplist, stream);\n  const fields = oplist[0].fields;\n  const n = fields.length;\n  const cls = n === 0 ? FieldReducer\n    : n === 1 ? Field1Reducer\n    : n === 2 ? Field2Reducer\n    : error('Unsupported field count: ' + n);\n  return new cls(fields, ops, output, stream);\n}\n\nfunction expand(oplist, stream) {\n  const has = {};\n  const ops = [];\n\n  function add(name, params = []) {\n    // check key\n    const key = name + ':' + params;\n    if (has[key]) return has[key];\n\n    // get op instance\n    const def = getAggregate(name);\n    const op = def.create(...params);\n\n    // add required dependencies\n    if (stream < 0 && def.stream) {\n      def.stream.forEach(name => add(name, []));\n    }\n    if (def.req) {\n      def.req.forEach(name => add(name, []));\n    }\n\n    // update state\n    has[key] = op;\n    ops.push(op);\n\n    return op;\n  }\n\n  const output = oplist.map(item => {\n    const op = add(item.name, item.params);\n    op.output = item.id;\n    return op;\n  });\n\n  return { ops, output };\n}\n\nclass FieldReducer extends Reducer {\n  constructor(fields, ops, outputs, stream) {\n    super(outputs);\n    this._op = ops;\n    this._fields = fields;\n    this._stream = !!stream;\n  }\n\n  init() {\n    const state = { count: 0, valid: 0, stream: this._stream };\n    this._op.forEach(op => op.init(state));\n\n    // value list requested\n    if (state.values) {\n      state.list = new ValueList();\n    }\n\n    return state;\n  }\n\n  write(state, values, index) {\n    const op = this._outputs;\n    const n = op.length;\n    for (let i = 0; i < n; ++i) {\n      values[op[i].output][index] = op[i].value(state);\n    }\n    return 1;\n  }\n\n  _add() {\n  }\n\n  _rem() {\n  }\n\n  add(state) {\n    ++state.count;\n  }\n\n  rem(state) {\n    --state.count;\n  }\n}\n\nclass Field1Reducer extends FieldReducer {\n  constructor(fields, ops, outputs, stream) {\n    super(fields, ops, outputs, stream);\n\n    // unroll op invocations for performance\n    const args = ['state', 'v1', 'v2'];\n    this._add = update(ops, args, 'add');\n    this._rem = update(ops, args, 'rem');\n  }\n\n  add(state, row, data) {\n    const value = this._fields[0](row, data);\n    ++state.count;\n    if (isValid(value)) {\n      ++state.valid;\n      if (state.list) state.list.add(value);\n      this._add(state, value);\n    }\n  }\n\n  rem(state, row, data) {\n    const value = this._fields[0](row, data);\n    --state.count;\n    if (isValid(value)) {\n      --state.valid;\n      if (state.list) state.list.rem();\n      this._rem(state, value);\n    }\n  }\n}\n\nclass Field2Reducer extends FieldReducer {\n  constructor(fields, ops, outputs, stream) {\n    super(fields, ops, outputs, stream);\n\n    // unroll op invocations for performance\n    const args = ['state', 'v1', 'v2'];\n    this._add = update(ops, args, 'add');\n    this._rem = update(ops, args, 'rem');\n  }\n\n  add(state, row, data) {\n    const value1 = this._fields[0](row, data);\n    const value2 = this._fields[1](row, data);\n    ++state.count;\n    if (isValid(value1) && isValid(value2)) {\n      ++state.valid;\n      if (state.list) state.list.add([value1, value2]);\n      this._add(state, value1, value2);\n    }\n  }\n\n  rem(state, row, data) {\n    const value1 = this._fields[0](row, data);\n    const value2 = this._fields[1](row, data);\n    --state.count;\n    if (isValid(value1) && isValid(value2)) {\n      --state.valid;\n      if (state.list) state.list.rem();\n      this._rem(state, value1, value2);\n    }\n  }\n}","import fieldReducer from './field-reducer';\nimport repeat from '../../util/repeat';\n\nexport function aggregateGet(table, ops, get) {\n  if (ops.length) {\n    const data = table.data();\n    const { keys } = table.groups() || {};\n    const result = aggregate(table, ops);\n    const op = keys\n      ? (name, row) => result[name][keys[row]]\n      : name => result[name][0];\n    get = get.map(f => row => f(row, data, op));\n  }\n\n  return get;\n}\n\nexport function aggregate(table, ops, result) {\n  if (!ops.length) return result; // early exit\n\n  // instantiate aggregators and result store\n  const aggrs = reducers(ops);\n  const groups = table.groups();\n  const size = groups ? groups.size : 1;\n  result = result || repeat(ops.length, () => Array(size));\n\n  // compute aggregates, extract results\n  if (size > 1) {\n    aggrs.forEach(aggr => {\n      const cells = reduceGroups(table, aggr, groups);\n      for (let i = 0; i < size; ++i) {\n        aggr.write(cells[i], result, i);\n      }\n    });\n  } else {\n    aggrs.forEach(aggr => {\n      const cell = reduceFlat(table, aggr);\n      aggr.write(cell, result, 0);\n    });\n  }\n\n  return result;\n}\n\nexport function reducers(ops, stream) {\n  const aggrs = [];\n  const fields = {};\n\n  // group operators by field inputs\n  for (const op of ops) {\n    const key = op.fields.map(f => f + '').join(',');\n    (fields[key] || (fields[key] = [])).push(op);\n  }\n\n  // generate a field reducer for each field\n  for (const key in fields) {\n    aggrs.push(fieldReducer(fields[key], stream));\n  }\n\n  return aggrs;\n}\n\nexport function reduceFlat(table, reducer) {\n  // initialize aggregation cell\n  const cell = reducer.init();\n\n  // compute aggregate values\n  // inline the following for performance:\n  // table.scan((row, data) => reducer.add(cell, row, data));\n  const n = table.totalRows();\n  const data = table.data();\n  const bits = table.mask();\n\n  if (table.isOrdered()) {\n    const idx = table.indices();\n    for (let i = 0; i < n; ++i) {\n      reducer.add(cell, idx[i], data);\n    }\n  } else if (bits) {\n    for (let i = bits.next(0); i >= 0; i = bits.next(i + 1)) {\n      reducer.add(cell, i, data);\n    }\n  } else {\n    for (let i = 0; i < n; ++i) {\n      reducer.add(cell, i, data);\n    }\n  }\n\n  return cell;\n}\n\nexport function reduceGroups(table, reducer, groups) {\n  const { keys, size } = groups;\n\n  // initialize aggregation cells\n  const cells = repeat(size, () => reducer.init());\n\n  // compute aggregate values\n  // inline the following for performance:\n  // table.scan((row, data) => reducer.add(cells[keys[row]], row, data));\n  const data = table.data();\n\n  if (table.isOrdered()) {\n    const idx = table.indices();\n    const m = idx.length;\n    for (let i = 0; i < m; ++i) {\n      const row = idx[i];\n      reducer.add(cells[keys[row]], row, data);\n    }\n  } else if (table.isFiltered()) {\n    const bits = table.mask();\n    for (let i = bits.next(0); i >= 0; i = bits.next(i + 1)) {\n      reducer.add(cells[keys[i]], i, data);\n    }\n  } else {\n    const n = table.totalRows();\n    for (let i = 0; i < n; ++i) {\n      reducer.add(cells[keys[i]], i, data);\n    }\n  }\n\n  return cells;\n}\n\nexport function groupOutput(cols, groups) {\n  const { get, names, rows, size } = groups;\n\n  // write group values to output columns\n  const m = names.length;\n  for (let j = 0; j < m; ++j) {\n    const col = cols.add(names[j], Array(size));\n    const val = get[j];\n    for (let i = 0; i < size; ++i) {\n      col[i] = val(rows[i]);\n    }\n  }\n}","export default function(compare) {\n  return {\n    left(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        const mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      }\n      return lo;\n    },\n    right(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        const mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;\n        else lo = mid + 1;\n      }\n      return lo;\n    }\n  };\n}\n","import ascending from '../../util/ascending';\nimport bisector from '../../util/bisector';\nimport concat from '../../util/concat';\nimport unroll from '../../util/unroll';\n\nconst bisect = bisector(ascending);\n\nexport default function(data, frame, adjust, ops, aggrs) {\n  let rows, peer, cells, result, key;\n  const isPeer = index => peer[index - 1] === peer[index];\n  const numOps = ops.length;\n  const numAgg = aggrs.length;\n\n  const evaluate = ops.length\n    ? unroll(\n        ['w', 'r', 'k'],\n        '{' + concat(ops, (_, i) => `r[_${i}.id][k]=_${i}.value(w,_${i}.get);`) + '}',\n        ops\n      )\n    : () => {};\n\n  const w = {\n    i0: 0,\n    i1: 0,\n    index: 0,\n    size: 0,\n    peer: isPeer,\n\n    init(partition, peers, results, group) {\n      w.index = w.i0 = w.i1 = 0;\n      w.size = peers.length;\n      rows = partition;\n      peer = peers;\n      result = results;\n      key = group;\n\n      // initialize aggregates\n      cells = aggrs ? aggrs.map(aggr => aggr.init()) : null;\n\n      // initialize window ops\n      for (let i = 0; i < numOps; ++i) {\n        ops[i].init();\n      }\n\n      return w;\n    },\n\n    value(index, get) {\n      return get(rows[index], data);\n    },\n\n    step(idx) {\n      const [f0, f1] = frame;\n      const n = w.size;\n      const p0 = w.i0;\n      const p1 = w.i1;\n\n      w.i0 = f0 != null ? Math.max(0, idx - Math.abs(f0)) : 0;\n      w.i1 = f1 != null ? Math.min(n, idx + Math.abs(f1) + 1) : n;\n      w.index = idx;\n\n      if (adjust) {\n        if (w.i0 > 0 && isPeer(w.i0)) {\n          w.i0 = bisect.left(peer, peer[w.i0]);\n        }\n        if (w.i1 < n && isPeer(w.i1)) {\n          w.i1 = bisect.right(peer, peer[w.i1 - 1]);\n        }\n      }\n\n      // evaluate aggregates\n      for (let i = 0; i < numAgg; ++i) {\n        const aggr = aggrs[i];\n        const cell = cells[i];\n        for (let j = p0; j < w.i0; ++j) {\n          aggr.rem(cell, rows[j], data);\n        }\n        for (let j = p1; j < w.i1; ++j) {\n          aggr.add(cell, rows[j], data);\n        }\n        aggr.write(cell, result, key);\n      }\n\n      // evaluate window ops\n      evaluate(w, result, key);\n\n      return result;\n    }\n  };\n\n  return w;\n}","import { reducers } from '../reduce/util';\nimport { getWindow, hasAggregate } from '../../op';\nimport concat from '../../util/concat';\nimport unroll from '../../util/unroll';\nimport windowState from './window-state';\n\nconst frameValue = op =>\n  (op.frame || [null, null]).map(v => Number.isFinite(v) ? Math.abs(v) : null);\n\nconst peersValue = op => !!op.peers;\n\nfunction windowOp(spec) {\n  const { id, name, fields = [], params = [] } = spec;\n  const op = getWindow(name).create(...params);\n  if (fields.length) op.get = fields[0];\n  op.id = id;\n  return op;\n}\n\nexport function window(table, cols, exprs, result = {}, ops) {\n  // instantiate window states\n  const data = table.data();\n  const states = windowStates(ops, data);\n  const nstate = states.length;\n\n  const write = unroll(\n    ['r', 'd', 'op'],\n    '{' + concat(cols, (_, i) => `_${i}[r] = $${i}(r, d, op);`) + '}',\n    cols, exprs\n  );\n\n  // scan each ordered partition\n  table.partitions().forEach((rows, key) => {\n    const size = rows.length;\n    const peers = windowPeers(table, rows);\n\n    // initialize window states\n    for (let i = 0; i < nstate; ++i) {\n      states[i].init(rows, peers, result, key);\n    }\n\n    // calculate window values per-row\n    const op = id => result[id][key];\n    for (let index = 0; index < size; ++index) {\n      // advance window frame, updates result object\n      for (let i = 0; i < nstate; ++i) {\n        states[i].step(index);\n      }\n      write(rows[index], data, op);\n    }\n  });\n}\n\nfunction windowStates(ops, data) {\n  const map = {};\n\n  // group operations by window frame parameters\n  ops.forEach(op => {\n    const frame = frameValue(op);\n    const peers = peersValue(op);\n    const key = `${frame},${peers}`;\n    const { aggOps, winOps } = map[key] || (map[key] = {\n      frame,\n      peers,\n      aggOps: [],\n      winOps: []\n    });\n    hasAggregate(op.name)\n      ? aggOps.push(op)\n      : winOps.push(windowOp(op));\n  });\n\n  return Object.values(map).map(_ => windowState(\n    data, _.frame, _.peers, _.winOps,\n    reducers(_.aggOps, _.frame[0] != null ? -1 : 1)\n  ));\n}\n\nfunction windowPeers(table, rows) {\n  if (table.isOrdered()) {\n    // generate peer ids for sort equality checking\n    const compare = table.comparator();\n    const data = table.data();\n    const nrows = rows.length;\n    const peers = new Uint32Array(nrows);\n    for (let i = 1, index = 0; i < nrows; ++i) {\n      peers[i] = compare(rows[i - 1], rows[i], data) ? ++index : index;\n    }\n    return peers;\n  } else {\n    // no sort, no peers: reuse row indices as peer ids\n    return rows;\n  }\n}","import { window } from './window/window';\nimport { aggregate } from './reduce/util';\nimport { hasWindow } from '../op';\nimport columnSet from '../table/column-set';\nimport repeat from '../util/repeat';\n\nfunction isWindowed(op) {\n  return hasWindow(op.name) ||\n    op.frame && (\n      Number.isFinite(op.frame[0]) ||\n      Number.isFinite(op.frame[1])\n    );\n}\n\nexport default function(table, { names, exprs, ops }, options = {}) {\n  // instantiate output data\n  const total = table.totalRows();\n  const cols = columnSet(options.drop ? null : table);\n  const data = names.map(name => cols.add(name, Array(total)));\n\n  // analyze operations, compute non-windowed aggregates\n  const [ aggOps, winOps ] = segmentOps(ops);\n\n  const size = table.isGrouped() ? table.groups().size : 1;\n  const result = aggregate(\n    table, aggOps,\n    repeat(ops.length, () => Array(size))\n  );\n\n  // perform table scans to generate output values\n  winOps.length\n    ? window(table, data, exprs, result, winOps)\n    : output(table, data, exprs, result);\n\n  return table.create(cols);\n}\n\nfunction segmentOps(ops) {\n  const aggOps = [];\n  const winOps = [];\n  const n = ops.length;\n\n  for (let i = 0; i < n; ++i) {\n    const op = ops[i];\n    op.id = i;\n    (isWindowed(op) ? winOps : aggOps).push(op);\n  }\n\n  return [aggOps, winOps];\n}\n\nfunction output(table, cols, exprs, result) {\n  const bits = table.mask();\n  const data = table.data();\n  const { keys } = table.groups() || {};\n  const op = keys\n    ? (id, row) => result[id][keys[row]]\n    : id => result[id][0];\n\n  const m = cols.length;\n  for (let j = 0; j < m; ++j) {\n    const get = exprs[j];\n    const col = cols[j];\n\n    // inline the following for performance:\n    // table.scan((i, data) => col[i] = get(i, data, op));\n    if (bits) {\n      for (let i = bits.next(0); i >= 0; i = bits.next(i + 1)) {\n        col[i] = get(i, data, op);\n      }\n    } else {\n      const n = table.totalRows();\n      for (let i = 0; i < n; ++i) {\n        col[i] = get(i, data, op);\n      }\n    }\n  }\n}","import { aggregateGet } from './reduce/util';\nimport columnSet from '../table/column-set';\nimport toArray from '../util/to-array';\n\nexport default function(table, { names = [], exprs = [], ops = [] }, options = {}) {\n  if (!names.length) return table;\n\n  const limit = options.limit > 0 ? +options.limit : Infinity;\n  const index = options.index\n    ? options.index === true ? 'index' : options.index + ''\n    : null;\n  const drop = new Set(options.drop);\n  const get = aggregateGet(table, ops, exprs);\n\n  // initialize output columns\n  const cols = columnSet();\n  const nset = new Set(names);\n  const priors = [];\n  const copies = [];\n  const unroll = [];\n\n  // original and copied columns\n  table.columnNames().forEach(name => {\n    if (!drop.has(name)) {\n      const col = cols.add(name, []);\n      if (!nset.has(name)) {\n        priors.push(table.column(name));\n        copies.push(col);\n      }\n    }\n  });\n\n  // unrolled output columns\n  names.forEach(name => {\n    if (!drop.has(name)) {\n      if (!cols.has(name)) cols.add(name, []);\n      unroll.push(cols.data[name]);\n    }\n  });\n\n  // index column, if requested\n  const icol = index ? cols.add(index, []) : null;\n\n  let start = 0;\n  const m = priors.length;\n  const n = unroll.length;\n\n  const copy = (row, maxlen) => {\n    for (let i = 0; i < m; ++i) {\n      copies[i].length = start + maxlen;\n      copies[i].fill(priors[i].get(row), start, start + maxlen);\n    }\n  };\n\n  const indices = icol\n    ? (row, maxlen) => {\n        for (let i = 0; i < maxlen; ++i) {\n          icol[row + i] = i;\n        }\n      }\n    : () => {};\n\n  if (n === 1) {\n    // optimize common case of one array-valued column\n    const fn = get[0];\n    const col = unroll[0];\n\n    table.scan((row, data) => {\n      // extract array data\n      const array = toArray(fn(row, data));\n      const maxlen = Math.min(array.length, limit);\n\n      // copy original table data\n      copy(row, maxlen);\n\n      // copy unrolled array data\n      for (let j = 0; j < maxlen; ++j) {\n        col[start + j] = array[j];\n      }\n\n      // fill in array indices\n      indices(start, maxlen);\n\n      start += maxlen;\n    });\n  } else {\n    table.scan((row, data) => {\n      let maxlen = 0;\n\n      // extract parallel array data\n      const arrays = get.map(fn => {\n        const value = toArray(fn(row, data));\n        maxlen = Math.min(Math.max(maxlen, value.length), limit);\n        return value;\n      });\n\n      // copy original table data\n      copy(row, maxlen);\n\n      // copy unrolled array data\n      for (let i = 0; i < n; ++i) {\n        const col = unroll[i];\n        const arr = arrays[i];\n        for (let j = 0; j < maxlen; ++j) {\n          col[start + j] = arr[j];\n        }\n      }\n\n      // fill in array indices\n      indices(start, maxlen);\n\n      start += maxlen;\n    });\n  }\n\n  return table.create(cols.new());\n}","import parse from '../../expression/parse';\nimport field from '../../helpers/field';\nimport resolve from '../../helpers/selection';\nimport assign from '../../util/assign';\nimport error from '../../util/error';\nimport isNumber from '../../util/is-number';\nimport isObject from '../../util/is-object';\nimport isString from '../../util/is-string';\nimport isFunction from '../../util/is-function';\nimport toArray from '../../util/to-array';\n\nexport default function(name, table, params, options = { window: false }) {\n  const exprs = new Map();\n\n  const marshal = param => {\n    param = isNumber(param) ? table.columnName(param) : param;\n    isString(param) ? exprs.set(param, field(param))\n      : isFunction(param) ? resolve(table, param).forEach(marshal)\n      : isObject(param) ? assign(exprs, param)\n      : error(`Invalid ${name} value: ${param+''}`);\n  };\n\n  toArray(params).forEach(marshal);\n\n  if (options.preparse) {\n    options.preparse(exprs);\n  }\n\n  return parse(exprs, { table, ...options });\n}","import { aggregateGet } from './reduce/util';\nimport columnSet from '../table/column-set';\nimport isValid from '../util/is-valid';\nimport keyFunction from '../util/key-function';\nimport unroll from '../util/unroll';\n\nexport default function(table, values, keys, arrays) {\n  const write = keys && keys.length;\n  return impute(\n    write ? expand(table, keys, arrays) : table,\n    values,\n    write\n  );\n}\n\nfunction impute(table, { names, exprs, ops }, write) {\n  const gets = aggregateGet(table, ops, exprs);\n  const cols = write ? null : columnSet(table);\n  const rows = table.totalRows();\n\n  names.forEach((name, i) => {\n    const col = table.column(name);\n    const out = write ? col.data : cols.add(name, Array(rows));\n    const get = gets[i];\n\n    table.scan(idx => {\n      const v = col.get(idx);\n      out[idx] = !isValid(v) ? get(idx) : v;\n    });\n  });\n\n  return write ? table : table.create(cols);\n}\n\nfunction expand(table, keys, values) {\n  const groups = table.groups();\n  const data = table.data();\n\n  // expansion keys and accessors\n  const keyNames = (groups ? groups.names : []).concat(keys);\n  const keyGet = (groups ? groups.get : [])\n    .concat(keys.map(key => table.getter(key)));\n\n  // build hash of existing rows\n  const hash = new Set();\n  const keyTable = keyFunction(keyGet);\n  table.scan((idx, data) => hash.add(keyTable(idx, data)));\n\n  // initialize output table data\n  const names = table.columnNames();\n  const cols = columnSet();\n  const out = names.map(name => cols.add(name, []));\n  names.forEach((name, i) => {\n    const old = data[name];\n    const col = out[i];\n    table.scan(row => col.push(old.get(row)));\n  });\n\n  // enumerate expanded value sets and augment output table\n  const keyEnum = keyFunction(keyGet.map((k, i) => a => a[i]));\n  const set = unroll(\n    'v',\n    '{' + out.map((_, i) => `_${i}.push(v[$${i}]);`).join('') + '}',\n    out, names.map(name => keyNames.indexOf(name))\n  );\n\n  if (groups) {\n    let row = groups.keys.length;\n    const prod = values.reduce((p, a) => p * a.length, groups.size);\n    const keys = new Uint32Array(prod + (row - hash.size));\n    keys.set(groups.keys);\n    enumerate(groups, values, (vec, idx) => {\n      if (!hash.has(keyEnum(vec))) {\n        set(vec);\n        keys[row++] = idx[0];\n      }\n    });\n    cols.groupby({ ...groups, keys });\n  } else {\n    enumerate(groups, values, vec => {\n      if (!hash.has(keyEnum(vec))) set(vec);\n    });\n  }\n\n  return table.create(cols.new());\n}\n\nfunction enumerate(groups, values, callback) {\n  const offset = groups ? groups.get.length : 0;\n  const pad = groups ? 1 : 0;\n  const len = pad + values.length;\n  const lens = new Int32Array(len);\n  const idxs = new Int32Array(len);\n  const set = [];\n\n  if (groups) {\n    const { get, rows, size } = groups;\n    lens[0] = size;\n    set.push((vec, idx) => {\n      const row = rows[idx];\n      for (let i = 0; i < offset; ++i) {\n        vec[i] = get[i](row);\n      }\n    });\n  }\n\n  values.forEach((a, i) => {\n    const j = i + offset;\n    lens[i + pad] = a.length;\n    set.push((vec, idx) => vec[j] = a[idx]);\n  });\n\n  const vec = Array(offset + values.length);\n\n  // initialize value vector\n  for (let i = 0; i < len; ++i) {\n    set[i](vec, 0);\n  }\n  callback(vec, idxs);\n\n  // enumerate all combinations of values\n  for (let i = len - 1; i >= 0;) {\n    const idx = ++idxs[i];\n    if (idx < lens[i]) {\n      set[i](vec, idx);\n      callback(vec, idxs);\n      i = len - 1;\n    } else {\n      idxs[i] = 0;\n      set[i](vec, 0);\n      --i;\n    }\n  }\n}","import { aggregate, groupOutput } from './reduce/util';\nimport columnSet from '../table/column-set';\n\nexport default function(table, { names, exprs, ops }) {\n  // output data\n  const cols = columnSet();\n  const groups = table.groups();\n\n  // write groupby fields to output\n  if (groups) groupOutput(cols, groups);\n\n  // compute and write aggregate output\n  output(names, exprs, groups, aggregate(table, ops), cols);\n\n  // return output table\n  return table.create(cols.new());\n}\n\nfunction output(names, exprs, groups, result = [], cols) {\n  if (!exprs.length) return;\n  const size = groups ? groups.size : 1;\n  const op = (id, row) => result[id][row];\n  const n = names.length;\n\n  for (let i = 0; i < n; ++i) {\n    const get = exprs[i];\n    if (get.field != null) {\n      // if expression is op only, use aggregates directly\n      cols.add(names[i], result[get.field]);\n    } else if (size > 1) {\n      // if multiple groups, evaluate expression for each\n      const col = cols.add(names[i], Array(size));\n      for (let j = 0; j < size; ++j) {\n        col[j] = get(j, null, op);\n      }\n    } else {\n      // if only one group, no need to loop\n      cols.add(names[i], [ get(0, null, op) ]);\n    }\n  }\n}","import _impute from '../engine/impute';\nimport _rollup from '../engine/rollup';\nimport parse from '../expression/parse';\nimport parseValues from './util/parse';\nimport { array_agg_distinct } from '../op/op-api';\nimport error from '../util/error';\nimport toString from '../util/to-string';\n\nexport default function(table, values, options = {}) {\n  values = parse(values, { table });\n\n  values.names.forEach(name =>\n    table.column(name) ? 0 : error(`Invalid impute column ${toString(name)}`)\n  );\n\n  if (options.expand) {\n    const opt = { preparse, aggronly: true };\n    const params = parseValues('impute', table, options.expand, opt);\n    const result = _rollup(table.ungroup(), params);\n    return _impute(\n      table, values, params.names,\n      params.names.map(name => result.get(name, 0))\n    );\n  } else {\n    return _impute(table, values);\n  }\n}\n\n// map direct field reference to \"unique\" aggregate\nfunction preparse(map) {\n  map.forEach((value, key) =>\n    value.field ? map.set(key, array_agg_distinct(value + '')) : 0\n  );\n}","export function rowLookup(table, hash) {\n  const lut = new Map();\n  table.scan((row, data) => {\n    const key = hash(row, data);\n    if (key != null && key === key) {\n      lut.set(key, row);\n    }\n  });\n  return lut;\n}\n\nexport function indexLookup(idx, data, hash) {\n  const lut = new Map();\n  const n = idx.length;\n  for (let i = 0; i < n; ++i) {\n    const row = idx[i];\n    const key = hash(row, data);\n    if (key != null && key === key) {\n      lut.has(key)\n        ? lut.get(key).push(i)\n        : lut.set(key, [i]);\n    }\n  }\n  return lut;\n}","import { indexLookup } from './join/lookup';\nimport columnSet from '../table/column-set';\nimport concat from '../util/concat';\nimport isArray from '../util/is-array';\nimport unroll from '../util/unroll';\n\nfunction emitter(columns, getters) {\n  const args = ['i', 'a', 'j', 'b'];\n  return unroll(\n    args,\n    '{' + concat(columns, (_, i) => `_${i}.push($${i}(${args}));`) + '}',\n    columns, getters\n  );\n}\n\nexport default function(tableL, tableR, predicate, { names, exprs }, options = {}) {\n  // initialize data for left table\n  const dataL = tableL.data();\n  const idxL = tableL.indices(false);\n  const nL = idxL.length;\n  const hitL = new Int32Array(nL);\n\n  // initialize data for right table\n  const dataR = tableR.data();\n  const idxR = tableR.indices(false);\n  const nR = idxR.length;\n  const hitR = new Int32Array(nR);\n\n  // initialize output data\n  const ncols = names.length;\n  const cols = columnSet();\n  const columns = Array(ncols);\n  const getters = Array(ncols);\n  for (let i = 0; i < names.length; ++i) {\n    columns[i] = cols.add(names[i], []);\n    getters[i] = exprs[i];\n  }\n  const emit = emitter(columns, getters);\n\n  // perform join\n  const join = isArray(predicate) ? hashJoin : loopJoin;\n  join(emit, predicate, dataL, dataR, idxL, idxR, hitL, hitR, nL, nR);\n\n  if (options.left) {\n    for (let i = 0; i < nL; ++i) {\n      if (!hitL[i]) {\n        emit(idxL[i], dataL, -1, dataR);\n      }\n    }\n  }\n\n  if (options.right) {\n    for (let j = 0; j < nR; ++j) {\n      if (!hitR[j]) {\n        emit(-1, dataL, idxR[j], dataR);\n      }\n    }\n  }\n\n  return tableL.create(cols.new());\n}\n\nfunction loopJoin(emit, predicate, dataL, dataR, idxL, idxR, hitL, hitR, nL, nR) {\n  // perform nested-loops join\n  for (let i = 0; i < nL; ++i) {\n    const rowL = idxL[i];\n    for (let j = 0; j < nR; ++j) {\n      const rowR = idxR[j];\n      if (predicate(rowL, dataL, rowR, dataR)) {\n        emit(rowL, dataL, rowR, dataR);\n        hitL[i] = 1;\n        hitR[j] = 1;\n      }\n    }\n  }\n}\n\nfunction hashJoin(emit, [keyL, keyR], dataL, dataR, idxL, idxR, hitL, hitR, nL, nR) {\n  // determine which table to hash\n  let dataScan, keyScan, hitScan, idxScan;\n  let dataHash, keyHash, hitHash, idxHash;\n  let emitScan = emit;\n  if (nL >= nR) {\n    dataScan = dataL; keyScan = keyL; hitScan = hitL; idxScan = idxL;\n    dataHash = dataR; keyHash = keyR; hitHash = hitR; idxHash = idxR;\n  } else {\n    dataScan = dataR; keyScan = keyR; hitScan = hitR; idxScan = idxR;\n    dataHash = dataL; keyHash = keyL; hitHash = hitL; idxHash = idxL;\n    emitScan = (i, a, j, b) => emit(j, b, i, a);\n  }\n\n  // build lookup table\n  const lut = indexLookup(idxHash, dataHash, keyHash);\n\n  // scan other table\n  const m = idxScan.length;\n  for (let j = 0; j < m; ++j) {\n    const rowScan = idxScan[j];\n    const list = lut.get(keyScan(rowScan, dataScan));\n    if (list) {\n      const n = list.length;\n      for (let k = 0; k < n; ++k) {\n        const i = list[k];\n        emitScan(rowScan, dataScan, idxHash[i], dataHash);\n        hitHash[i] = 1;\n      }\n      hitScan[j] = 1;\n    }\n  }\n}","import parse from '../../expression/parse';\nimport field from '../../helpers/field';\nimport error from '../../util/error';\nimport isFunction from '../../util/is-function';\nimport isNumber from '../../util/is-number';\nimport isObject from '../../util/is-object';\nimport isString from '../../util/is-string';\nimport keyFunction from '../../util/key-function';\nimport toArray from '../../util/to-array';\n\nexport default function(name, table, params) {\n  const exprs = new Map();\n\n  toArray(params).forEach((param, i) => {\n    param = isNumber(param) ? table.columnName(param) : param;\n    isString(param) ? exprs.set(i, field(param))\n      : isFunction(param) || isObject(param) && param.expr ? exprs.set(i, param)\n      : error(`Invalid ${name} key value: ${param+''}`);\n  });\n\n  const fn = parse(exprs, { table, aggregate: false, window: false });\n  return keyFunction(fn.exprs, true);\n}","import parseKey from './parse-key';\nimport error from '../../util/error';\nimport intersect from '../../util/intersect';\nimport isArray from '../../util/is-array';\nimport isString from '../../util/is-string';\n\nexport function inferKeys(tableL, tableR, on) {\n  if (!on) {\n    // perform natural join if join condition not provided\n    const isect = intersect(tableL.columnNames(), tableR.columnNames());\n    if (!isect.length) error('Natural join requires shared column names.');\n    on = [isect, isect];\n  } else if (isString(on)) {\n    on = [on, on];\n  } else if (isArray(on) && on.length === 1) {\n    on = [on[0], on[0]];\n  }\n\n  return on;\n}\n\nexport function keyPredicate(tableL, tableR, onL, onR) {\n  if (onL.length !== onR.length) {\n    error('Mismatched number of join keys');\n  }\n  return [\n    parseKey('join', tableL, onL),\n    parseKey('join', tableR, onR)\n  ];\n}","export default function intersect(a, b) {\n  const set = new Set(b);\n  return a.filter(x => set.has(x));\n}","import _join from '../engine/join';\nimport { inferKeys, keyPredicate } from './util/join-keys';\nimport parseValue from './util/parse';\nimport parse from '../expression/parse';\nimport { all, not } from '../helpers/selection';\nimport isArray from '../util/is-array';\nimport isString from '../util/is-string';\nimport toArray from '../util/to-array';\nimport toString from '../util/to-string';\n\nconst OPT_L = { aggregate: false, window: false };\nconst OPT_R = { ...OPT_L, index: 1 };\n\nexport default function(tableL, tableR, on, values, options = {}) {\n  on = inferKeys(tableL, tableR, on);\n  const optParse = { join: [tableL, tableR] };\n  let predicate;\n\n  if (isArray(on)) {\n    const [onL, onR] = on.map(toArray);\n    predicate = keyPredicate(tableL, tableR, onL, onR);\n\n    if (!values) {\n      // infer output columns, suppress duplicated key columns\n      values = inferValues(tableL, onL, onR, options);\n    }\n  } else {\n    predicate = parse({ on }, optParse).exprs[0];\n\n    if (!values) {\n      // include all table columns if values not provided\n      values = [all(), all()];\n    }\n  }\n\n  return _join(\n    tableL, tableR, predicate,\n    parseValues(tableL, tableR, values, optParse, options && options.suffix),\n    options\n  );\n}\n\nfunction inferValues(tableL, onL, onR, options) {\n  const isect = [];\n  onL.forEach((s, i) => isString(s) && s === onR[i] ? isect.push(s) : 0);\n  const vR = not(isect);\n\n  if (options.left && options.right) {\n    // for full join, merge shared key columns together\n    const shared = new Set(isect);\n    return [\n      tableL.columnNames().map(s => {\n        const c = `[${toString(s)}]`;\n        return shared.has(s)\n          ? { [s]: `(a, b) => a${c} == null ? b${c} : a${c}` }\n          : s;\n      }),\n      vR\n    ];\n  }\n\n  return options.right ? [vR, all()] : [all(), vR];\n}\n\nfunction parseValues(tableL, tableR, values, optParse, suffix = []) {\n  if (isArray(values)) {\n    let vL, vR, vJ, n = values.length;\n    vL = vR = vJ = { names: [], exprs: [] };\n\n    if (n--) {\n      vL = parseValue('join', tableL, values[0], optParse);\n    }\n    if (n--) {\n      vR = parseValue('join', tableR, values[1], OPT_R);\n    }\n    if (n--) {\n      vJ = parse(values[2], optParse);\n    }\n\n    // handle name collisions\n    const rename = new Set();\n    const namesL = new Set(vL.names);\n    vR.names.forEach(name => {\n      if (namesL.has(name)) {\n        rename.add(name);\n      }\n    });\n    if (rename.size) {\n      rekey(vL.names, rename, suffix[0] || '_1');\n      rekey(vR.names, rename, suffix[1] || '_2');\n    }\n\n    return {\n      names: vL.names.concat(vR.names, vJ.names),\n      exprs: vL.exprs.concat(vR.exprs, vJ.exprs)\n    };\n  } else {\n    return parse(values, optParse);\n  }\n}\n\nfunction rekey(names, rename, suffix) {\n  names.forEach((name, i) => rename.has(name)\n    ? (names[i] = name + suffix)\n    : 0);\n}","import { rowLookup } from './join/lookup';\nimport BitSet from '../table/bit-set';\nimport isArray from '../util/is-array';\n\nexport default function(tableL, tableR, predicate, options = {}) {\n  // calculate semi-join filter mask\n  const filter = new BitSet(tableL.totalRows());\n  const join = isArray(predicate) ? hashSemiJoin : loopSemiJoin;\n  join(filter, tableL, tableR, predicate);\n\n  // if anti-join, negate the filter\n  if (options.anti) {\n    filter.not().and(tableL.mask());\n  }\n\n  return tableL.create({ filter });\n}\n\nfunction hashSemiJoin(filter, tableL, tableR, [keyL, keyR]) {\n  // build lookup table\n  const lut = rowLookup(tableR, keyR);\n\n  // scan table, update filter with matches\n  tableL.scan((rowL, data) => {\n    const rowR = lut.get(keyL(rowL, data));\n    if (rowR >= 0) filter.set(rowL);\n  });\n}\n\nfunction loopSemiJoin(filter, tableL, tableR, predicate) {\n  const nL = tableL.numRows();\n  const nR = tableR.numRows();\n  const dataL = tableL.data();\n  const dataR = tableR.data();\n\n  if (tableL.isFiltered() || tableR.isFiltered()) {\n    // use indices as at least one table is filtered\n    const idxL = tableL.indices(false);\n    const idxR = tableR.indices(false);\n    for (let i = 0; i < nL; ++i) {\n      const rowL = idxL[i];\n      for (let j = 0; j < nR; ++j) {\n        if (predicate(rowL, dataL, idxR[j], dataR)) {\n          filter.set(rowL);\n          break;\n        }\n      }\n    }\n  } else {\n    // no filters, enumerate row indices directly\n    for (let i = 0; i < nL; ++i) {\n      for (let j = 0; j < nR; ++j) {\n        if (predicate(i, dataL, j, dataR)) {\n          filter.set(i);\n          break;\n        }\n      }\n    }\n  }\n}\n\n// export default function(tableL, tableR, predicate, options = {}) {\n//   const filter = new BitSet(tableL.totalRows());\n//   const nL = tableL.numRows();\n//   const nR = tableR.numRows();\n//   const dataL = tableL.data();\n//   const dataR = tableR.data();\n\n//   if (tableL.isFiltered() || tableR.isFiltered()) {\n//     // use indices as at least one table is filtered\n//     const idxL = tableL.indices(false);\n//     const idxR = tableR.indices(false);\n//     for (let i = 0; i < nL; ++i) {\n//       const rowL = idxL[i];\n//       for (let j = 0; j < nR; ++j) {\n//         if (predicate(rowL, dataL, idxR[j], dataR)) {\n//           filter.set(rowL);\n//           break;\n//         }\n//       }\n//     }\n//   } else {\n//     // no filters, enumerate row indices directly\n//     for (let i = 0; i < nL; ++i) {\n//       for (let j = 0; j < nR; ++j) {\n//         if (predicate(i, dataL, j, dataR)) {\n//           filter.set(i);\n//           break;\n//         }\n//       }\n//     }\n//   }\n\n//   // if anti-join, negate the filter\n//   if (options.anti) {\n//     filter.not().and(tableL.mask());\n//   }\n\n//   return tableL.create({ filter });\n// }","import _join_filter from '../engine/join-filter';\nimport { inferKeys, keyPredicate } from './util/join-keys';\nimport parse from '../expression/parse';\nimport isArray from '../util/is-array';\nimport toArray from '../util/to-array';\n\nexport default function(tableL, tableR, on, options) {\n  on = inferKeys(tableL, tableR, on);\n\n  const predicate = isArray(on)\n    ? keyPredicate(tableL, tableR, ...on.map(toArray))\n    : parse({ on }, { join: [tableL, tableR] }).exprs[0];\n\n  return _join_filter(tableL, tableR, predicate, options);\n}","import { aggregate, aggregateGet, groupOutput } from './reduce/util';\nimport columnSet from '../table/column-set';\n\nconst opt = (value, defaultValue) => value != null ? value : defaultValue;\n\nexport default function(table, on, values, options = {}) {\n  const { keys, keyColumn } = pivotKeys(table, on, options);\n  const vsep = opt(options.valueSeparator, '_');\n  const namefn = values.names.length > 1\n    ? (i, name) => name + vsep + keys[i]\n    : i => keys[i];\n\n  // perform separate aggregate operations for each key\n  // if keys do not match, emit NaN so aggregate skips it\n  // use custom toString method for proper field resolution\n  const results = keys.map(\n    k => aggregate(table, values.ops.map(op => {\n      const fields = op.fields.map(f => {\n        const fn = (r, d) => k === keyColumn[r] ? f(r, d) : NaN;\n        fn.toString = () => k + ':' + f + '';\n        return fn;\n      });\n      return { ...op, fields };\n    }))\n  );\n\n  return table.create(output(values, namefn, table.groups(), results));\n}\n\nfunction pivotKeys(table, on, options) {\n  const limit = options.limit > 0 ? +options.limit : Infinity;\n  const sort = opt(options.sort, true);\n  const ksep = opt(options.keySeparator, '_');\n\n  // construct key accessor function\n  const get = aggregateGet(table, on.ops, on.exprs);\n  const key = get.length === 1\n    ? get[0]\n    : (row, data) => get.map(fn => fn(row, data)).join(ksep);\n\n  // generate vector of per-row key values\n  const kcol = Array(table.totalRows());\n  table.scan((row, data) => kcol[row] = key(row, data));\n\n  // collect unique key values\n  const uniq = aggregate(\n    table.ungroup(),\n    [ {\n      id: 0,\n      name: 'array_agg_distinct',\n      fields: [(row => kcol[row])], params: []\n    } ]\n  )[0][0];\n\n  // get ordered set of unique key values\n  const keys = sort ? uniq.sort() : uniq;\n\n  // return key values\n  return {\n    keys: Number.isFinite(limit) ? keys.slice(0, limit) : keys,\n    keyColumn: kcol\n  };\n}\n\nfunction output({ names, exprs }, namefn, groups, results) {\n  const size = groups ? groups.size : 1;\n  const cols = columnSet();\n  const m = results.length;\n  const n = names.length;\n\n  let result;\n  const op = (id, row) => result[id][row];\n\n  // write groupby fields to output\n  if (groups) groupOutput(cols, groups);\n\n  // write pivot values to output\n  for (let i = 0; i < n; ++i) {\n    const get = exprs[i];\n    if (get.field != null) {\n      // if expression is op only, use aggregates directly\n      for (let j = 0; j < m; ++j) {\n        cols.add(namefn(j, names[i]), results[j][get.field]);\n      }\n    } else if (size > 1) {\n      // if multiple groups, evaluate expression for each\n      for (let j = 0; j < m; ++j) {\n        result = results[j];\n        const col = cols.add(namefn(j, names[i]), Array(size));\n        for (let k = 0; k < size; ++k) {\n          col[k] = get(k, null, op);\n        }\n      }\n    } else {\n      // if only one group, no need to loop\n      for (let j = 0; j < m; ++j) {\n        result = results[j];\n        cols.add(namefn(j, names[i]), [ get(0, null, op) ]);\n      }\n    }\n  }\n\n  return cols.new();\n}","import _pivot from '../engine/pivot';\nimport { any } from '../op/op-api';\nimport parse from './util/parse';\n\n// TODO: enforce aggregates only (no output changes) for values\nexport default function(table, on, values, options) {\n  return _pivot(\n    table,\n    parse('fold', table, on),\n    parse('fold', table, values, { preparse, aggronly: true }),\n    options\n  );\n}\n\n// map direct field reference to \"any\" aggregate\nfunction preparse(map) {\n  map.forEach((value, key) =>\n    value.field ? map.set(key, any(value + '')) : 0\n  );\n}","import _rollup from '../engine/rollup';\nimport parse from '../expression/parse';\n\nexport default function(table, values) {\n  return _rollup(table, parse(values, { table, aggronly: true }));\n}","import ascending from './ascending';\nimport bisector from './bisector';\nimport { random } from './random';\n\nexport default function(buffer, replace, index, weight) {\n  return (\n    replace\n      ? (weight ? sampleRW : sampleRU)\n      : (weight ? sampleNW : sampleNU)\n  )(buffer.length, buffer, index, weight);\n}\n\n// uniform sampling with replacement\n// uses straightforward uniform sampling\nfunction sampleRU(size, buffer, index) {\n  const n = index.length;\n  for (let i = 0; i < size; ++i) {\n    buffer[i] = index[(n * random()) | 0];\n  }\n  return buffer;\n}\n\n// weighted sampling with replacement\n// uses binary search lookup against cumulative weight\nfunction sampleRW(size, buffer, index, weight) {\n  const n = index.length;\n  const w = new Float64Array(n);\n\n  let sum = 0;\n  for (let i = 0; i < n; ++i) {\n    w[i] = (sum += weight(index[i]));\n  }\n\n  const bisect = bisector(ascending).right;\n  for (let i = 0; i < size; ++i) {\n    buffer[i] = index[bisect(w, sum * random())];\n  }\n  return buffer;\n}\n\n// uniform sampling without replacement\n// uses reservoir sampling to build out the sample\n// https://en.wikipedia.org/wiki/Reservoir_sampling\nfunction sampleNU(size, buffer, index) {\n  const n = index.length;\n  if (size >= n) return index;\n\n  for (let i = 0; i < size; ++i) {\n    buffer[i] = index[i];\n  }\n\n  for (let i = size; i < n; ++i) {\n    const j = i * random();\n    if (j < size) {\n      buffer[j | 0] = index[i];\n    }\n  }\n\n  return buffer;\n}\n\n// weighted sample without replacement\n// uses method of Efraimidis and Spirakis\n// TODO: could use min-heap to improve efficiency\nfunction sampleNW(size, buffer, index, weight) {\n  const n = index.length;\n  if (size >= n) return index;\n\n  const w = new Float32Array(n);\n  const k = new Uint32Array(n);\n  for (let i = 0; i < n; ++i) {\n    k[i] = i;\n    w[i] = -Math.log(random()) / weight(index[i]);\n  }\n\n  k.sort((a, b) => w[a] - w[b]);\n  for (let i = 0; i < size; ++i) {\n    buffer[i] = index[k[i]];\n  }\n  return buffer;\n}","import sample from '../util/sample';\nimport _shuffle from '../util/shuffle';\n\nexport default function(table, size, weight, options = {}) {\n  const { replace, shuffle } = options;\n  const parts = table.partitions(false);\n\n  let total = 0;\n  size = parts.map((idx, group) => {\n    let s = size(group);\n    total += (s = (replace ? s : Math.min(idx.length, s)));\n    return s;\n  });\n\n  const samples = new Uint32Array(total);\n  let curr = 0;\n\n  parts.forEach((idx, group) => {\n    const sz = size[group];\n    const buf = samples.subarray(curr, curr += sz);\n\n    if (!replace && sz === idx.length) {\n      // sample size === data size, no replacement\n      // no need to sample, just copy indices\n      buf.set(idx);\n    } else {\n      sample(buf, replace, idx, weight);\n    }\n  });\n\n  if (shuffle !== false && (parts.length > 1 || !replace)) {\n    // sampling with replacement methods shuffle, so in\n    // that case a single partition is already good to go\n    _shuffle(samples);\n  }\n\n  return table.reify(samples);\n}","import { random } from './random';\n\nexport default function(array, lo = 0, hi = array.length) {\n  let n = hi - (lo = +lo);\n\n  while (n) {\n    const i = random() * n-- | 0;\n    const v = array[n + lo];\n    array[n + lo] = array[i + lo];\n    array[i + lo] = v;\n  }\n\n  return array;\n}","import _derive from '../engine/derive';\nimport _rollup from '../engine/rollup';\nimport _sample from '../engine/sample';\nimport parse from '../expression/parse';\nimport isNumber from '../util/is-number';\nimport isString from '../util/is-string';\n\nexport default function(table, size, options = {}) {\n  return _sample(\n    table,\n    parseSize(table, size),\n    parseWeight(table, options.weight),\n    options\n  );\n}\n\nconst get = col => row => col.get(row) || 0;\n\nfunction parseSize(table, size) {\n  return isNumber(size)\n    ? () => size\n    : get(_rollup(table, parse({ size }, { table })).column('size'));\n}\n\nfunction parseWeight(table, w) {\n  if (w == null) return null;\n  w = isNumber(w) ? table.columnName(w) : w;\n  return get(\n    isString(w)\n      ? table.column(w)\n      : _derive(table, parse({ w }, { table }), { drop: true }).column('w')\n  );\n}","import { aggregateGet } from './reduce/util';\nimport columnSet from '../table/column-set';\nimport NULL from '../util/null';\nimport toArray from '../util/to-array';\n\nexport default function(table, { names, exprs, ops = [] }, options = {}) {\n  if (names.length === 0) return table;\n\n  // ignore 'as' if there are multiple field names\n  const as = (names.length === 1 && options.as) || [];\n  const drop = options.drop == null ? true : !!options.drop;\n  const limit = options.limit == null\n    ? as.length || Infinity\n    : Math.max(1, +options.limit || 1);\n\n  const get = aggregateGet(table, ops, exprs);\n  const cols = columnSet();\n  const map = names.reduce((map, name, i) => map.set(name, i), new Map());\n\n  const add = (index, name) => {\n    const columns = spread(table, get[index], limit);\n    const n = columns.length;\n    for (let i = 0; i < n; ++i) {\n      cols.add(as[i] || `${name}_${i + 1}`, columns[i]);\n    }\n  };\n\n  table.columnNames().forEach(name => {\n    if (map.has(name)) {\n      if (!drop) cols.add(name, table.column(name));\n      add(map.get(name), name);\n      map.delete(name);\n    } else {\n      cols.add(name, table.column(name));\n    }\n  });\n\n  map.forEach(add);\n\n  return table.create(cols);\n}\n\nfunction spread(table, get, limit) {\n  const nrows = table.totalRows();\n  const columns = [];\n\n  table.scan((row, data) => {\n    const values = toArray(get(row, data));\n    const n = Math.min(values.length, limit);\n    while (columns.length < n) {\n      columns.push(Array(nrows).fill(NULL));\n    }\n    for (let i = 0; i < n; ++i) {\n      columns[i][row] = values[i];\n    }\n  });\n\n  return columns;\n}","import { aggregateGet } from './reduce/util';\nimport keyFunction from '../util/key-function';\n\nexport default function(table, exprs) {\n  return table.create({\n    groups: createGroups(table, exprs)\n  });\n}\n\nfunction createGroups(table, { names = [], exprs = [], ops = [] }) {\n  const n = names.length;\n  if (n === 0) return null;\n\n  // check for optimized path when grouping by a single field\n  // use pre-calculated groups if available\n  if (n === 1 && !table.isFiltered() && exprs[0].field) {\n    const col = table.column(exprs[0].field);\n    if (col.groups) return col.groups(names);\n  }\n\n  let get = aggregateGet(table, ops, exprs);\n  const getKey = keyFunction(get);\n  const nrows = table.totalRows();\n  const keys = new Uint32Array(nrows);\n  const index = {};\n  const rows = [];\n\n  // inline table scan for performance\n  const data = table.data();\n  const bits = table.mask();\n  if (bits) {\n    for (let i = bits.next(0); i >= 0; i = bits.next(i + 1)) {\n      const key = getKey(i, data) + '';\n      const val = index[key];\n      keys[i] = val != null ? val : (index[key] = rows.push(i) - 1);\n    }\n  } else {\n    for (let i = 0; i < nrows; ++i) {\n      const key = getKey(i, data) + '';\n      const val = index[key];\n      keys[i] = val != null ? val : (index[key] = rows.push(i) - 1);\n    }\n  }\n\n  if (!ops.length) {\n    // capture data in closure, so no interaction with select\n    get = get.map(f => row => f(row, data));\n  }\n\n  return { keys, get, names, rows, size: rows.length };\n}","import codegen from './codegen';\nimport parse from './parse';\nimport { aggregate } from '../engine/reduce/util';\n\n// generate code to compare a single field\nconst _compare = (u, v, lt, gt) =>\n  `((u = ${u}) < (v = ${v}) || u == null) && v != null ? ${lt}\n    : (u > v || v == null) && u != null ? ${gt}\n    : ((v = v instanceof Date ? +v : v), (u = u instanceof Date ? +u : u)) !== u && v === v ? ${lt}\n    : v !== v && u === u ? ${gt} : `;\n\nexport default function(table, fields) {\n  // parse expressions, generate code for both a and b values\n  const names = [];\n  const exprs = [];\n  const fn = [];\n  let keys = null, opA = '0', opB = '0';\n  if (table.isGrouped()) {\n    keys = table.groups().keys;\n    opA = 'ka';\n    opB = 'kb';\n  }\n  const { ops } = parse(fields, {\n    table,\n    value: (name, node) => {\n      names.push(name);\n      if (node.escape) {\n        // if an escaped function, invoke it directly\n        const f = i => `fn[${fn.length}](${i}, data)`;\n        exprs.push([f('a'), f('b')]);\n        fn.push(node.escape);\n      } else {\n        // generate code to extract values to compare\n        exprs.push([\n          codegen(node, { index: 'a', op: opA }),\n          codegen(node, { index: 'b', op: opB })\n        ]);\n      }\n    },\n    window: false\n  });\n\n  // calculate aggregate values if needed\n  const result = aggregate(table, ops);\n  const op = (id, row) => result[id][row];\n\n  // generate comparison code for each field\n  const n = names.length;\n  let code = 'return (a, b) => {'\n    + (op && table.isGrouped() ? 'const ka = keys[a], kb = keys[b];' : '')\n    + 'let u, v; return ';\n  for (let i = 0; i < n; ++i) {\n    const o = fields.get(names[i]).desc ? -1 : 1;\n    const [u, v] = exprs[i];\n    code += _compare(u, v, -o, o);\n  }\n  code += '0;};';\n\n  // instantiate and return comparator function\n  return Function('op', 'keys', 'fn', 'data', code)(op, keys, fn, table.data());\n}","import __dedupe from './dedupe';\nimport __derive from './derive';\nimport __except from './except';\nimport __filter from './filter';\nimport __fold from './fold';\nimport __impute from './impute';\nimport __intersect from './intersect';\nimport __join from './join';\nimport __semijoin from './join-filter';\nimport __lookup from './lookup';\nimport __pivot from './pivot';\nimport __relocate from './relocate';\nimport __rename from './rename';\nimport __rollup from './rollup';\nimport __sample from './sample';\nimport __select from './select';\nimport __spread from './spread';\nimport __union from './union';\nimport __unroll from './unroll';\nimport __groupby from './groupby';\nimport __orderby from './orderby';\n\nimport __concat from '../engine/concat';\nimport __reduce from '../engine/reduce';\nimport __ungroup from '../engine/ungroup';\nimport __unorder from '../engine/unorder';\n\nimport { count } from '../op/op-api';\n\nexport default {\n  __antijoin: (table, other, on) =>\n    __semijoin(table, other, on, { anti: true }),\n  __count: (table, options = {}) =>\n    __rollup(table, { [options.as || 'count']: count() }),\n  __cross: (table, other, values, options) =>\n    __join(table, other, () => true, values, {\n      ...options, left: true, right: true\n    }),\n  __concat,\n  __dedupe,\n  __derive,\n  __except,\n  __filter,\n  __fold,\n  __impute,\n  __intersect,\n  __join,\n  __lookup,\n  __pivot,\n  __relocate,\n  __rename,\n  __rollup,\n  __sample,\n  __select,\n  __semijoin,\n  __spread,\n  __union,\n  __unroll,\n  __groupby,\n  __orderby,\n  __ungroup,\n  __unorder,\n  __reduce\n};","import columnSet from '../table/column-set';\nimport NULL from '../util/null';\n\nexport default function(table, others) {\n  const trows = table.numRows();\n  const nrows = trows + others.reduce((n, t) => n + t.numRows(), 0);\n  if (trows === nrows) return table;\n\n  const tables = [table, ...others];\n  const cols = columnSet();\n\n  table.columnNames().forEach(name => {\n    const arr = Array(nrows);\n    let row = 0;\n    tables.forEach(table => {\n      const col = table.column(name) || { get: () => NULL };\n      table.scan(trow => arr[row++] = col.get(trow));\n    });\n    cols.add(name, arr);\n  });\n\n  return table.create(cols.new());\n}","export default function(table, keys = []) {\n  return table\n    .groupby(keys.length ? keys : table.columnNames())\n    .filter('row_number() === 1')\n    .ungroup()\n    .reify();\n}","import relocate from './relocate';\nimport _derive from '../engine/derive';\nimport parse from '../expression/parse';\n\nexport default function(table, values, options = {}) {\n  const dt = _derive(table, parse(values, { table }), options);\n\n  return options.drop || (options.before == null && options.after == null)\n    ? dt\n    : relocate(dt,\n        Object.keys(values).filter(name => !table.column(name)),\n        options\n      );\n}","export default function(table, others) {\n  if (others.length === 0) return table;\n  const names = table.columnNames();\n  return others.reduce((a, b) => a.antijoin(b.select(names)), table).dedupe();\n}","import _derive from '../engine/derive';\nimport _filter from '../engine/filter';\nimport parse from '../expression/parse';\n\nexport default function(table, criteria) {\n  const test = parse({ p: criteria }, { table });\n  let predicate = test.exprs[0];\n  if (test.ops.length) {\n    const { data } = _derive(table, test, { drop: true }).column('p');\n    predicate = row => data[row];\n  }\n  return _filter(table, predicate);\n}","import BitSet from '../table/bit-set';\n\nexport default function(table, predicate) {\n  const n = table.totalRows();\n  const bits = table.mask();\n  const data = table.data();\n  const filter = new BitSet(n);\n\n  // inline the following for performance:\n  // table.scan((row, data) => { if (predicate(row, data)) filter.set(row); });\n  if (bits) {\n    for (let i = bits.next(0); i >= 0; i = bits.next(i + 1)) {\n      if (predicate(i, data)) filter.set(i);\n    }\n  } else {\n    for (let i = 0; i < n; ++i) {\n      if (predicate(i, data)) filter.set(i);\n    }\n  }\n\n  return table.create({ filter });\n}","import _fold from '../engine/fold';\nimport parse from './util/parse';\n\nexport default function(table, values, options) {\n  return _fold(table, parse('fold', table, values), options);\n}","import unroll from './unroll';\nimport { aggregateGet } from './reduce/util';\n\nexport default function(table, { names = [], exprs = [], ops = [] }, options = {}) {\n  if (names.length === 0) return table;\n\n  const [k = 'key', v = 'value'] = options.as || [];\n  const vals = aggregateGet(table, ops, exprs);\n\n  return unroll(\n    table,\n    {\n      names: [k, v],\n      exprs: [() => names, (row, data) => vals.map(fn => fn(row, data))]\n    },\n    { ...options, drop: names }\n  );\n}","export default function(table, others) {\n  const names = table.columnNames();\n  return others.length\n    ? others.reduce((a, b) => a.semijoin(b.select(names)), table).dedupe()\n    : table.reify([]);\n}","import _lookup from '../engine/lookup';\nimport { inferKeys } from './util/join-keys';\nimport parseKey from './util/parse-key';\nimport parseValues from './util/parse';\n\nexport default function(tableL, tableR, on, values) {\n  on = inferKeys(tableL, tableR, on);\n  return _lookup(\n    tableL,\n    tableR,\n    [ parseKey('lookup', tableL, on[0]), parseKey('lookup', tableR, on[1]) ],\n    parseValues('lookup', tableR, values)\n  );\n}","import { rowLookup } from './join/lookup';\nimport { aggregateGet } from './reduce/util';\nimport columnSet from '../table/column-set';\nimport NULL from '../util/null';\nimport concat from '../util/concat';\nimport unroll from '../util/unroll';\n\nexport default function(tableL, tableR, [keyL, keyR], { names, exprs, ops }) {\n  // instantiate output data\n  const cols = columnSet(tableL);\n  const total = tableL.totalRows();\n  names.forEach(name => cols.add(name, Array(total).fill(NULL)));\n\n  // build lookup table\n  const lut = rowLookup(tableR, keyR);\n\n  // generate setter function for lookup match\n  const set = unroll(\n    ['lr', 'rr', 'data'],\n    '{' + concat(names, (_, i) => `_[${i}][lr] = $[${i}](rr, data);`) + '}',\n    names.map(name => cols.data[name]),\n    aggregateGet(tableR, ops, exprs)\n  );\n\n  // find matching rows, set values on match\n  const dataR = tableR.data();\n  tableL.scan((lrow, data) => {\n    const rrow = lut.get(keyL(lrow, data));\n    if (rrow >= 0) set(lrow, rrow, dataR);\n  });\n\n  return tableL.create(cols);\n}","import _select from '../engine/select';\nimport resolve from '../helpers/selection';\n\nexport default function(table, columns) {\n  const map = new Map();\n  table.columnNames(x => (map.set(x, x), 0));\n  return _select(table, resolve(table, columns, map));\n}","import _select from '../engine/select';\nimport resolve from '../helpers/selection';\n\nexport default function(table, columns) {\n  return _select(table, resolve(table, columns));\n}","import _spread from '../engine/spread';\nimport parse from './util/parse';\n\nexport default function(table, values, options) {\n  return _spread(table, parse('spread', table, values), options);\n}","export default function(table, others) {\n  return table.concat(others).dedupe();\n}","import _unroll from '../engine/unroll';\nimport parse from './util/parse';\n\nexport default function(table, values, options) {\n  return _unroll(\n    table,\n    parse('unroll', table, values),\n    options && options.drop\n      ? { ...options, drop: parse('unroll', table, options.drop).names }\n      : options\n  );\n}","import _groupby from '../engine/groupby';\nimport parse from './util/parse';\n\nexport default function(table, values) {\n  return _groupby(table, parse('groupby', table, values));\n}","import _orderby from '../engine/orderby';\nimport parse from '../expression/compare';\nimport field from '../helpers/field';\nimport error from '../util/error';\nimport isFunction from '../util/is-function';\nimport isObject from '../util/is-object';\nimport isNumber from '../util/is-number';\nimport isString from '../util/is-string';\n\nexport default function(table, values) {\n  return _orderby(table, parseValues(table, values));\n}\n\nfunction parseValues(table, params) {\n  let index = -1;\n  const exprs = new Map();\n  const add = val => exprs.set(++index + '', val);\n\n  params.forEach(param => {\n    const expr = param.expr != null ? param.expr : param;\n\n    if (isObject(expr) && !isFunction(expr)) {\n      for (const key in expr) add(expr[key]);\n    } else {\n      add(\n        isNumber(expr) ? field(param, table.columnName(expr))\n          : isString(expr) ? field(param)\n          : isFunction(expr) ? param\n          : error(`Invalid orderby field: ${param+''}`)\n      );\n    }\n  });\n\n  return parse(table, exprs);\n}","export default function(table, comparator) {\n  return table.create({ order: comparator });\n}\n","export default function(table) {\n  return table.isGrouped()\n    ? table.create({ groups: null })\n    : table;\n}","export default function(table) {\n  return table.isOrdered()\n    ? table.create({ order: null })\n    : table;\n}","import { reduceFlat, reduceGroups } from './reduce/util';\nimport columnSet from '../table/column-set';\n\nexport default function(table, reducer) {\n  const cols = columnSet();\n  const groups = table.groups();\n\n  // initialize groups\n  const { get, names = [], rows, size = 1 } = groups || {};\n  const counts = new Uint32Array(size + 1);\n  names.forEach(name => cols.add(name, null));\n\n  // compute reduced values\n  const cells = groups\n    ? reduceGroups(table, reducer, groups)\n    : [ reduceFlat(table, reducer) ];\n\n  // initialize output columns\n  reducer.outputs().map(name => cols.add(name, []));\n\n  // write reduced values to output columns\n  const n = counts.length - 1;\n  let len = 0;\n  for (let i = 0; i < n; ++i) {\n    len += counts[i + 1] = reducer.write(cells[i], cols.data, counts[i]);\n  }\n\n  // write group values to output columns\n  if (groups) {\n    const data = table.data();\n    names.forEach((name, index) => {\n      const column = cols.data[name] = Array(len);\n      const getter = get[index];\n      for (let i = 0, j = 0; i < size; ++i) {\n        column.fill(getter(rows[i], data), j, j += counts[i + 1]);\n      }\n    });\n  }\n\n  return table.create(cols.new());\n}","import ColumnTable from './column-table';\nimport verbs from '../verbs';\n\n// Add verb implementations to ColumnTable prototype\nObject.assign(ColumnTable.prototype, verbs);\n\n/**\n * Create a new table for a set of named columns.\n * @param {object|Map} columns\n *  The set of named column arrays. Keys are column names.\n *  The enumeration order of the keys determines the column indices,\n *  unless the names parameter is specified.\n *  Values must be arrays (or array-like values) of identical length.\n * @param {string[]} [names] Ordered list of column names. If specified,\n *  this array determines the column indices. If not specified, the\n *  key enumeration order of the columns object is used.\n * @return {ColumnTable} the instantiated table\n * @example table({ colA: ['a', 'b', 'c'], colB: [3, 4, 5] })\n */\nexport function table(columns, names) {\n  return ColumnTable.new(columns, names);\n}\n\n/**\n * Create a new table from an existing object, such as an array of\n * objects or a set of key-value pairs.\n * @param {object|Array|Map} values Data values to populate the table.\n *  If array-valued or iterable, imports rows for each non-null value,\n *  using the provided column names as keys for each row object. If no\n *  names are provided, the first non-null object's own keys are used.\n *  If object- or Map-valued, create columns for the keys and values.\n * @param {string[]} [names] Column names to include.\n *  For object or Map values, specifies the key and value column names.\n *  Otherwise, specifies the keys to look up on each row object.\n * @return {ColumnTable} the instantiated table.\n * @example from([ { colA: 1, colB: 2 }, { colA: 3, colB: 4 } ])\n */\nexport function from(values, names) {\n  return ColumnTable.from(values, names);\n}","import ColumnTable from '../table/column-table'; // eslint-disable-line no-unused-vars\n\nimport fromArrow from './from-arrow';\nimport fromCSV from './from-csv';\nimport fromFixed from './from-fixed';\nimport fromJSON from './from-json';\nimport { from } from '../table';\nimport isArray from '../util/is-array';\n\n/**\n * Options for file loading.\n * @typedef {object} LoadOptions\n * @property {'arrayBuffer'|'text'|'json'} [as='text'] A string indicating\n *  the data type of the file. One of 'arrayBuffer', 'json', or 'text'.\n * @property {(data: *, options?: object) => ColumnTable} [using] A function\n *  that accepts a data payload (e.g., string or buffer) and an options object\n *  as input and returns an Arquero table (such as fromCSV or fromJSON).\n * @property {object} [fetch] Options to pass to the HTTP fetch method\n *  when loading a URL.\n */\n\n/**\n * Load data from a file and return a Promise for an Arquero table.\n * A specific format parser can be provided with the *using* option,\n * otherwise CSV format is assumed. The options to this method are\n * passed as the second argument to the format parser.\n * @param {string} url The URL to load.\n * @param {LoadOptions & object} options The loading and formatting options.\n * @return {Promise<ColumnTable>} A Promise for an Arquero table.\n * @example aq.load('data/table.csv')\n * @example aq.load('data/table.json', { using: aq.fromJSON })\n * @example aq.load('data/table.json', { using: aq.from })\n */\nexport function load(url, options = {}) {\n  const parse = options.using || fromCSV;\n  return fetch(url, options.fetch)\n    .then(res => res[options.as || 'text']())\n    .then(data => parse(data, options));\n}\n\n/**\n * Load an Arrow file from a URL and return a Promise for an Arquero table.\n * @param {string} url The URL to load.\n * @param {LoadOptions & import('./from-arrow').ArrowOptions} options Arrow format options.\n * @return {Promise<ColumnTable>} A Promise for an Arquero table.\n * @example aq.loadArrow('data/table.arrow')\n */\nexport function loadArrow(url, options) {\n  return load(url, { ...options, as: 'arrayBuffer', using: fromArrow });\n}\n\n/**\n * Load a CSV file from a URL and return a Promise for an Arquero table.\n * @param {string} url The URL to load.\n * @param {LoadOptions & import('./from-csv').CSVParseOptions} options CSV format options.\n * @return {Promise<ColumnTable>} A Promise for an Arquero table.\n * @example aq.loadCSV('data/table.csv')\n * @example aq.loadTSV('data/table.tsv', { delimiter: '\\t' })\n */\nexport function loadCSV(url, options) {\n  return load(url, { ...options, as: 'text', using: fromCSV });\n}\n\n/**\n * Load a fixed width file from a URL and return a Promise for an Arquero table.\n * @param {string} url The URL to load.\n * @param {LoadOptions & import('./from-fixed').FixedParseOptions} options Fixed width format options.\n * @return {Promise<ColumnTable>} A Promise for an Arquero table.\n * @example aq.loadFixedWidth('data/table.txt', { names: ['name', 'city', state'], widths: [10, 20, 2] })\n */\n export function loadFixed(url, options) {\n  return load(url, { ...options, as: 'text', using: fromFixed });\n}\n\n/**\n * Load a JSON file from a URL and return a Promise for an Arquero table.\n * If the loaded JSON is array-valued, an array-of-objects format is assumed\n * and the aq.from method is used to construct the table. Otherwise, a\n * column object format is assumed and aq.fromJSON is applied.\n * @param {string} url The URL to load.\n * @param {LoadOptions & import('./from-json').JSONParseOptions} options JSON format options.\n * @return {Promise<ColumnTable>} A Promise for an Arquero table.\n * @example aq.loadJSON('data/table.json')\n */\nexport function loadJSON(url, options) {\n  return load(url, { ...options, as: 'json', using: parseJSON });\n}\n\nfunction parseJSON(data, options) {\n  return isArray(data) ? from(data) : fromJSON(data, options);\n}","import ColumnTable from './table/column-table';\nimport aggregateFunctions from './op/aggregate-functions';\nimport windowFunctions from './op/window-functions';\nimport functions from './op/functions';\nimport op from './op/op';\nimport ops from './op/op-api';\nimport Query, { addQueryVerb } from './query/query';\nimport { Verbs, createVerb } from './query/verb';\nimport { ROW_OBJECT } from './expression/row-object';\nimport error from './util/error';\nimport has from './util/has';\nimport toString from './util/to-string';\n\nconst onIllegal = (name, type) =>\n  error(`Illegal ${type} name: ${toString(name)}`);\n\nconst onDefined = (name, type) =>\n  error(`The ${type} ${toString(name)} is already defined. Use override option?`);\n\nconst onReserve = (name, type) =>\n  error(`The ${type} name ${toString(name)} is reserved and can not be overridden.`);\n\nfunction check(name, options, obj = ops, type = 'function') {\n  if (!name) onIllegal(name, type);\n  if (!options.override && has(obj, name)) onDefined(name, type);\n}\n\n// -- Op Functions --------------------------------------------------\n\nfunction verifyFunction(name, def, object, options) {\n  return object[name] === def || check(name, options);\n}\n\n/**\n * Register an aggregate or window operation.\n * @param {string} name The name of the operation\n * @param {AggregateDef|WindowDef} def The operation definition.\n * @param {object} object The registry object to add the definition to.\n * @param {RegisterOptions} [options] Registration options.\n */\nfunction addOp(name, def, object, options = {}) {\n  if (verifyFunction(name, def, object, options)) return;\n  const [nf = 0, np = 0] = def.param;\n  object[name] = def;\n  ops[name] = (...params) => op(\n    name,\n    params.slice(0, nf),\n    params.slice(nf, nf + np)\n  );\n}\n\n/**\n * Register a custom aggregate function.\n * @param {string} name The name to use for the aggregate function.\n * @param {AggregateDef} def The aggregate operator definition.\n * @param {RegisterOptions} [options] Function registration options.\n * @throws If a function with the same name is already registered and\n *  the override option is not specified.\n */\nexport function addAggregateFunction(name, def, options) {\n  addOp(name, def, aggregateFunctions, options);\n}\n\n/**\n * Register a custom window function.\n * @param {string} name The name to use for the window function.\n * @param {WindowDef} def The window operator definition.\n * @param {RegisterOptions} [options] Function registration options.\n * @throws If a function with the same name is already registered and\n *  the override option is not specified.\n */\nexport function addWindowFunction(name, def, options) {\n  addOp(name, def, windowFunctions, options);\n}\n\n/**\n * Register a function for use within table expressions.\n * If only a single argument is provided, it will be assumed to be a\n * function and the system will try to extract its name.\n * @param {string} name The name to use for the function.\n * @param {Function} fn A standard JavaScript function.\n * @param {RegisterOptions} [options] Function registration options.\n * @throws If a function with the same name is already registered and\n *  the override option is not specified, or if no name is provided\n *  and the input function is anonymous.\n */\nexport function addFunction(name, fn, options = {}) {\n  if (arguments.length === 1) {\n    fn = name;\n    name = fn.name;\n    if (name === '' || name === 'anonymous') {\n      error('Anonymous function provided, please include a name argument.');\n    } else if (name === ROW_OBJECT) {\n      onReserve(ROW_OBJECT, 'function');\n    }\n  }\n  if (verifyFunction(name, fn, functions, options)) return;\n  functions[name] = fn;\n  ops[name] = fn;\n}\n\n// -- Table Methods and Verbs ---------------------------------------\n\nconst proto = ColumnTable.prototype;\n\n/**\n * Reserved table/query methods that must not be overwritten.\n */\nlet RESERVED;\n\nfunction addReserved(obj) {\n  for (; obj; obj = Object.getPrototypeOf(obj)) {\n    Object.getOwnPropertyNames(obj).forEach(name => RESERVED[name] = 1);\n  }\n}\n\nfunction verifyTableMethod(name, fn, options) {\n  const type = 'method';\n\n  // exit early if duplicate re-assignment\n  if (proto[name] && proto[name].fn === fn) return true;\n\n  // initialize reserved properties to avoid overriding internals\n  if (!RESERVED) {\n    RESERVED = {};\n    addReserved(proto);\n    addReserved(Query.prototype);\n  }\n\n  // perform name checks\n  if (RESERVED[name]) onReserve(name, type);\n  if ((name + '')[0] === '_') onIllegal(name, type);\n  check(name, options, proto, type);\n}\n\n/**\n * Register a new table method. A new method will be added to the column\n * table prototype. When invoked from a table, the registered method will\n * be invoked with the table as the first argument, followed by all the\n * provided arguments.\n * @param {string} name The name of the table method.\n * @param {Function} method The table method.\n * @param {RegisterOptions} options\n */\nexport function addTableMethod(name, method, options = {}) {\n  if (verifyTableMethod(name, method, options)) return;\n  proto[name] = function(...args) { return method(this, ...args); };\n  proto[name].fn = method;\n}\n\n/**\n * Register a new transformation verb.\n * @param {string} name The name of the verb.\n * @param {Function} method The verb implementation.\n * @param {ParamDef[]} params The verb parameter schema.\n * @param {RegisterOptions} options Function registration options.\n */\nexport function addVerb(name, method, params, options = {}) {\n  // register table method first\n  // if that doesn't throw, add serializable verb entry\n  addTableMethod(name, method, options);\n  addQueryVerb(name, Verbs[name] = createVerb(name, params));\n}\n\n// -- Package Bundles -----------------------------------------------\n\nconst PACKAGE = 'arquero_package';\n\n/**\n * Add an extension package of functions, table methods, and/or verbs.\n * @param {Package|PackageBundle} bundle The package of extensions.\n * @throws If package validation fails.\n */\nexport function addPackage(bundle, options = {}) {\n  const pkg = bundle && bundle[PACKAGE] || bundle;\n  const parts = {\n    functions: [\n      (name, def, opt) => verifyFunction(name, def, functions, opt),\n      addFunction\n    ],\n    aggregateFunctions: [\n      (name, def, opt) => verifyFunction(name, def, aggregateFunctions, opt),\n      addAggregateFunction\n    ],\n    windowFunctions: [\n      (name, def, opt) => verifyFunction(name, def, windowFunctions, opt),\n      addWindowFunction\n    ],\n    tableMethods: [\n      verifyTableMethod,\n      addTableMethod\n    ],\n    verbs: [\n      (name, obj, opt) => verifyTableMethod(name, obj.method, opt),\n      (name, obj, opt) => addVerb(name, obj.method, obj.params, opt)\n    ]\n  };\n\n  function scan(index) {\n    for (const key in parts) {\n      const part = parts[key];\n      const p = pkg[key];\n      for (const name in p) part[index](name, p[name], options);\n    }\n  }\n  scan(0); // first validate package, throw if validation fails\n  scan(1); // then add package content\n}\n\n/**\n * Aggregate function definition.\n * @typedef {import('./op/aggregate-functions').AggregateDef} AggregateDef\n */\n\n/**\n * Window function definition.\n * @typedef {import('./op/window-functions').WindowDef} WindowDef\n */\n\n/**\n * Verb parameter definition.\n * @typedef {import('./query/verb').ParamDef} ParamDef\n */\n\n/**\n * Verb definition.\n * @typedef {object} VerbDef\n * @property {Function} method A function implementing the verb.\n * @property {ParamDef[]} params The verb parameter schema.\n */\n\n/**\n * Verb parameter definition.\n * @typedef {object} ParamDef\n * @property {string} name The verb parameter name.\n * @property {ParamType} type The verb parameter type.\n */\n\n/**\n * A package of op function and table method definitions.\n * @typedef {object} Package\n * @property {{[name: string]: Function}} [functions] Standard function entries.\n * @property {{[name: string]: AggregateDef}} [aggregateFunctions] Aggregate function entries.\n * @property {{[name: string]: WindowDef}} [windowFunctions] Window function entries.\n * @property {{[name: string]: Function}} [tableMethods] Table method entries.\n * @property {{[name: string]: VerbDef}} [verbs] Verb entries.\n */\n\n/**\n * An object containing an extension package.\n * @typedef {object} PackageBundle\n * @property {Package} arquero.package The package bundle.\n */\n\n/**\n * Options for registering new functions.\n * @typedef {object} RegisterOptions\n * @property {boolean} [override=false] Flag indicating if the added\n *  function can override an existing function with the same name.\n */","// export internal class definitions\nimport Table from './table/table';\nimport { columnFactory } from './table/column';\nimport ColumnTable from './table/column-table';\nimport Transformable from './table/transformable';\nimport Reducer from './engine/reduce/reducer';\nimport parse from './expression/parse';\nimport walk_ast from './expression/ast/walk';\nimport Query from './query/query';\nimport { Verb, Verbs } from './query/verb';\n\nexport const internal = {\n  Table,\n  ColumnTable,\n  Transformable,\n  Query,\n  Reducer,\n  Verb,\n  Verbs,\n  columnFactory,\n  parse,\n  walk_ast\n};\n\n// export public API\nimport pkg from '../package.json';\nexport const version = pkg.version;\nexport { seed } from './util/random';\nexport { default as Type } from './arrow/arrow-types';\nexport { default as fromArrow } from './format/from-arrow';\nexport { default as fromCSV } from './format/from-csv';\nexport { default as fromFixed } from './format/from-fixed';\nexport { default as fromJSON } from './format/from-json';\nexport { load, loadArrow, loadCSV, loadFixed, loadJSON } from './format/load-url';\nexport { default as toArrow } from './arrow/encode';\nexport { default as bin } from './helpers/bin';\nexport { default as escape } from './helpers/escape';\nexport { default as desc } from './helpers/desc';\nexport { default as field } from './helpers/field';\nexport { default as frac } from './helpers/frac';\nexport { default as names } from './helpers/names';\nexport { default as rolling } from './helpers/rolling';\nexport { all, endswith, matches, not, range, startswith } from './helpers/selection';\nexport { default as agg } from './verbs/helpers/agg';\nexport { default as op } from './op/op-api';\nexport { query, queryFrom } from './query/query';\nexport * from './register';\nexport * from './table';\n","import Table from '../../table/table'; // eslint-disable-line no-unused-vars\n\n/**\n * Convenience function for computing a single aggregate value for\n * a table. Equivalent to ungrouping a table, applying a rollup verb\n * for a single aggregate, and extracting the resulting value.\n * @param {Table} table A table instance.\n * @param {import('../../table/transformable').TableExpr} expr An\n *   aggregate table expression to evaluate.\n * @return {import('../../table/table').DataValue} The aggregate value.\n * @example agg(table, op.max('colA'))\n * @example agg(table, d => [op.min('colA'), op.max('colA')])\n */\nexport default function agg(table, expr) {\n  return table.ungroup().rollup({ _: expr }).get('_');\n}","/**\n * Options for binning number values.\n * @typedef {object} BinOptions\n * @property {number} [maxbins] The maximum number of bins.\n * @property {number} [minstep] The minimum step size between bins.\n * @property {number} [step] The exact step size to use between bins.\n *  If specified, the maxbins and minstep options are ignored.\n * @property {boolean} [nice=true] Flag indicating if bins should\n *  snap to \"nice\" human-friendly values such as multiples of ten.\n * @property {number} [offset=0] Step offset for bin boundaries.\n *  The default floors to the lower bin boundary. A value of 1 snaps\n *  one step higher to the upper bin boundary, and so on.\n */\n\n/**\n * Generate a table expression that performs uniform binning of\n * number values. The resulting string can be used as part of the\n * input to table transformation verbs.\n * @param {string} name The name of the column to bin.\n * @param {BinOptions} [options] Binning scheme options.\n * @return {string} A table expression string for binned values.\n * @example bin('colA', { maxbins: 20 })\n */\nexport default function(name, options = {}) {\n  const field = `d[${JSON.stringify(name)}]`;\n  const { maxbins, nice, minstep, step, offset } = options;\n  const args = [maxbins, nice, minstep, step];\n\n  let n = args.length;\n  while (n && args[--n] == null) args.pop();\n  const a = args.length ? ', ' + args.map(a => a + '').join(', ') : '';\n\n  return `d => op.bin(${field}, ...op.bins(${field}${a}), ${offset || 0})`;\n}","import wrap from './wrap';\nimport error from '../util/error';\n\n/**\n * Escape a function or value to prevent it from being parsed and recompiled.\n * This helper can be used in lieu of single-table table expressions (which\n * are internally parsed and rewritten) to apply a JavaScript function as-is,\n * including support for closures. It can also be used to pass a constant,\n * literal value as a table expression, bypassing the parser.\n * @param {*} value A function or value to escape.\n * @return {object} A wrapper object representing the escaped value.\n * @example escape(d => d.a.toFixed(2))\n * @example escape(d => d.a * -d.b)\n */\nexport default function(value) {\n  return wrap(value, {\n    escape: true,\n    toString() { error('Escaped values can not be serialized.'); }\n  });\n}","/**\n * Generate a table expression that computes the number of rows\n * corresponding to a given fraction for each group. The resulting\n * string can be used as part of the input to the sample verb.\n * @param {number} fraction The fractional value.\n * @return {string} A table expression string for computing row counts.\n * @example frac(0.5)\n */\nexport default function(fraction) {\n  return `() => op.round(${+fraction} * op.count())`;\n}","/**\n * Select columns by index and rename them to the provided names. Returns a\n * selection helper function that takes a table as input and produces a\n * rename map as output. If the number of provided names is less than the\n * number of table columns, the rename map will only include entries for the\n * provided names. If the number of table columns is less than then number of\n * provided names, only the rename map will only include entries that cover\n * the existing columns.\n * @param {...(string|string[])} names An ordered list of column names.\n * @return {Function} Selection function compatible with {@link Table#select}.\n * @example table.rename(aq.names('a', 'b', 'c'))\n * @example table.select(aq.names(['a', 'b', 'c']))\n */\nexport default function(...names) {\n  names = names.flat();\n  return table => {\n    const m = new Map();\n    const n = Math.min(names.length, table.numCols());\n    for (let i = 0; i < n; ++i) {\n      m.set(table.columnName(i), names[i]);\n    }\n    return m;\n  };\n}"],"names":["Array","isArray","value","prep","index","Transformable","constructor","params","this","_params","values","arguments","length","reify","indices","__reify","count","options","__count","derive","__derive","filter","criteria","__filter","slice","start","end","Infinity","groupby","keys","__groupby","flat","orderby","__orderby","relocate","columns","__relocate","toArray","rename","__rename","rollup","__rollup","sample","size","__sample","select","__select","ungroup","__ungroup","unorder","__unorder","dedupe","__dedupe","impute","__impute","fold","__fold","pivot","__pivot","spread","__spread","unroll","__unroll","lookup","other","on","__lookup","join","__join","join_left","opt","left","right","join_right","join_full","cross","__cross","semijoin","__semijoin","antijoin","__antijoin","concat","tables","__concat","union","__union","intersect","__intersect","except","__except","message","Error","reps","result","isFunction","i","fill","Table","names","nrows","data","groups","order","super","_names","Object","freeze","_data","_total","_nrows","_mask","_group","_order","create","error","toStringTag","Symbol","nr","numRows","numCols","isFiltered","totalRows","isGrouped","isOrdered","mask","comparator","columnNames","columnName","columnIndex","name","indexOf","columnArray","array","get","getter","n","row","objects","object","iterator","print","isNumber","limit","obj","grouped","msg","console","log","table","_index","Uint32Array","ordered","bits","next","compare","sort","a","b","partitions","_partitions","part","repeat","r","push","scan","fn","offset","Math","min","stop","c","nth","max","reduce","reducer","__reduce","Column","defaultColumnFactory","Date","RegExp","raise","type","Map","fromKeyValuePairs","entries","isDate","isRegExp","isString","len","add","cols","map","idx","forEach","fromArray","fromIterable","isObject","vals","key","val","hasOwnProperty","prototype","property","call","ColumnSet","has","new","undefined","TypedArray","getPrototypeOf","Int8Array","isArrayType","isTypedArray","isSeq","seq","compact","arr","v","isValid","includes","indexof","delim","NULL","lastindexof","lastIndexOf","pluck","prop","reverse","split","width","char","s","pad2","formatISO","year","month","date","hours","sec","ms","utc","short","suffix","pad","formatYear","formatDate","d","isNaN","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","formatUTCDate","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","iso_re","match","msDay","msWeek","t0","t1","t","setTime","parse","isISODateString","parseIsoDate","format_date","shorten","format_utcdate","timestamp","quarter","floor","dayofweek","getDay","minutes","seconds","milliseconds","utcyear","utcquarter","utcmonth","utcdate","utcdayofweek","getUTCDay","utchours","utcminutes","utcseconds","utcmilliseconds","datetime","now","dayofyear","setHours","setMonth","setDate","tz","getTimezoneOffset","week","firstday","utcdatetime","UTC","utcdayofyear","setUTCHours","utcweek","setUTCDate","setUTCMonth","equal","arrayEqual","keysA","keysB","k","deepEqual","test","parse_json","str","JSON","to_json","stringify","source","random","isMap","Set","isSet","iter","from","isMapOrSet","fromEntries","step","ceil","recode","fallback","sequence","json","is_nan","Number","is_finite","isFinite","abs","cbrt","clz32","exp","expm1","fround","greatest","least","log10","log1p","log2","pow","round","sign","sqrt","trunc","degrees","rad","PI","radians","deg","acos","acosh","asin","asinh","atan","atan2","atanh","cos","cosh","sin","sinh","tan","tanh","parse_date","parse_float","parseFloat","parse_int","radix","parseInt","endswith","search","String","endsWith","regexp","m","normalize","form","padend","padEnd","padstart","padStart","upper","toUpperCase","lower","toLowerCase","num","replace","pattern","replacement","substring","separator","startswith","startsWith","trim","isBigInt","fields","Op","toString","args","f","toObject","expr","func","any","field","op","array_agg","array_agg_distinct","map_agg","object_agg","entries_agg","functions","row_object","valid","invalid","distinct","mode","sum","product","mean","average","variance","variancep","stdev","stdevp","quantile","p","median","covariance","field1","field2","covariancep","corr","bins","maxbins","nice","minstep","row_number","rank","avg_rank","dense_rank","percent_rank","cume_dist","ntile","lag","defaultValue","lead","first_value","last_value","nth_value","fill_down","fill_up","nest","agg","col","uname","uniqueName","Identifier","Literal","MemberExpression","ObjectPattern","Property","Dictionary","visit","node","visitors","binary","operator","list","body","callee","computed","ref","method","Constant","raw","Function","Parameter","TemplateLiteral","quasis","expressions","o","CallExpression","NewExpression","ArrayExpression","elements","AssignmentExpression","BinaryExpression","LogicalExpression","UnaryExpression","argument","ConditionalExpression","consequent","alternate","ObjectExpression","properties","ArrowFunctionExpression","FunctionExpression","FunctionDeclaration","ArrayPattern","VariableDeclaration","kind","declarations","VariableDeclarator","id","init","SpreadElement","BlockStatement","BreakStatement","ExpressionStatement","expression","IfStatement","SwitchStatement","discriminant","cases","SwitchCase","ReturnStatement","Program","objectKey","nulls","initOp","noop","rem","initProduct","product_v","param","stream","_","increment","e","set","decrement","delete","distinctMap","req","prod","mean_d","dev","NaN","cov","mean_x","mean_y","dev_x","dev_y","x","y","dx","dy","dy2","logb","LN10","level","span","div","precision","eps","w","peer","cume","j","drank","i0","i1","find","hasAggregate","aggregateFunctions","hasWindow","windowFunctions","hasFunction","getAggregate","getWindow","compile","code","escape","expr2","dictOps","keyFor","lit","rewriteDictionary","ROW_OBJECT","rowObjectExpression","props","rewrite","rowObjectCode","codegen","rowObjectBuilder","NONE","Null","Int","Float","Binary","Utf8","Bool","Decimal","Time","Timestamp","Interval","List","Struct","Union","FixedSizeBinary","FixedSizeList","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","Float16","Float32","Float64","DateDay","DateMillisecond","TimestampSecond","TimestampMillisecond","TimestampMicrosecond","TimestampNanosecond","TimeSecond","TimeMillisecond","TimeMicrosecond","TimeNanosecond","DenseUnion","SparseUnion","IntervalDayTime","IntervalYearMonth","ceil64Bytes","bpe","Type","BYTES_PER_ELEMENT","arrowData","Data","buffers","dict","encoder","TextEncoder","writeUtf8","encodeInto","subarray","written","bytes","encode","ArrayType","strlen","dictionary","Int32Array","buf","Uint8Array","dlen","utf8Builder","Vector","arrowVector","nullable","typeId","bitWidth","arrayBuilder","dictionaryBuilder","boolBuilder","unit","dateMillisBuilder","dateDayBuilder","Builder","nullValues","highWaterMark","finish","flush","defaultBuilder","builder","validBuilder","dataFromScan","column","DataType","profile","profiler","bools","nums","ints","bigints","digits","dates","utcdays","strings","arrays","minlen","maxlen","structs","isInteger","ap","array_prof","sp","struct_prof","resolveType","Field","infer","reified","vec","vector","typeCompatible","dtype","Float32Array","Float64Array","Int16Array","Uint16Array","BigInt64Array","BigUint64Array","typeFromArray","dataFromArray","compareTo","scanArray","scanTable","scanAll","err","types","dataFrom","dataFromObjects","isTable","dataFromTable","formats","formatOpt","format","alignOpt","align","auto","dutcs","l","maxdigits","inferFormat","ctx","cell","toExponential","toFixed","output","style","mapObject","styles","nullish","null","baseFormat","formatValue","formatter","tag","shouldAlign","alignValue","css","text","trueValue","falseValue","defaultFormatter","pairs","resolve","sel","assign","decorate","all","not","selection","drop","range","matches","escapeRegExp","flags","ColumnTable","static","columnsFrom","group","rows","_rows","_size","_keys","regroup","base","cset","columnSet","input","columnAt","objectBuilder","ncols","prev","curr","reindex","transform","transforms","toArrow","toArrowBuffer","serialize","toCSV","delimiter","reFormat","toHTML","toJSON","schema","defaultTrue","toMarkdown","_builder","Reducer","outputs","_outputs","write","walk","parent","walker","walkers","unary","ternary","nodes","item","AwaitExpression","UpdateExpression","ForStatement","update","WhileStatement","DoWhileStatement","strip","optional","stripMember","is","spec","aggronly","reservedWords","strict","strictBind","ecma5AndLessKeywords","keywords$1","keywordRelationalOperator","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","pos","isIdentifierStart","astral","fromCharCode","isIdentifierChar","TokenType","label","conf","keyword","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","binop","updateContext","prec","keywords","kw","types$1","string","privateId","eof","bracketL","bracketR","braceL","braceR","parenL","parenR","comma","semi","colon","dot","question","questionDot","arrow","template","invalidTemplate","ellipsis","backQuote","dollarBraceL","eq","incDec","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","starstar","coalesce","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","lineBreak","lineBreakG","isNewLine","nextLineBreak","charCodeAt","nonASCIIwhitespace","skipWhiteSpace","hasOwn","propName","wordsRegexp","words","loneSurrogate","Position","line","SourceLocation","sourceFile","getLineInfo","cur","nextBreak","defaultOptions","ecmaVersion","sourceType","onInsertedSemicolon","onTrailingComma","allowReserved","allowReturnOutsideFunction","allowImportExportEverywhere","allowAwaitOutsideFunction","allowSuperOutsideMethod","allowHashBang","locations","onToken","onComment","ranges","program","directSourceFile","preserveParens","warnedAboutEcmaVersion","getOptions","opts","warn","tokens","token","block","startLoc","endLoc","comment","loc","pushComment","SCOPE_CLASS_STATIC_BLOCK","functionFlags","async","generator","Parser","startPos","reserved","reservedStrict","reservedWordsStrict","reservedWordsStrictBind","containsEsc","lineStart","curLine","curPosition","lastTokEndLoc","lastTokStartLoc","lastTokStart","lastTokEnd","context","initialContext","exprAllowed","inModule","strictDirective","potentialArrowAt","potentialArrowInForAwait","yieldPos","awaitPos","awaitIdentPos","labels","undefinedExports","skipLineComment","scopeStack","enterScope","regexpState","privateNameStack","prototypeAccessors","inFunction","configurable","inGenerator","inAsync","canAwait","allowSuper","allowDirectSuper","treatFunctionsAsVar","allowNewDotTarget","inClassStaticBlock","startNode","nextToken","parseTopLevel","currentVarScope","inClassFieldInit","scope","currentThisScope","treatFunctionsAsVarInScope","currentScope","extend","plugins","cls","parseExpressionAt","parser","parseExpression","tokenizer","defineProperties","pp$9","literal","DestructuringErrors","shorthandAssign","trailingComma","parenthesizedAssign","parenthesizedBind","doubleProto","lastIndex","exec","spaceAfter","charAt","eat","isContextual","eatContextual","expectContextual","unexpected","canInsertSemicolon","insertSemicolon","semicolon","afterTrailingComma","tokType","notNext","expect","checkPatternErrors","refDestructuringErrors","raiseRecoverable","parens","checkExpressionErrors","andThrow","checkYieldAwaitInDefaultParams","isSimpleAssignTarget","pp$8","exports","stmt","parseStatement","adaptDirectivePrologue","finishNode","loopLabel","switchLabel","isLet","skip","nextCh","ident","isAsyncFunction","after","topLevel","starttype","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseFunctionStatement","parseClass","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVarStatement","parseWhileStatement","parseWithStatement","parseBlock","parseEmptyStatement","parseExpressionStatement","parseImport","parseExport","maybeName","parseLabeledStatement","isBreak","parseIdent","lab","pop","parseParenExpression","awaitAt","parseFor","init$1","parseVar","await","parseForIn","startsWithLet","isForOf","toAssignable","checkLValPattern","isAsync","declarationPosition","parseFunction","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","sawDefault","isCase","exitScope","empty$1","handler","clause","parseBindingAtom","simple","finalizer","i$1","label$1","statementStart","createNewLexicalScope","exitStrict","isForIn","parseMaybeAssign","isFor","decl","parseVarId","isPrivateNameConflicted","privateNameMap","element","checkKeyName","statement","allowExpressionBody","forInit","initFunction","checkLValSimple","oldYieldPos","oldAwaitPos","oldAwaitIdentPos","parseFunctionParams","parseFunctionBody","parseBindingList","isStatement","oldStrict","parseClassId","parseClassSuper","enterClassBody","classBody","hadConstructor","parseClassElement","superClass","exitClassBody","constructorAllowsSuper","keyName","isGenerator","isStatic","parseClassStaticBlock","isClassElementNameStart","lastValue","startNodeAt","parseClassElementName","isConstructor","allowsDirectSuper","parseClassMethod","parseClassField","parsePrivateIdent","parsePropertyName","parseMethod","oldLabels","parseExprSubscripts","declared","used","exported","parseModuleExportName","checkExport","parseExprAtom","fNode","declaration","cNode","shouldParseExportStatement","checkVariableExport","specifiers","parseExportSpecifiers","checkUnreserved","local","checkLocalExport","checkPatternExport","pat","list$1","elt","decls","first","parseImportSpecifiers","node$1","node$2","imported","stringLiteral","parseLiteral","statements","isDirectiveCandidate","directive","pp$7","isBinding","toAssignableList","exprList","last","parseSpread","parseRestBinding","parseObj","close","allowEmpty","allowTrailingComma","elts","rest","parseBindingListItem","elem","parseMaybeDefault","bindingType","checkClashes","isBind","declareName","checkLValInnerPattern","TokContext","isExpr","preserveSpace","override","b_stat","b_expr","b_tmpl","p_stat","p_expr","q_tmpl","tryReadTemplateToken","f_stat","f_expr","f_expr_gen","f_gen","pp$6","curContext","braceIsBlock","prevType","inGeneratorContext","overrideContext","tokenCtx","out","statementParens","allowed","pp$5","isPrivateFieldAccess","checkPropClash","propHash","shorthand","proto","afterLeftParse","parseYield","ownDestructuringErrors","oldParenAssign","oldTrailingComma","oldDoubleProto","parseMaybeConditional","parseExprOps","parseMaybeUnary","parseExprOp","leftStartPos","leftStartLoc","minPrec","logical","buildBinary","sawUnary","parseAwait","parseSubscripts","noCalls","maybeAsyncArrow","optionalChained","parseSubscript","chainNode","optionalSupported","parseExprList","parseArrowExpression","quasi","parseTemplate","isTagged","readRegexp","canBeArrow","regex","parseParenAndDistinguishExpression","parseNew","parseExprImport","meta","parseDynamicImport","parseImportMeta","errorPos","bigint","spreadStart","innerStartPos","innerStartLoc","lastIsComma","parseParenItem","innerEndPos","innerEndLoc","parseParenArrowList","finishNodeAt","par","empty","isImport","parseTemplateElement","cooked","tail","curElt","isAsyncProp","isPattern","parseProperty","parsePropertyValue","copyNode","paramCount","isArrowFunction","isMethod","isExpression","useStrict","checkParams","nonSimple","isSimpleParamList","allowDuplicates","nameHash","liberal","delegate","pp$4","SyntaxError","raisedAt","pp$3","Scope","var","lexical","redeclared","scope$2","scope$3","SCOPE_TOP","Node","pp$2","newNode","ecma9BinaryProperties","ecma10BinaryProperties","ecma12BinaryProperties","unicodeBinaryProperties","unicodeGeneralCategoryValues","ecma9ScriptValues","ecma10ScriptValues","ecma11ScriptValues","ecma12ScriptValues","unicodeScriptValues","buildUnicodeData","nonBinary","General_Category","Script","Script_Extensions","gc","sc","scx","pp$1","RegExpValidationState","validFlags","unicodeProperties","switchU","switchN","lastIntValue","lastStringValue","lastAssertionIsQuantifiable","numCapturingParens","maxBackReference","groupNames","backReferenceNames","codePointToString$1","ch","isSyntaxCharacter","isControlLetter","isUnicodePropertyNameCharacter","isUnicodePropertyValueCharacter","isDecimalDigit","isHexDigit","hexToInt","isOctalDigit","reset","unicode","at","forceU","nextIndex","current","lookahead","advance","validateRegExpFlags","state","flag","validateRegExpPattern","regexp_pattern","regexp_disjunction","regexp_alternative","regexp_eatQuantifier","regexp_eatTerm","regexp_eatAssertion","regexp_eatAtom","regexp_eatExtendedAtom","lookbehind","noError","regexp_eatQuantifierPrefix","regexp_eatBracedQuantifier","regexp_eatDecimalDigits","regexp_eatPatternCharacters","regexp_eatReverseSolidusAtomEscape","regexp_eatCharacterClass","regexp_eatUncapturingGroup","regexp_eatCapturingGroup","regexp_eatAtomEscape","regexp_groupSpecifier","regexp_eatInvalidBracedQuantifier","regexp_eatExtendedPatternCharacter","regexp_eatSyntaxCharacter","regexp_eatGroupName","regexp_eatRegExpIdentifierName","regexp_eatRegExpIdentifierStart","regexp_eatRegExpIdentifierPart","regexp_eatRegExpUnicodeEscapeSequence","isRegExpIdentifierStart","isRegExpIdentifierPart","regexp_eatBackReference","regexp_eatCharacterClassEscape","regexp_eatCharacterEscape","regexp_eatKGroupName","regexp_eatDecimalEscape","regexp_eatControlEscape","regexp_eatCControlLetter","regexp_eatZero","regexp_eatHexEscapeSequence","regexp_eatLegacyOctalEscapeSequence","regexp_eatIdentityEscape","regexp_eatControlLetter","regexp_eatFixedHexDigits","leadSurrogateEnd","trail","regexp_eatHexDigits","isCharacterClassEscape","regexp_eatUnicodePropertyValueExpression","regexp_eatUnicodePropertyName","regexp_eatUnicodePropertyValue","regexp_validateUnicodePropertyNameAndValue","regexp_eatLoneUnicodePropertyNameOrValue","nameOrValue","regexp_validateUnicodePropertyNameOrValue","regexp_classRanges","regexp_eatClassAtom","regexp_eatClassEscape","ch$1","regexp_eatClassControlLetter","regexp_eatOctalDigit","n1","n2","Token","pp","stringToBigInt","BigInt","codePointToString","ignoreEscapeSequenceInKeyword","getToken","this$1$1","done","skipSpace","finishToken","readToken","fullCharCodeAtPos","readWord","getTokenFromCode","skipBlockComment","startSkip","loop","readToken_dot","readNumber","next2","readToken_slash","finishOp","readToken_mult_modulo_exp","tokentype","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_lt_gt","readToken_eq_excl","readToken_question","readToken_numberSign","readWord1","readRadixNumber","readString","escaped","inClass","flagsStart","readInt","maybeLegacyOctalNumericLiteral","allowSeparators","isLegacyOctalNumericLiteral","total","lastCode","startsWithDot","octal","val$1","readCodePoint","codePos","readHexChar","invalidStringToken","quote","chunkStart","readEscapedChar","INVALID_TEMPLATE_ESCAPE_ERROR","inTemplateElement","readTmplToken","readInvalidTemplateToken","position","inTemplate","octalStr","substr","word","escStart","esc","acorn","version","tokTypes","keywordTypes","tokContexts","E","LN2","LOG2E","LOG10E","SQRT1_2","SQRT2","PARSER_OPT","NO","ERROR_AGGREGATE","ERROR_WINDOW","ERROR_COLUMN","ERROR_FUNCTION","ERROR_OP_PARAMETER","ERROR_CLOSURE","ERROR_ESCAPE","ERROR_VARIABLE_NOTE","ERROR_FUNCTION_NOTE","ast","fieldRef","parseAST","root","tuple","tuple1","tuple2","$param","$op","paramsRef","columnRef","isFunctionExpression","setc","setp","parseRef","ForOfStatement","ForInStatement","handleDeclaration","handleIdentifier","functionName","def","aggregate","window","updateFunctionNode","arg","opVisitors","idxFields","idxParams","parseOperator","isMath","constants","updateConstantNode","spliceMember","checkColumn","checkParam","updateParameterNode","updateColumnNode","check","refName","alias","rewriteMath","elm","ANNOTATE","generate","compiler","getTableParams","getParams","opcall","exprs","fieldId","opId","compileExpr","frame","peers","opKey","Default","clean","note","parseEscape","ops","Expr","ExprList","ExprNumber","ExprObject","JoinKeys","JoinValues","Options","OrderbyKeys","SelectionList","TableRef","TableRefList","Wrapper","wrap","desc","includePeers","getTable","catalog","query","evaluate","isSelection","fromObject","verbs","Query","rolling","fromExprObject","parseJoinKeys","parseJoinValues","Methods","astExpr","astExprList","astExprObject","astSelectionItem","propTypes","astOptions","astColumn","astColumnIndex","astParse","as","astSelection","astTableRef","toAST","Verb","verb","joinValues","orderbyKeys","default","Verbs","createVerb","before","weight","expand","_verbs","_table","tableName","append","qb","chunks","nullCount","flatten","byte","nullBitmap","nullKeys","dictKeys","lists","arrowColumn","nested","arrowDictionary","numChildren","getNested","memoize","arrayFrom","isList","getList","children","getChildAt","getStruct","VectorName","ONE","BitSet","_bits","clear","and","bitset","or","getColumn","batch","parseBoolean","parseNumber","parseDate","numberParser","decimal","defaultNames","off","automax","autoMax","parsers","noParse","autoType","identity","valueParser","getParsers","EOL","EOF","NEWLINE","read","delimCode","N","I","eol","parseDelimited","fromTextRows","header","parseLines","positions","widths","isDigitString","bef","aft","anchors","anchor","_select","ValueList","_values","_sorted","_start","copy","ascending","toNumeric","v0","oplist","FieldReducer","Field1Reducer","Field2Reducer","_op","_fields","_stream","_add","_rem","value1","value2","aggregateGet","aggrs","reducers","aggr","cells","reduceGroups","reduceFlat","fieldReducer","groupOutput","lo","hi","mid","bisect","bisector","states","frameValue","peersValue","aggOps","winOps","windowOp","adjust","isPeer","numOps","numAgg","partition","results","f0","f1","p0","p1","windowState","windowStates","nstate","windowPeers","isWindowed","segmentOps","nset","priors","copies","icol","marshal","preparse","gets","keyNames","keyGet","hash","keyTable","keyFunction","old","keyEnum","enumerate","callback","lens","idxs","rowLookup","lut","tableL","tableR","predicate","dataL","idxL","nL","hitL","dataR","idxR","nR","hitR","getters","emit","emitter","hashJoin","loopJoin","rowL","rowR","keyL","keyR","dataScan","keyScan","hitScan","idxScan","dataHash","keyHash","hitHash","idxHash","emitScan","indexLookup","rowScan","inferKeys","isect","keyPredicate","onL","onR","parseKey","OPT_R","optParse","vR","shared","inferValues","_join","vL","vJ","parseValue","namesL","rekey","parseValues","hashSemiJoin","loopSemiJoin","anti","_join_filter","keyColumn","ksep","keySeparator","kcol","uniq","pivotKeys","vsep","valueSeparator","namefn","_rollup","buffer","sampleRW","sampleRU","sampleNW","sampleNU","shuffle","parts","samples","sz","_shuffle","createGroups","getKey","_compare","u","lt","gt","others","trows","trow","dt","_derive","_filter","_fold","_impute","lrow","rrow","_lookup","_pivot","_sample","parseSize","parseWeight","_spread","_unroll","_groupby","_orderby","opA","opB","counts","load","url","using","fromCSV","fetch","then","res","parseJSON","fromJSON","onIllegal","onReserve","onDefined","verifyFunction","addOp","nf","np","addAggregateFunction","addWindowFunction","addFunction","RESERVED","addReserved","getOwnPropertyNames","verifyTableMethod","addTableMethod","addVerb","addQueryVerb","internal","columnFactory","factory","walk_ast","pkg","bundle","tableMethods","fraction","fromArrow","fromFixed","seed","lcg"],"mappings":"iSAAeA,MAAMC,QCEN,WAASC,GACtB,OAAgB,MAATA,EACFD,EAAQC,GAASA,EAAQ,CAACA,GAC3B,GCaN,SAASC,EAAKC,GACZ,OAAOA,EAAQ,EAAI,aAAaA,IAAUA,ECb7B,MAAMC,EAMnBC,YAAYC,GACNA,IAAQC,KAAKC,QAAUF,GAa7BA,OAAOG,GACL,OAAIC,UAAUC,QACRF,IACFF,KAAKC,QAAU,IAAKD,KAAKC,WAAYC,IAEhCF,MAEAA,KAAKC,QAYhBI,MAAMC,GACJ,OAAON,KAAKO,QAAQP,KAAMM,GAa5BE,MAAMC,GACJ,OAAOT,KAAKU,QAAQV,KAAMS,GAmB5BE,OAAOT,EAAQO,GACb,OAAOT,KAAKY,SAASZ,KAAME,EAAQO,GAcrCI,OAAOC,GACL,OAAOd,KAAKe,SAASf,KAAMc,GAe7BE,MAAMC,EAAOC,GACX,OAAOlB,KAAKa,ODjGD,SAASI,EAAQ,EAAGC,EAAMC,EAAAA,GACvC,MAAO,GAAGxB,EAAKsB,wCAA4CtB,EAAKuB,KCgG3CF,CAAMC,EAAOC,IAAMb,QAgBxCe,WAAWC,GACT,OAAOrB,KAAKsB,UAAUtB,KAAMqB,EAAKE,QA2BnCC,WAAWH,GACT,OAAOrB,KAAKyB,UAAUzB,KAAMqB,EAAKE,QAoBnCG,SAASC,EAASlB,GAChB,OAAOT,KAAK4B,WAAW5B,KAAM6B,EAAQF,GAAUlB,GAWjDqB,UAAUH,GACR,OAAO3B,KAAK+B,SAAS/B,KAAM2B,EAAQJ,QAgBrCS,OAAO9B,GACL,OAAOF,KAAKiC,SAASjC,KAAME,GAiB7BgC,OAAOC,EAAM1B,GACX,OAAOT,KAAKoC,SAASpC,KAAMmC,EAAM1B,GAgBnC4B,UAAUV,GACR,OAAO3B,KAAKsC,SAAStC,KAAM2B,EAAQJ,QASrCgB,UACE,OAAOvC,KAAKwC,UAAUxC,MASxByC,UACE,OAAOzC,KAAK0C,UAAU1C,MAkBxB2C,UAAUtB,GACR,OAAOrB,KAAK4C,SAAS5C,KAAMqB,EAAKE,QA8BlCsB,OAAO3C,EAAQO,GACb,OAAOT,KAAK8C,SAAS9C,KAAME,EAAQO,GAsBrCsC,KAAK7C,EAAQO,GACX,OAAOT,KAAKgD,OAAOhD,KAAME,EAAQO,GA2BnCwC,MAAM5B,EAAMnB,EAAQO,GAClB,OAAOT,KAAKkD,QAAQlD,KAAMqB,EAAMnB,EAAQO,GAe1C0C,OAAOjD,EAAQO,GACb,OAAOT,KAAKoD,SAASpD,KAAME,EAAQO,GAgBrC4C,OAAOnD,EAAQO,GACb,OAAOT,KAAKsD,SAAStD,KAAME,EAAQO,GAqBrC8C,OAAOC,EAAOC,KAAOvD,GACnB,OAAOF,KAAK0D,SAAS1D,KAAMwD,EAAOC,EAAIvD,EAAOqB,QAwC/CoC,KAAKH,EAAOC,EAAIvD,EAAQO,GACtB,OAAOT,KAAK4D,OAAO5D,KAAMwD,EAAOC,EAAIvD,EAAQO,GAoC9CoD,UAAUL,EAAOC,EAAIvD,EAAQO,GAC3B,MAAMqD,EAAM,IAAKrD,EAASsD,MAAM,EAAMC,OAAO,GAC7C,OAAOhE,KAAK4D,OAAO5D,KAAMwD,EAAOC,EAAIvD,EAAQ4D,GAoC9CG,WAAWT,EAAOC,EAAIvD,EAAQO,GAC5B,MAAMqD,EAAM,IAAKrD,EAASsD,MAAM,EAAOC,OAAO,GAC9C,OAAOhE,KAAK4D,OAAO5D,KAAMwD,EAAOC,EAAIvD,EAAQ4D,GAoC9CI,UAAUV,EAAOC,EAAIvD,EAAQO,GAC3B,MAAMqD,EAAM,IAAKrD,EAASsD,MAAM,EAAMC,OAAO,GAC7C,OAAOhE,KAAK4D,OAAO5D,KAAMwD,EAAOC,EAAIvD,EAAQ4D,GAyB9CK,MAAMX,EAAOtD,EAAQO,GACnB,OAAOT,KAAKoE,QAAQpE,KAAMwD,EAAOtD,EAAQO,GAwB3C4D,SAASb,EAAOC,GACd,OAAOzD,KAAKsE,WAAWtE,KAAMwD,EAAOC,GAwBtCc,SAASf,EAAOC,GACd,OAAOzD,KAAKwE,WAAWxE,KAAMwD,EAAOC,GAgBtCgB,UAAUC,GACR,OAAO1E,KAAK2E,SAAS3E,KAAM0E,EAAOnD,QAgBpCqD,SAASF,GACP,OAAO1E,KAAK6E,QAAQ7E,KAAM0E,EAAOnD,QAenCuD,aAAaJ,GACX,OAAO1E,KAAK+E,YAAY/E,KAAM0E,EAAOnD,QAevCyD,UAAUN,GACR,OAAO1E,KAAKiF,SAASjF,KAAM0E,EAAOnD,SC1sBvB,WAAS2D,GACtB,MAAMC,MAAMD,GCDC,WAASxF,GACtB,MAAwB,iBAAVA,ECDD,WAASA,GACtB,MAAwB,mBAAVA,ECCD,WAAS0F,EAAM1F,GAC5B,MAAM2F,EAAS7F,MAAM4F,GACrB,GAAIE,EAAW5F,GACb,IAAK,IAAI6F,EAAI,EAAGA,EAAIH,IAAQG,EAC1BF,EAAOE,GAAK7F,EAAM6F,QAGpBF,EAAOG,KAAK9F,GAEd,OAAO2F,ECHM,MAAMI,UAAc5F,EAYjCC,YAAY4F,EAAOC,EAAOC,EAAM/E,EAAQgF,EAAQC,EAAO/F,GACrDgG,MAAMhG,GACNC,KAAKgG,OAASC,OAAOC,OAAOR,GAC5B1F,KAAKmG,MAAQP,EACb5F,KAAKoG,OAAST,EACd3F,KAAKqG,OAASxF,EAASA,EAAOL,QAAUmF,EACxC3F,KAAKsG,MAASX,IAAU3F,KAAKqG,QAAUxF,GAAW,KAClDb,KAAKuG,OAASV,GAAU,KACxB7F,KAAKwG,OAASV,GAAS,KAWzBW,OAAOhG,GACLiG,EAAM,mBAMIC,IAAPC,OAAOD,eACV,IAAK3G,KAAKgG,OAAQ,MAAO,SACzB,MAAMa,EAAK7G,KAAK8G,UAAY,QAA6B,IAAnB9G,KAAK8G,UAAkB,IAAM,IAEnE,MAAO,UADI9G,KAAK+G,UAAY,QAA6B,IAAnB/G,KAAK+G,UAAkB,IAAM,SAC1CF,KACpB7G,KAAKgH,aAAe,KAAKhH,KAAKiH,uBAAyB,KACvDjH,KAAKkH,YAAc,KAAKlH,KAAKuG,OAAOpE,cAAgB,KACpDnC,KAAKmH,YAAc,YAAc,IAOxCH,aACE,QAAShH,KAAKsG,MAOhBY,YACE,QAASlH,KAAKuG,OAOhBY,YACE,QAASnH,KAAKwG,OAOhBZ,OACE,OAAO5F,KAAKmG,MAOdiB,OACE,OAAOpH,KAAKsG,MAOdT,SACE,OAAO7F,KAAKuG,OAOdc,aACE,OAAOrH,KAAKwG,OAQdS,YACE,OAAOjH,KAAKoG,OASdU,UACE,OAAO9G,KAAKqG,OASVlE,WACF,OAAOnC,KAAKqG,OAOdU,UACE,OAAO/G,KAAKgG,OAAO5F,OAkBrBkH,YAAYzG,GACV,OAAOA,EAASb,KAAKgG,OAAOnF,OAAOA,GAAUb,KAAKgG,OAAOhF,QAS3DuG,WAAW3H,GACT,OAAOI,KAAKgG,OAAOpG,GAQrB4H,YAAYC,GACV,OAAOzH,KAAKgG,OAAO0B,QAAQD,GAY7BE,YAAYF,EAAM3H,GAChB,OAAOE,KAAK4H,MAAMH,EAAM3H,GAW1B8H,MAAMH,EAAM3H,GACV4G,EAAM,mBAORxG,QAAQuH,GACN,MAAMI,EAAM7H,KAAK8H,OAAOL,GAClBM,EAAI/H,KAAK8G,UACf,IAAK,IAAIvB,EAAI,EAAGA,EAAIwC,IAAKxC,QACjBsC,EAAItC,GAUdsC,IAAIJ,EAAMO,EAAM,GACdtB,EAAM,mBAURoB,OAAOL,GACLf,EAAM,mBAQRuB,QAAQxH,GACNiG,EAAM,mBAQPwB,OAAOF,GACNtB,EAAM,mBAOR,CAACE,OAAOuB,YACNzB,EAAM,mBASR0B,MAAM3H,EAAU,IACV4H,EAAS5H,GACXA,EAAU,CAAE6H,MAAO7H,GACO,MAAjBA,EAAQ6H,QACjB7H,EAAQ6H,MAAQ,IAGlB,MAAMC,EAAMvI,KAAKiI,QAAQ,IAAKxH,EAAS+H,SAAS,IAC1CC,EAAM,GAAGzI,KAAK4G,OAAOD,yBAAyB4B,EAAInI,eAExDsI,QAAQC,IAAIF,GACZC,QAAQE,MAAML,GAUhBjI,QAAQwF,GAAQ,GACd,GAAI9F,KAAK6I,OAAQ,OAAO7I,KAAK6I,OAE7B,MAAMd,EAAI/H,KAAK8G,UACTlH,EAAQ,IAAIkJ,YAAYf,GACxBgB,EAAU/I,KAAKmH,YACf6B,EAAOhJ,KAAKoH,OAClB,IAAIY,GAAO,EAIX,GAAIgB,EACF,IAAK,IAAIzD,EAAIyD,EAAKC,KAAK,GAAI1D,GAAK,EAAGA,EAAIyD,EAAKC,KAAK1D,EAAI,GACnD3F,IAAQoI,GAAOzC,OAGjB,IAAK,IAAIA,EAAI,EAAGA,EAAIwC,IAAKxC,EACvB3F,IAAQoI,GAAOzC,EAKnB,GAAIO,GAASiD,EAAS,CACpB,MAAMG,EAAUlJ,KAAKwG,OACfZ,EAAO5F,KAAKmG,MAClBvG,EAAMuJ,MAAK,CAACC,EAAGC,IAAMH,EAAQE,EAAGC,EAAGzD,KAQrC,OAJIE,GAAUiD,IACZ/I,KAAK6I,OAASjJ,GAGTA,EAaT0J,WAAWxD,GAAQ,GAEjB,GAAI9F,KAAKuJ,YACP,OAAOvJ,KAAKuJ,YAId,IAAKvJ,KAAKkH,YACR,MAAO,CAAElH,KAAKM,QAAQwF,IAIxB,MAAMzE,KAAEA,EAAIc,KAAEA,GAASnC,KAAKuG,OACtBiD,EAAOC,EAAOtH,GAAM,IAAM,KAK1BgH,EAAOnJ,KAAK6I,OACZG,EAAOhJ,KAAKoH,OACZW,EAAI/H,KAAK8G,UACf,GAAIqC,GAAQnJ,KAAKmH,YACf,IAAK,IAAWuC,EAAPnE,EAAI,EAAMA,EAAIwC,IAAKxC,EAC1BmE,EAAIP,EAAK5D,GACTiE,EAAKnI,EAAKqI,IAAIC,KAAKD,QAEhB,GAAIV,EACT,IAAK,IAAIzD,EAAIyD,EAAKC,KAAK,GAAI1D,GAAK,EAAGA,EAAIyD,EAAKC,KAAK1D,EAAI,GACnDiE,EAAKnI,EAAKkE,IAAIoE,KAAKpE,QAGrB,IAAK,IAAIA,EAAI,EAAGA,EAAIwC,IAAKxC,EACvBiE,EAAKnI,EAAKkE,IAAIoE,KAAKpE,GAKvB,GAAIO,IAAUqD,GAAQnJ,KAAKmH,YAAa,CACtC,MAAM+B,EAAUlJ,KAAKwG,OACfZ,EAAO5F,KAAKmG,MAClB,IAAK,IAAIZ,EAAI,EAAGA,EAAIpD,IAAQoD,EAC1BiE,EAAKjE,GAAG4D,MAAK,CAACC,EAAGC,IAAMH,EAAQE,EAAGC,EAAGzD,KASzC,OAJIE,GAAU9F,KAAKmH,cACjBnH,KAAKuJ,YAAcC,GAGdA,EA6BTI,KAAKC,EAAI/D,EAAOwC,EAAQnH,EAAAA,EAAU2I,EAAS,GACzC,MAAMjJ,EAASb,KAAKsG,MACdX,EAAQ3F,KAAKqG,OACbT,EAAO5F,KAAKmG,MAElB,IAAIZ,EAAIuE,GAAU,EAClB,GAAIvE,EAAII,EAAO,OAEf,MAAMoC,EAAIgC,KAAKC,IAAIrE,EAAOJ,EAAI+C,GACxB2B,EAAO,IAAM1E,EAAIvF,KAAKoG,OAE5B,GAAIN,GAAS9F,KAAKmH,aAAetG,GAAUb,KAAK6I,OAAQ,CACtD,MAAMjJ,EAAQI,KAAKM,UACbsF,EAAO5F,KAAKmG,MAClB,KAAOZ,EAAIwC,IAAKxC,EACdsE,EAAGjK,EAAM2F,GAAIK,EAAMqE,QAEhB,GAAIpJ,EAAQ,CACjB,IAAIqJ,EAAInC,EAAIxC,EAAI,EAChB,IAAKA,EAAI1E,EAAOsJ,IAAI5E,KAAM2E,GAAK3E,GAAK,EAAGA,EAAI1E,EAAOoI,KAAK1D,EAAI,GACzDsE,EAAGtE,EAAGK,EAAMqE,QAGd,KAAO1E,EAAIwC,IAAKxC,EACdsE,EAAGtE,EAAGK,EAAMqE,GAiBlBjJ,MAAMC,EAAQ,EAAGC,EAAMC,EAAAA,GACrB,GAAInB,KAAKkH,YAAa,OAAOnB,MAAM/E,MAAMC,EAAOC,GAGhD,MAAMZ,EAAU,GACVqF,EAAQ3F,KAAK8G,UAInB,OAHA7F,EAAQ8I,KAAKK,IAAI,EAAGnJ,GAASA,EAAQ,EAAI0E,EAAQ,IACjDzE,EAAM6I,KAAKC,IAAIrE,EAAOoE,KAAKK,IAAI,EAAGlJ,GAAOA,EAAM,EAAIyE,EAAQ,KAC3D3F,KAAK4J,MAAK5B,GAAO1H,EAAQqJ,KAAK3B,KAAM,EAAM9G,EAAMD,EAAOA,GAChDjB,KAAKK,MAAMC,GAWpB+J,OAAOC,GACL,OAAOtK,KAAKuK,SAASvK,KAAMsK,IChehB,MAAME,EAMnB1K,YAAY8F,GACV5F,KAAK4F,KAAOA,EAOVxF,aACF,OAAOJ,KAAK4F,KAAKxF,OAQnByH,IAAIG,GACF,OAAOhI,KAAK4F,KAAKoC,GAOnB,CAACpB,OAAOuB,YACN,OAAOnI,KAAK4F,KAAKgB,OAAOuB,aA4BrB,IAAIsC,EAAuB,SAAS7E,GACzC,OAAOA,GAAQN,EAAWM,EAAKiC,KAAOjC,EAAO,IAAI4E,EAAO5E,IClE3C,WAASlG,GACtB,OAAOA,aAAiBgL,KCDX,WAAShL,GACtB,OAAOA,IAAUuG,OAAOvG,GCDX,WAASA,GACtB,OAAOA,aAAiBiL,OCDX,WAASjL,GACtB,MAAwB,iBAAVA,ECOD,WAASQ,EAAQwF,GAC9B,MAAMkF,EAAQC,GAAQnE,EAAM,0BAA0BmE,UAAe3K,KACrE,OAAOA,aAAkB4K,IAAMC,EAAkB7K,EAAO8K,UAAWtF,GAC/DuF,EAAO/K,GAAU0K,EAAM,QACvBM,EAAShL,GAAU0K,EAAM,UACzBO,EAASjL,GAAU0K,IACnBnL,EAAQS,GAqBd,SAAmBA,EAAQwF,GACzB,MAAM0F,EAAMlL,EAAOE,OACbuB,EAAU,GACV0J,EAAM5D,GAAQ9F,EAAQ8F,GAAQjI,MAAM4L,GAE1C,GAAIA,EAAK,CAEP,MAAME,GADN5F,EAAQA,GAASO,OAAO5E,KAAKnB,EAAO,KACjBqL,IAAIF,GACjBtD,EAAIuD,EAAKlL,OACf,IAAK,IAAIoL,EAAM,EAAGA,EAAMJ,IAAOI,EAAK,CAClC,MAAMxD,EAAM9H,EAAOsL,GACnB,IAAK,IAAIjG,EAAI,EAAGA,EAAIwC,IAAKxC,EACvB+F,EAAK/F,GAAGiG,GAAOxD,EAAItC,EAAMH,UAGpBG,GACTA,EAAM+F,QAAQJ,GAGhB,OAAO1J,EAxCe+J,CAAUxL,EAAQwF,GACpCJ,EAAWpF,EAAO0G,OAAOuB,WA0C/B,SAAsBjI,EAAQwF,GAC5B,MAAM/D,EAAU,GACV0J,EAAM5D,GAAQ9F,EAAQ8F,GAAQ,GAEpC,IAAI6D,EACAvD,EACJ,IAAK,MAAMC,KAAO9H,EAAQ,CACnBoL,IAEHA,GADA5F,EAAQA,GAASO,OAAO5E,KAAK2G,IAChBuD,IAAIF,GACjBtD,EAAIuD,EAAKlL,QAEX,IAAK,IAAImF,EAAI,EAAGA,EAAIwC,IAAKxC,EACvB+F,EAAK/F,GAAGoE,KAAK3B,EAAItC,EAAMH,MAItB+F,GAAQ5F,GACXA,EAAM+F,QAAQJ,GAGhB,OAAO1J,EA/DmCgK,CAAazL,EAAQwF,GAC3DkG,EAAS1L,GAAU6K,EAAkB9E,OAAO+E,QAAQ9K,GAASwF,GAC7DkF,IAGN,SAASG,EAAkBC,EAAStF,EAAQ,CAAC,MAAO,UAClD,MAAMrE,EAAO,GACPwK,EAAO,GAEb,IAAK,MAAOC,EAAKC,KAAQf,EACvB3J,EAAKsI,KAAKmC,GACVD,EAAKlC,KAAKoC,GAGZ,MAAMpK,EAAU,GAGhB,OAFI+D,EAAM,KAAI/D,EAAQ+D,EAAM,IAAMrE,GAC9BqE,EAAM,KAAI/D,EAAQ+D,EAAM,IAAMmG,GAC3BlK,EChCT,qBAAQqK,GAAmB/F,OAAOgG,UAEnB,WAAS/D,EAAQgE,GAC9B,OAAOF,EAAeG,KAAKjE,EAAQgE,GCDtB,WAAStD,GACtB,OAAOA,EACH,IAAIwD,EAAU,IAAKxD,EAAMhD,QAAUgD,EAAMtB,eACzC,IAAI8E,EAGV,MAAMA,EACJtM,YAAY8F,EAAMF,GAChB1F,KAAK4F,KAAOA,GAAQ,GACpB5F,KAAK0F,MAAQA,GAAS,GAGxB2F,IAAI5D,EAAMvH,GAER,OADKF,KAAKqM,IAAI5E,IAAOzH,KAAK0F,MAAMiE,KAAKlC,EAAO,IACrCzH,KAAK4F,KAAK6B,GAAQvH,EAG3BmM,IAAI5E,GACF,OAAO4E,EAAIrM,KAAK4F,KAAM6B,GAGxB6E,MAIE,OAHAtM,KAAKa,OAAS,KACdb,KAAK6F,OAAS7F,KAAK6F,QAAU,KAC7B7F,KAAK8F,MAAQ,KACN9F,KAGToB,QAAQyE,GAEN,OADA7F,KAAK6F,OAASA,EACP7F,iBC7BIuM,ECHf,MAAMC,EAAavG,OAAOwG,eAAeC,WAE1B,WAAShN,GACtB,OAAOA,aAAiB8M,ECAX,SAASG,EAAYjN,GAClC,OAAOD,EAAQC,IAAUkN,EAAalN,GCJzB,WAASA,GACtB,OAAgB,MAATA,GAAiBA,GAAUA,ECIpC,MAAMmN,EAASC,GAAQH,EAAYG,IAAQ3B,EAAS2B,SAErC,CACbC,QAAeC,GAAQL,EAAYK,GAAOA,EAAInM,QAAOoM,GAAKC,EAAQD,KAAMD,EACxEvI,OAAc,IAAIvE,IAAW,GAAGuE,UAAUvE,GAC1CiN,SAAc,CAACL,EAAKpN,EAAOE,MAAUiN,EAAMC,IACzBA,EAAIK,SAASzN,EAAOE,GAEtCwN,QAAc,CAACN,EAAKpN,IAAUmN,EAAMC,GAAOA,EAAIpF,QAAQhI,IAAU,EACjEiE,KAAc,CAACqJ,EAAKK,IAAUV,EAAYK,GAAOA,EAAIrJ,KAAK0J,GAASC,EACnEC,YAAc,CAACT,EAAKpN,IAAUmN,EAAMC,GAAOA,EAAIU,YAAY9N,IAAU,EACrEU,OAAe0M,GAAQD,EAAMC,GAAOA,EAAI1M,OAAS,EACjDqN,MAAc,CAACT,EAAKU,IAASf,EAAYK,GACvBA,EAAIzB,KAAI0B,GAAKC,EAAQD,GAAKA,EAAES,GAAQJ,IACpCA,EAClBK,QAAeb,GAAQH,EAAYG,GAAOA,EAAI9L,QAAQ2M,UACpCxC,EAAS2B,GAAOA,EAAIc,MAAM,IAAID,UAAUhK,KAAK,IAC7C2J,EAClBtM,MAAc,CAAC8L,EAAK7L,EAAOC,IAAQ2L,EAAMC,GAAOA,EAAI9L,MAAMC,EAAOC,GAAOoM,GCvB3D,WAAS5N,EAAOmO,EAAOC,EAAO,KAC3C,MAAMC,EAAIrO,EAAQ,GACZ0L,EAAM2C,EAAE3N,OACd,OAAOgL,EAAMyC,EAAQrO,MAAMqO,EAAQzC,EAAM,GAAGzH,KAAKmK,GAAQC,EAAIA,ECD/D,MAAMC,EAAOf,IAAMA,EAAI,GAAK,IAAM,IAAMA,EAMjC,SAASgB,EAAUC,EAAMC,EAAOC,EAAMC,EAAOrE,EAAKsE,EAAKC,EAAIC,EAAKC,GACrE,MAAMC,EAASF,EAAM,IAAM,GAC3B,MANiBN,CAAAA,GAAQA,EAAO,EAAI,IAAMS,GAAKT,EAAM,GACnDA,EAAO,KAAO,IAAMS,EAAIT,EAAM,GAC9BS,EAAIT,EAAM,GAILU,CAAWV,GAAQ,IAAMF,EAAKG,EAAQ,GAAK,IAAMH,EAAKI,KAC1DK,GAASF,EAAK,IAAMP,EAAKK,GAAS,IAAML,EAAKhE,GAAO,IAAMgE,EAAKM,GAAO,IAAMK,EAAIJ,EAAI,GAAKG,EACxFJ,EAAM,IAAMN,EAAKK,GAAS,IAAML,EAAKhE,GAAO,IAAMgE,EAAKM,GAAOI,EAC9D1E,GAAOqE,IAAUG,EAAM,IAAMR,EAAKK,GAAS,IAAML,EAAKhE,GAAO0E,EAC7D,IAIC,SAASG,EAAWC,EAAGL,GAC5B,OAAOM,MAAMD,GACT,eACAb,EACAa,EAAEE,cACFF,EAAEG,WACFH,EAAEI,UACFJ,EAAEK,WACFL,EAAEM,aACFN,EAAEO,aACFP,EAAEQ,mBACF,EAAOb,GAIN,SAASc,EAAcT,EAAGL,GAC/B,OAAOM,MAAMD,GACT,eACAb,EACAa,EAAEU,iBACFV,EAAEW,cACFX,EAAEY,aACFZ,EAAEa,cACFb,EAAEc,gBACFd,EAAEe,gBACFf,EAAEgB,sBACF,EAAMrB,GC5CZ,MAAMsB,EAAS,8FAEA,WAASrQ,GACtB,OAAOA,EAAMsQ,MAAMD,GCArB,MACME,EAAQ,MACRC,EAAS,OAETC,EAAK,IAAIzF,KACT0F,EAAK,IAAI1F,KACT2F,EAAIvB,IACRqB,EAAGG,QAAqB,iBAANxB,ECRL,SAASpP,EAAO6Q,EAAQ7F,KAAK6F,OAC1C,OAAOC,EAAgB9Q,GAAS6Q,EAAM7Q,GAASA,EDOZ+Q,CAAa3B,GAAKA,GACrDqB,SAmGa,CACbO,YAAiB,CAACtC,EAAMuC,IAAY9B,EAAWwB,EAAEjC,IAAQuC,GACzDC,eAAiB,CAACxC,EAAMuC,IAAYpB,EAAcc,EAAEjC,IAAQuC,GAC5DE,UAAkBzC,IAAUiC,EAAEjC,GAC9BF,KAAkBE,GAASiC,EAAEjC,GAAMY,cACnC8B,QAAkB1C,GAASrE,KAAKgH,MAAMV,EAAEjC,GAAMa,WAAa,GAC3Dd,MAAkBC,GAASiC,EAAEjC,GAAMa,WACnCb,KAAkBA,GAASiC,EAAEjC,GAAMc,UACnC8B,UAAkB5C,GAASiC,EAAEjC,GAAM6C,SACnC5C,MAAkBD,GAASiC,EAAEjC,GAAMe,WACnC+B,QAAkB9C,GAASiC,EAAEjC,GAAMgB,aACnC+B,QAAkB/C,GAASiC,EAAEjC,GAAMiB,aACnC+B,aAAkBhD,GAASiC,EAAEjC,GAAMkB,kBACnC+B,QAAkBjD,GAASiC,EAAEjC,GAAMoB,iBACnC8B,WAAkBlD,GAASrE,KAAKgH,MAAMV,EAAEjC,GAAMqB,cAAgB,GAC9D8B,SAAkBnD,GAASiC,EAAEjC,GAAMqB,cACnC+B,QAAkBpD,GAASiC,EAAEjC,GAAMsB,aACnC+B,aAAkBrD,GAASiC,EAAEjC,GAAMsD,YACnCC,SAAkBvD,GAASiC,EAAEjC,GAAMuB,cACnCiC,WAAkBxD,GAASiC,EAAEjC,GAAMwB,gBACnCiC,WAAkBzD,GAASiC,EAAEjC,GAAMyB,gBACnCiC,gBAAkB1D,GAASiC,EAAEjC,GAAM0B,qBACnCiC,SA1GF,SAAkB7D,EAAMC,EAAOC,EAAMC,EAAO6C,EAASC,EAASC,GAC5D,OAAQjR,UAAUC,OAEd,IAAIsK,KACFwD,EACAC,GAAS,EACD,MAARC,EAAe,EAAIA,EACnBC,GAAS,EACT6C,GAAW,EACXC,GAAW,EACXC,GAAgB,GARlB,IAAI1G,KAAKA,KAAKsH,QAyGlBC,UAnEF,SAAmB7D,GACjBgC,EAAGE,SAASlC,GACZgC,EAAG8B,SAAS,EAAG,EAAG,EAAG,GACrB/B,EAAGG,SAASF,GACZD,EAAGgC,SAAS,GACZhC,EAAGiC,QAAQ,GACX,MAAMC,EArES,KAqEHjC,EAAGkC,oBAAsBnC,EAAGmC,qBACxC,OAAOvI,KAAKgH,MAAM,GAAMX,EAAKD,EAAMkC,GAAMpC,IA6DzCsC,KAnDF,SAAcnE,EAAMoE,GAClB,MAAMjN,EAAIiN,GAAY,EACtBpC,EAAGE,SAASlC,GACZgC,EAAGgC,QAAQhC,EAAGlB,WAAakB,EAAGa,SAAW,EAAI1L,GAAK,GAClD6K,EAAG8B,SAAS,EAAG,EAAG,EAAG,GACrB/B,EAAGG,SAASlC,GACZ+B,EAAGgC,SAAS,GACZhC,EAAGiC,QAAQ,GACXjC,EAAGiC,QAAQ,GAAKjC,EAAGc,SAAW,EAAI1L,GAAK,GACvC4K,EAAG+B,SAAS,EAAG,EAAG,EAAG,GACrB,MAAMG,EA1FS,KA0FHjC,EAAGkC,oBAAsBnC,EAAGmC,qBACxC,OAAOvI,KAAKgH,OAAYX,EAAKD,EAAV,EAAgBkC,GAAMnC,IAyCzCuC,YAnFF,SAAqBvE,EAAMC,EAAOC,EAAMC,EAAO6C,EAASC,EAASC,GAC/D,OAAQjR,UAAUC,OAEd,IAAIsK,KAAKA,KAAKgI,IACZxE,EACAC,GAAS,EACD,MAARC,EAAe,EAAIA,EACnBC,GAAS,EACT6C,GAAW,EACXC,GAAW,EACXC,GAAgB,IARlB,IAAI1G,KAAKA,KAAKsH,QAkFlBW,aA5DF,SAAsBvE,GACpBgC,EAAGE,SAASlC,GACZgC,EAAGwC,YAAY,EAAG,EAAG,EAAG,GACxB,MAAMzC,EAAKzF,KAAKgI,IAAItC,EAAGZ,iBAAkB,EAAG,GAC5C,OAAOzF,KAAKgH,MAAM,GAAKX,EAAKD,GAAMF,IAyDlC4C,QAxCF,SAAiBzE,EAAMoE,GACrB,MAAMjN,EAAIiN,GAAY,EAStB,OARApC,EAAGE,SAASlC,GACZgC,EAAG0C,WAAW1C,EAAGV,cAAgBU,EAAGsB,YAAc,EAAInM,GAAK,GAC3D6K,EAAGwC,YAAY,EAAG,EAAG,EAAG,GACxBzC,EAAGG,SAASlC,GACZ+B,EAAG4C,YAAY,GACf5C,EAAG2C,WAAW,GACd3C,EAAG2C,WAAW,GAAK3C,EAAGuB,YAAc,EAAInM,GAAK,GAC7C4K,EAAGyC,YAAY,EAAG,EAAG,EAAG,GACjB7I,KAAKgH,OAAYX,EAAKD,EAAV,GAAiBD,IA+BpC8B,IAAKtH,KAAKsH,KE9HG,SAASgB,EAAM5J,EAAGC,GAC/B,OAAa,MAALD,GAAkB,MAALC,GAAaD,GAAMA,GAAKC,GAAMA,IAC/CD,IAAMC,IACL4B,EAAO7B,IAAM6B,EAAO5B,IAAOD,IAAOC,EAClC6B,EAAS9B,IAAM8B,EAAS7B,GAAMD,EAAI,IAAOC,EAAI,MAC7CuC,EAASxC,KAAMwC,EAASvC,KAI/B,SAAmBD,EAAGC,GACpB,GAAIpD,OAAOwG,eAAerD,KAAOnD,OAAOwG,eAAepD,GACrD,OAAO,EAGT,GAAID,EAAEhJ,QAAUiJ,EAAEjJ,OAChB,OAAO6S,EAAW7J,EAAGC,GAGvB,MAAM6J,EAAQjN,OAAO5E,KAAK+H,GACpB+J,EAAQlN,OAAO5E,KAAKgI,GAC1B,GAAI6J,EAAM9S,SAAW+S,EAAM/S,OACzB,OAAO,EAKT,GAHA8S,EAAM/J,OACNgK,EAAMhK,QAED8J,EAAWC,EAAOC,GAAO,CAAC/J,EAAGC,IAAMD,IAAMC,IAC5C,OAAO,EAGT,MAAMtB,EAAImL,EAAM9S,OAChB,IAAK,IAAImF,EAAI,EAAGA,EAAIwC,IAAKxC,EAAG,CAC1B,MAAM6N,EAAIF,EAAM3N,GAChB,IAAKyN,EAAM5J,EAAEgK,GAAI/J,EAAE+J,IACjB,OAAO,EAIX,OAAO,EAjC4BC,CAAUjK,EAAGC,KAoClD,SAAS4J,EAAW7J,EAAGC,EAAGiK,EAAON,GAC/B,MAAMjL,EAAIqB,EAAEhJ,OACZ,GAAI2H,IAAMsB,EAAEjJ,OAAQ,OAAO,EAE3B,IAAK,IAAImF,EAAI,EAAGA,EAAIwC,IAAKxC,EACvB,IAAK+N,EAAKlK,EAAE7D,GAAI8D,EAAE9D,IAChB,OAAO,EAIX,OAAO,QC/DM,CACbgO,WAAaC,GAAQC,KAAKlD,MAAMiD,GAChCE,QAAa3H,GAAQ0H,KAAKE,UAAU5H,ICAtC,IAAI6H,EAAS7J,KAAK8J,OAEX,SAASA,IACd,OAAOD,ICLM,WAASlU,GACtB,OAAOA,aAAiBoL,ICEX,WAASpL,GACtB,OAAOoU,EAAMpU,ICJA,SAASA,GACtB,OAAOA,aAAiBqU,IDGDC,CAAMtU,GEC/B,SAASkI,EAAMqM,GACb,OAAOzU,MAAM0U,KAAKD,SAGL,CACb5H,IAAU,CAAC9D,EAAKuD,IAAQqI,EAAW5L,GAAOA,EAAI8D,IAAIP,GAC7B,MAAPvD,GAAc8D,EAAI9D,EAAKuD,GAErCzK,KAAWkH,GAAQuL,EAAMvL,GAAOX,EAAMW,EAAIlH,QACrB,MAAPkH,EAActC,OAAO5E,KAAKkH,GAC1B,GACdrI,OAAWqI,GAAQ4L,EAAW5L,GAAOX,EAAMW,EAAIrI,UAC1B,MAAPqI,EAActC,OAAO/F,OAAOqI,GAC5B,GACdyC,QAAWzC,GAAQ4L,EAAW5L,GAAOX,EAAMW,EAAIyC,WAC1B,MAAPzC,EAActC,OAAO+E,QAAQzC,GAC7B,GACdL,OAAW8C,GAAYA,EAAU/E,OAAOmO,YAAYpJ,GAAWsC,GCTlD,WAASrM,EAAOgJ,EAAMoK,GACnC,IAAItM,EAAI5H,UAAUC,OAClBa,GAASA,EACTgJ,GAAQA,EACRoK,EAAOtM,EAAI,GACNkC,EAAOhJ,EAAOA,EAAQ,EAAG,GAC1B8G,EAAI,EAAI,GAAKsM,EAEjBtM,EAAoD,EAAhDgC,KAAKK,IAAI,EAAGL,KAAKuK,MAAMrK,EAAOhJ,GAASoT,IAC3C,MAAMvH,EAAM,IAAItN,MAAMuI,GAEtB,IAAK,IAAIxC,EAAI,EAAGA,EAAIwC,IAAKxC,EACvBuH,EAAIvH,GAAKtE,EAAQsE,EAAI8O,EAGvB,OAAOvH,QCjBM,KCCA,SAASpN,EAAOsK,EAAKI,EAAKiK,EAAMvK,GAC7C,OAAgB,MAATpK,EAAgB,KACnBA,EAAQsK,GAAO7I,EAAAA,EACfzB,EAAQ0K,EAAOjJ,EAAAA,GAEbzB,EAAQqK,KAAKK,IAAIJ,EAAKD,KAAKC,IAAItK,EAAO0K,IACtCJ,EAAMqK,EAAOtK,KAAKgH,MAAM,OAASrR,EAAQsK,GAAOqK,GAAQvK,GAAU,MDLxEkJ,MAAAA,EACAuB,OEEa,SAAS7U,EAAO6L,EAAKiJ,GAClC,GAAIjJ,aAAeT,KACjB,GAAIS,EAAIc,IAAI3M,GAAQ,OAAO6L,EAAI1D,IAAInI,QAC9B,GAAI2M,EAAId,EAAK7L,GAClB,OAAO6L,EAAI7L,GAEb,YAAoB6M,IAAbiI,EAAyBA,EAAW9U,GFP3C+U,SAAAA,KACG7M,KACAwG,KACAsG,KGhBU,CACbb,OAAAA,EACAc,OAAWC,OAAO7F,MAClB8F,UAAWD,OAAOE,SAElBC,IAAUhL,KAAKgL,IACfC,KAAUjL,KAAKiL,KACfV,KAAUvK,KAAKuK,KACfW,MAAUlL,KAAKkL,MACfC,IAAUnL,KAAKmL,IACfC,MAAUpL,KAAKoL,MACfpE,MAAUhH,KAAKgH,MACfqE,OAAUrL,KAAKqL,OACfC,SAAUtL,KAAKK,IACfkL,MAAUvL,KAAKC,IACfrB,IAAUoB,KAAKpB,IACf4M,MAAUxL,KAAKwL,MACfC,MAAUzL,KAAKyL,MACfC,KAAU1L,KAAK0L,KACfC,IAAU3L,KAAK2L,IACfC,MAAU5L,KAAK4L,MACfC,KAAU7L,KAAK6L,KACfC,KAAU9L,KAAK8L,KACfC,MAAU/L,KAAK+L,MAEfC,QAAWC,GAAQ,IAAMA,EAAMjM,KAAKkM,GACpCC,QAAWC,GAAQpM,KAAKkM,GAAKE,EAAM,IACnCC,KAAUrM,KAAKqM,KACfC,MAAUtM,KAAKsM,MACfC,KAAUvM,KAAKuM,KACfC,MAAUxM,KAAKwM,MACfC,KAAUzM,KAAKyM,KACfC,MAAU1M,KAAK0M,MACfC,MAAU3M,KAAK2M,MACfC,IAAU5M,KAAK4M,IACfC,KAAU7M,KAAK6M,KACfC,IAAU9M,KAAK8M,IACfC,KAAU/M,KAAK+M,KACfC,IAAUhN,KAAKgN,IACfC,KAAUjN,KAAKiN,SHrBZ9O,KIpBU,CACb+O,WAAezD,GAAe,MAAPA,EAAcA,EAAM,IAAI9I,KAAK8I,GACpD0D,YAAe1D,GAAe,MAAPA,EAAcA,EAAMoB,OAAOuC,WAAW3D,GAC7D4D,UAAc,CAAC5D,EAAK6D,IAAiB,MAAP7D,EAAcA,EAAMoB,OAAO0C,SAAS9D,EAAK6D,GACvEE,SAAc,CAAC/D,EAAKgE,EAAQpX,IAAkB,MAAPoT,GACrBiE,OAAOjE,GAAKkE,SAASF,EAAQpX,GAC/C4P,MAAc,CAACwD,EAAKmE,EAAQ/X,KACZ,MAAMgY,EAAW,MAAPpE,EAAcA,EAAMiE,OAAOjE,GAAKxD,MAAM2H,GAChD,OAAgB,MAAT/X,GAAsB,MAALgY,EAAYA,EACf,iBAAVhY,EAAqBgY,EAAEhY,GAC9BgY,EAAE/R,OAAS+R,EAAE/R,OAAOjG,GACpB,MAEpBiY,UAAc,CAACrE,EAAKsE,IAAgB,MAAPtE,EAAcA,EACzBiE,OAAOjE,GAAKqE,UAAUC,GACxCC,OAAc,CAACvE,EAAKpI,EAAK5F,IAAgB,MAAPgO,EAAcA,EAC9BiE,OAAOjE,GAAKwE,OAAO5M,EAAK5F,GAC1CyS,SAAc,CAACzE,EAAKpI,EAAK5F,IAAgB,MAAPgO,EAAcA,EAC9BiE,OAAOjE,GAAK0E,SAAS9M,EAAK5F,GAC5C2S,MAAe3E,GAAe,MAAPA,EAAcA,EACnBiE,OAAOjE,GAAK4E,cAC9BC,MAAe7E,GAAe,MAAPA,EAAcA,EACnBiE,OAAOjE,GAAK8E,cAC9B7O,OAAc,CAAC+J,EAAK+E,IAAe,MAAP/E,EAAcA,EACxBiE,OAAOjE,GAAK/J,OAAO8O,GACrCC,QAAc,CAAChF,EAAKiF,EAASC,IAAuB,MAAPlF,EAAcA,EACzCiE,OAAOjE,GAAKgF,QAAQC,EAAShB,OAAOiB,IACtDC,UAAc,CAACnF,EAAKvS,EAAOC,IAAe,MAAPsS,EAAcA,EAC/BiE,OAAOjE,GAAKmF,UAAU1X,EAAOC,GAC/C0M,MAAc,CAAC4F,EAAKoF,EAAWtQ,IAAiB,MAAPkL,EAAc,GACrCiE,OAAOjE,GAAK5F,MAAMgL,EAAWtQ,GAC/CuQ,WAAc,CAACrF,EAAKgE,EAAQpX,IAAkB,MAAPoT,GACrBiE,OAAOjE,GAAKsF,WAAWtB,EAAQpX,GACjD2Y,KAAevF,GAAe,MAAPA,EAAcA,EACnBiE,OAAOjE,GAAKuF,SClCjB,YAASrZ,GACtB,MAAwB,iBAAVA,ECCD,YAASuN,GACtB,YAAaV,IAANU,EAAkBA,EAAI,GACzB+L,GAAS/L,GAAKA,EAAI,IAClBwG,KAAKE,UAAU1G,GCFN,YAASxF,EAAMwR,EAAS,GAAIlZ,EAAS,IAClD,OAAO,IAAImZ,GAAGzR,EAAM5F,EAAQoX,GAASpX,EAAQ9B,IAGxC,MAAMmZ,GACXpZ,YAAY2H,EAAMwR,EAAQlZ,GACxBC,KAAKyH,KAAOA,EACZzH,KAAKiZ,OAASA,EACdjZ,KAAKD,OAASA,EAEhBoZ,WACE,MAAMC,EAAO,IACRpZ,KAAKiZ,OAAO1N,KAAI8N,GAAK,KAAKF,GAASE,WACnCrZ,KAAKD,OAAOwL,IAAI4N,KAErB,MAAO,WAAWnZ,KAAKyH,QAAQ2R,KAEjCE,WACE,MAAO,CAAEC,KAAMvZ,KAAKmZ,WAAYK,MAAM,IClBnC,MAAMC,GAAOC,GAAUC,GAAG,MAAOD,GAC3BlZ,GAAQ,IAAMmZ,GAAG,SACjBC,GAAaF,GAAUC,GAAG,YAAaD,GACvCG,GAAsBH,GAAUC,GAAG,qBAAsBD,GACzDI,GAAU,CAAChO,EAAKpM,IAAUia,GAAG,UAAW,CAAC7N,EAAKpM,IAC9Cqa,GAAa,CAACjO,EAAKpM,IAAUia,GAAG,aAAc,CAAC7N,EAAKpM,IACpDsa,GAAc,CAAClO,EAAKpM,IAAUia,GAAG,cAAe,CAAC7N,EAAKpM,WAUpD,IACVua,EAQHC,WAAY,IAAIxU,IAAUiU,GAAG,aAAc,KAAMjU,EAAMnE,QAMvDf,MAAAA,GAOAiZ,IAAAA,GAOAG,UAAAA,GAOAC,mBAAAA,GAQAE,WAAAA,GAQAD,QAAAA,GASAE,YAAAA,GAQAG,MAAQT,GAAUC,GAAG,QAASD,GAQ9BU,QAAUV,GAAUC,GAAG,UAAWD,GAOlCW,SAAWX,GAAUC,GAAG,WAAYD,GAOpCY,KAAOZ,GAAUC,GAAG,OAAQD,GAO5Ba,IAAMb,GAAUC,GAAG,MAAOD,GAO1Bc,QAAUd,GAAUC,GAAG,UAAWD,GAOlCe,KAAOf,GAAUC,GAAG,OAAQD,GAO5BgB,QAAUhB,GAAUC,GAAG,UAAWD,GAOlCiB,SAAWjB,GAAUC,GAAG,WAAYD,GAOpCkB,UAAYlB,GAAUC,GAAG,YAAaD,GAOtCmB,MAAQnB,GAAUC,GAAG,QAASD,GAO9BoB,OAASpB,GAAUC,GAAG,SAAUD,GAOhC1P,IAAM0P,GAAUC,GAAG,MAAOD,GAO1BtP,IAAMsP,GAAUC,GAAG,MAAOD,GAS1BqB,SAAU,CAACrB,EAAOsB,IAAMrB,GAAG,WAAYD,EAAOsB,GAQ9CC,OAASvB,GAAUC,GAAG,SAAUD,GAQhCwB,WAAY,CAACC,EAAQC,IAAWzB,GAAG,aAAc,CAACwB,EAAQC,IAQ1DC,YAAa,CAACF,EAAQC,IAAWzB,GAAG,cAAe,CAACwB,EAAQC,IAU5DE,KAAM,CAACH,EAAQC,IAAWzB,GAAG,OAAQ,CAACwB,EAAQC,IAc9CG,KAAM,CAAC7B,EAAO8B,EAASC,EAAMC,IAC3B/B,GAAG,OAAQD,EAAO,CAAC8B,EAASC,EAAMC,IAMpCC,WAAY,IAAMhC,GAAG,cASrBiC,KAAM,IAAMjC,GAAG,QAQfkC,SAAU,IAAMlC,GAAG,YASnBmC,WAAY,IAAMnC,GAAG,cAOrBoC,aAAc,IAAMpC,GAAG,gBAOvBqC,UAAW,IAAMrC,GAAG,aASpBsC,MAAQ1D,GAAQoB,GAAG,QAAS,KAAMpB,GAWlC2D,IAAK,CAACxC,EAAO5P,EAAQqS,IAAiBxC,GAAG,MAAOD,EAAO,CAAC5P,EAAQqS,IAWhEC,KAAM,CAAC1C,EAAO5P,EAAQqS,IAAiBxC,GAAG,OAAQD,EAAO,CAAC5P,EAAQqS,IAOlEE,YAAc3C,GAAUC,GAAG,cAAeD,GAO1C4C,WAAa5C,GAAUC,GAAG,aAAcD,GASxC6C,UAAW,CAAC7C,EAAOvP,IAAQwP,GAAG,YAAaD,EAAOvP,GASlDqS,UAAW,CAAC9C,EAAOyC,IAAiBxC,GAAG,YAAaD,EAAOyC,GAS3DM,QAAS,CAAC/C,EAAOyC,IAAiBxC,GAAG,UAAWD,EAAOyC,ICvRlD,SAASO,GAAK9T,EAAO4C,EAAKjD,EAAKsC,GACpC,MAAM8R,EAAe,QAAT9R,IAA2B,IAATA,EAAgBiP,GACjC,YAATjP,EAAqBmP,GACZ,WAATnP,EAAoBkP,GACpBrT,EAAM,yDAEJhB,MAAEA,GAAUkD,EAAM/C,SAClB+W,EClFO,SAASlX,EAAO+B,GAC7B/B,EAAQyO,EAAWzO,GAASA,EAAQ,IAAIqO,IAAIrO,GAC5C,IAAImX,EAAQpV,EACR7H,EAAQ,EAEZ,KAAO8F,EAAM2G,IAAIwQ,IACfA,EAAQpV,KAAS7H,EAGnB,OAAOid,EDyEKC,CAAWlU,EAAMtB,cAAe,KAI5C,IAAI+I,EAAIzH,EACLvG,SACAhC,MAAMmL,GACN/E,OAAO,CAAEb,KAAM,CAAEgX,CAACA,GAAMrU,KACxBvG,OAAO,CAAE4a,CAACA,GAAMhD,GAAUgD,KAG7B,IAAK,IAAIrX,EAAIG,EAAMtF,SAAUmF,GAAK,GAChC8K,EAAIA,EACDjP,QAAQsE,EAAM1E,MAAM,EAAGuE,IACvBvD,OAAO,CAAE4a,CAACA,GAAMD,EAAIjX,EAAMH,GAAIqX,KAInC,OAAOvM,EAAExI,IAAI+U,GEtGR,MAGMG,GAAa,aACbC,GAAU,UACVC,GAAmB,mBAEnBC,GAAgB,gBAChBC,GAAW,WAEX3S,GAAS,SAET4S,GAAa,aCTpBC,GAAQ,CAACC,EAAMxZ,KACnB,MAAMuV,EAAIkE,GAASD,EAAKzS,MACxB,OAAOwO,EACHA,EAAEiE,EAAMxZ,GACR4C,EAAM,qCAAqC4W,EAAKzS,SAGhD2S,GAAS,CAACF,EAAMxZ,IACb,IAAMuZ,GAAMC,EAAKvZ,KAAMD,GAAO,IAAMwZ,EAAKG,SAAW,IAAMJ,GAAMC,EAAKtZ,MAAOF,GAAO,IAGtF0V,GAAO,CAAC8D,EAAMxZ,IACX,IAAM4Z,GAAKJ,EAAKvd,OAAQ+D,GAAO,MAAQuZ,GAAMC,EAAKK,KAAM7Z,GAG3DqI,GAAO,CAACmR,EAAMxZ,IACXuZ,GAAMC,EAAKM,OAAQ9Z,GAAO,IAAM4Z,GAAKJ,EAAKnd,UAAW2D,GAAO,IAG/D4Z,GAAO,CAAC9V,EAAO9D,EAAKuJ,EAAQ,MACzBzF,EAAM2D,KAAI+R,GAAQD,GAAMC,EAAMxZ,KAAMH,KAAK0J,GAG5C5F,GAAO6V,GAAQA,EAAKO,SACtB,IAAI1E,GAASmE,EAAK7V,SAClB,IAAI6V,EAAK7V,OAEPqW,GAAM,CAACR,EAAMxZ,EAAKia,KACtB,MAAMnV,EAAQ0U,EAAK1U,OAAS,GAC5B,MAAO,OAAOA,IAAQnB,GAAK6V,MAASS,KAAUja,EAAIlE,QAAQgJ,MAGtD2U,GAAW,CACfS,SAAUV,GAAQA,EAAKW,IACvBzT,OAAQ,CAAC8S,EAAMxZ,IAAQga,GAAIR,EAAMxZ,EAAK,OACtCsZ,WAAY,CAACE,EAAMxZ,IAAQga,GAAIR,EAAMxZ,EAAK,OAC1Coa,SAAUZ,GAAQ,MAAMA,EAAK7V,OAC7B0W,UAAWb,GAAQ,IAAI7V,GAAK6V,KAC5BpE,GAAI,CAACoE,EAAMxZ,IAAQ,MAAMqV,GAASmE,EAAK7V,SAAS3D,EAAI6V,IAAM7V,EAAIlE,SAC9Dod,QAASM,GAAQA,EAAKW,IACtBlB,WAAYO,GAAQA,EAAK7V,KACzB2W,gBAAiB,CAACd,EAAMxZ,KACtB,MAAMua,OAAEA,EAAMC,YAAEA,GAAgBhB,EAC1BvV,EAAIuW,EAAYle,OACtB,IAAIiQ,EAAIgO,EAAO,GAAG3e,MAAMue,IACxB,IAAK,IAAI1Y,EAAI,EAAGA,EAAIwC,GAClBsI,GAAK,KAAOgN,GAAMiB,EAAY/Y,GAAIzB,GAAO,IAAMua,IAAS9Y,GAAG7F,MAAMue,IAEnE,MAAO,IAAM5N,EAAI,KAEnB4M,iBAAkB,CAACK,EAAMxZ,KACvB,MAAMgL,GAAKwO,EAAKO,SACVU,EAAIlB,GAAMC,EAAKpV,OAAQpE,GACvBkX,EAAIqC,GAAMC,EAAKpR,SAAUpI,GAC/B,OAAOya,GAAKzP,EAAI,IAAMkM,EAAI,IAAMA,EAAI,MAEtCwD,eAAgBrS,GAChBsS,cAAe,CAACnB,EAAMxZ,IACb,OAASqI,GAAKmR,EAAMxZ,GAE7B4a,gBAAiB,CAACpB,EAAMxZ,IACf,IAAM4Z,GAAKJ,EAAKqB,SAAU7a,GAAO,IAE1C8a,qBAAsBpB,GACtBqB,iBAAkBrB,GAClBsB,kBAAmBtB,GACnBuB,gBAAiB,CAACzB,EAAMxZ,IACf,IAAMwZ,EAAKG,SAAWJ,GAAMC,EAAK0B,SAAUlb,GAAO,IAE3Dmb,sBAAuB,CAAC3B,EAAMxZ,IACrB,IAAMuZ,GAAMC,EAAKhK,KAAMxP,GAC5B,IAAMuZ,GAAMC,EAAK4B,WAAYpb,GAC7B,IAAMuZ,GAAMC,EAAK6B,UAAWrb,GAAO,IAEvCsb,iBAAkB,CAAC9B,EAAMxZ,IAChB,KAAO4Z,GAAKJ,EAAK+B,WAAYvb,GAAO,KAE7CqZ,SAAU,CAACG,EAAMxZ,KACf,MAAMgI,EAAMuR,GAAMC,EAAKxR,IAAKhI,GAC5B,OAAQwZ,EAAKO,SAAW,IAAI/R,KAASA,GAAO,IAAMuR,GAAMC,EAAK5d,MAAOoE,IAGtEwb,wBAAyB9F,GACzB+F,mBAAoB/F,GACpBgG,oBAAqBhG,GAErBiG,aAAc,CAACnC,EAAMxZ,IACZ,IAAM4Z,GAAKJ,EAAKqB,SAAU7a,GAAO,IAE1CoZ,cAAe,CAACI,EAAMxZ,IACb,IAAM4Z,GAAKJ,EAAK+B,WAAYvb,GAAO,IAE5C4b,oBAAqB,CAACpC,EAAMxZ,IACnBwZ,EAAKqC,KAAO,IAAMjC,GAAKJ,EAAKsC,aAAc9b,EAAK,KAExD+b,mBAAoB,CAACvC,EAAMxZ,IAClBuZ,GAAMC,EAAKwC,GAAIhc,GAAO,IAAMuZ,GAAMC,EAAKyC,KAAMjc,GAEtDkc,cAAe,CAAC1C,EAAMxZ,IACb,MAAQuZ,GAAMC,EAAK0B,SAAUlb,GAGtCmc,eAAgB,CAAC3C,EAAMxZ,IACd,IAAM4Z,GAAKJ,EAAKK,KAAM7Z,EAAK,KAAO,KAE3Coc,eAAgB,IACP,QAETC,oBAAqB,CAAC7C,EAAMxZ,IACnBuZ,GAAMC,EAAK8C,WAAYtc,GAEhCuc,YAAa,CAAC/C,EAAMxZ,IACX,OAASuZ,GAAMC,EAAKhK,KAAMxP,GAAO,IACpCuZ,GAAMC,EAAK4B,WAAYpb,IACtBwZ,EAAK6B,UAAY,SAAW9B,GAAMC,EAAK6B,UAAWrb,GAAO,IAEhEwc,gBAAiB,CAAChD,EAAMxZ,IACf,WAAauZ,GAAMC,EAAKiD,aAAczc,GAAO,MACjD4Z,GAAKJ,EAAKkD,MAAO1c,EAAK,IACtB,IAEL2c,WAAY,CAACnD,EAAMxZ,KACTwZ,EAAKhK,KAAO,QAAU+J,GAAMC,EAAKhK,KAAMxP,GAAO,WAClD,KACA4Z,GAAKJ,EAAK4B,WAAYpb,EAAK,KAAO,IAExC4c,gBAAiB,CAACpD,EAAMxZ,IACf,UAAYuZ,GAAMC,EAAK0B,SAAUlb,GAE1C6c,QAAS,CAACrD,EAAMxZ,IAAQuZ,GAAMC,EAAKK,KAAK,GAAI7Z,IAG/B,YAASwZ,EAAMxZ,EAAM,CAAElE,MAAO,QAC3C,OAAOyd,GAAMC,EAAMxZ,GCnId,SAASgI,GAAIpM,GAClB,MAAMmL,SAAcnL,EACpB,MAAgB,WAATmL,EAAoB,IAAInL,KAClB,WAATmL,GAAsBnL,EACtBuL,EAAOvL,IAAUA,EACjBD,EAAQC,IAAUkN,EAAalN,GAAS,IAAIA,EAAM6L,IAAIO,OACtDZ,EAASxL,GAASA,EAAQ,GAIhC,SAAmBA,GACjB,IAAIqO,EAAI,IACJxI,GAAK,EACT,IAAK,MAAM6N,KAAK1T,IACR6F,EAAI,IAAGwI,GAAK,KAClBA,GAAK,IAAIqF,MAAMtH,GAAIpM,EAAM0T,MAG3B,OADArF,GAAK,IACEA,EAXH6S,CAAUlhB,GAJoBA,EAkBrB,YAASmI,EAAKgZ,GAC3B,MAAM9Y,EAAIF,EAAIzH,OACd,OAAa,IAAN2H,EACH,CAACC,EAAKpC,IAASkG,GAAIjE,EAAI,GAAGG,EAAKpC,IAC/B,CAACoC,EAAKpC,KACJ,IAAImI,EAAI,GACR,IAAK,IAAIxI,EAAI,EAAGA,EAAIwC,IAAKxC,EAAG,CACtBA,EAAI,IAAGwI,GAAK,KAChB,MAAMd,EAAIpF,EAAItC,GAAGyC,EAAKpC,GACtB,GAAIib,IAAe,MAAL5T,GAAaA,GAAMA,GAAI,OAAO,KAC5Cc,GAAKjC,GAAImB,GAEX,OAAOc,GCtCA,eCUf,SAAS+S,GAAOnH,GAId,OAHAA,EAAGoG,KAAOpG,EAAGoG,MAAQgB,GACrBpH,EAAGtO,IAAMsO,EAAGtO,KAAO0V,GACnBpH,EAAGqH,IAAMrH,EAAGqH,KAAOD,GACZpH,EAGT,SAASsH,GAAYlT,EAAGrO,GAEtB,OADAqO,EAAEmT,WAAY,EACPnT,EAAEyM,QAAU9a,SA+DN,CAEbc,MAAO,CACLiG,OAAQ,IAAMqa,GAAO,CACnBphB,MAAOqO,GAAKA,EAAEvN,QAEhB2gB,MAAO,IAITvH,UAAW,CACTnT,OAAQ,IAAMqa,GAAO,CACnBf,KAAMhS,GAAKA,EAAE7N,QAAS,EACtBR,MAAOqO,GAAKA,EAAE2P,KAAKxd,OAAO6N,EAAEqT,UAE9BD,MAAO,CAAC,IAIVpH,WAAY,CACVtT,OAAQ,IAAMqa,GAAO,CACnBf,KAAOhS,GAAKA,EAAE7N,QAAS,EACvBR,MAAOqO,GAAK9H,OAAOmO,YAAYrG,EAAE2P,KAAKxd,YAExCihB,MAAO,CAAC,IAIVrH,QAAS,CACPrT,OAAQ,IAAMqa,GAAO,CACnBf,KAAOhS,GAAKA,EAAE7N,QAAS,EACvBR,MAAOqO,GAAK,IAAIjD,IAAIiD,EAAE2P,KAAKxd,YAE7BihB,MAAO,CAAC,IAIVnH,YAAa,CACXvT,OAAQ,IAAMqa,GAAO,CACnBf,KAAOhS,GAAKA,EAAE7N,QAAS,EACvBR,MAAOqO,GAAKA,EAAE2P,KAAKxd,OAAO6N,EAAEqT,UAE9BD,MAAO,CAAC,IAIV1H,IAAK,CACHhT,OAAQ,IAAMqa,GAAO,CACnBzV,IAAK,CAAC0C,EAAGd,KAAqB,MAATc,EAAE0L,MAAa1L,EAAE0L,IAAMxM,IAC5CvN,MAAOqO,GAAKA,EAAEoM,MAAQpM,EAAE0L,IAAMnM,IAEhC6T,MAAO,CAAC,IAIVhH,MAAO,CACL1T,OAAQ,IAAMqa,GAAO,CACnBphB,MAAOqO,GAAKA,EAAEoM,QAEhBgH,MAAO,CAAC,IAIV/G,QAAS,CACP3T,OAAQ,IAAMqa,GAAO,CACnBphB,MAAOqO,GAAKA,EAAEvN,MAAQuN,EAAEoM,QAE1BgH,MAAO,CAAC,IAIV9G,SAAU,CACR5T,OAAQ,MACNsZ,KAAMhS,GAAKA,EAAEsM,SCzJJ,WACb,MAAM9O,EAAM,IAAIT,IAChB,MAAO,CACLtK,MAAK,IACI+K,EAAIpJ,KAEbjC,OAAM,IACGV,MAAM0U,KAAK3I,EAAIrL,UAAUmhB,GAAKA,EAAEpU,IAEzCqU,UAAUrU,GACR,MAAMmG,EAAItH,GAAImB,GACRsU,EAAIhW,EAAI1D,IAAIuL,GAClBmO,IAAMA,EAAExZ,EAAIwD,EAAIiW,IAAIpO,EAAG,CAAEnG,EAAAA,EAAGlF,EAAG,KAEjC0Z,UAAUxU,GACR,MAAMmG,EAAItH,GAAImB,GACRsU,EAAIhW,EAAI1D,IAAIuL,GACV,IAARmO,EAAExZ,EAAUwD,EAAImW,OAAOtO,KAAOmO,EAAExZ,GAElC0D,QAAQ5B,GACN0B,EAAIE,SAAQ,EAAGwB,EAAAA,EAAGlF,KAAQ8B,EAAGoD,EAAGlF,ODqIR4Z,GACxBjiB,MAAOqO,GAAKA,EAAEsM,SAAS7Z,SAAWuN,EAAEoM,QAAUpM,EAAEvN,MAAQ,EAAI,GAC5D6K,IAAK,CAAC0C,EAAGd,IAAMc,EAAEsM,SAASiH,UAAUrU,GACpC+T,IAAK,CAACjT,EAAGd,IAAMc,EAAEsM,SAASoH,UAAUxU,KAEtCkU,MAAO,CAAC,IAIVtH,mBAAoB,CAClBpT,OAAQ,IAAMqa,GAAO,CACnBphB,MAAOqO,GAAKA,EAAEsM,SAASna,WAEzBihB,MAAO,CAAC,GACRS,IAAK,CAAC,aAIRtH,KAAM,CACJ7T,OAAQ,IAAMqa,GAAO,CACnBphB,MAAOqO,IACL,IAAIuM,EAAOhN,EACPlD,EAAM,EAOV,OANA2D,EAAEsM,SAAS5O,SAAQ,CAAC/L,EAAOc,KACrBA,EAAQ4J,IACVA,EAAM5J,EACN8Z,EAAO5a,MAGJ4a,KAGX6G,MAAO,CAAC,GACRS,IAAK,CAAC,aAIRrH,IAAK,CACH9T,OAAQ,MACNsZ,KAAOhS,GAAKA,EAAEwM,IAAM,EACpB7a,MAAOqO,GAAKA,EAAEoM,MAAQpM,EAAEwM,IAAMjN,EAC9BjC,IAAK,CAAC0C,EAAGd,IAAM+L,GAAS/L,GACT,IAAVc,EAAEwM,IAAYxM,EAAEwM,IAAMtN,EAAIc,EAAEwM,KAAOtN,EACpCc,EAAEwM,MAAQtN,EACd+T,IAAK,CAACjT,EAAGd,IAAMc,EAAEwM,KAAOtN,IAE1BkU,MAAO,CAAC,IAIV3G,QAAS,CACP/T,OAAQ,MACNsZ,KAAOhS,GAAKkT,GAAYlT,EAAG,GAC3BrO,MAAOqO,GAAKA,EAAEoM,MAERpM,EAAEmT,UACED,GAAYlT,EEnNb,SAAS7N,EAAQe,EAAQ,EAAGgJ,EAAO/J,EAAOE,QACvD,IAAIyhB,EAAO3hB,EAAOe,KAElB,IAAK,IAAIsE,EAAItE,EAAOsE,EAAI0E,IAAQ1E,EAC9Bsc,GAAQ3hB,EAAOqF,GAGjB,OAAOsc,EF4MsBrH,CAAQzM,EAAE2P,KAAKxd,WAC9B6N,EAAEyM,aAERjO,EACJlB,IAAK,CAAC0C,EAAGd,IAAM+L,GAAS/L,IACL,IAAdc,EAAEyM,QAAgBzM,EAAEyM,QAAUvN,EAC/Bc,EAAEyM,SAAWvN,EACjB+T,IAAK,CAACjT,EAAGd,IAAY,GAALA,GAAUA,IAAM9L,EAAAA,GAAY8L,KAAO9L,EAAAA,EAC/C4M,EAAEmT,WAAY,EACdnT,EAAEyM,SAAWvN,IAEnBkU,MAAO,CAAC,GACRC,OAAQ,CAAC,cAIX3G,KAAM,CACJhU,OAAQ,MACNsZ,KAAMhS,GAAKA,EAAE0M,KAAO,EACpB/a,MAAOqO,GAAKA,EAAEoM,MAAQpM,EAAE0M,KAAOnN,EAC/BjC,IAAK,CAAC0C,EAAGd,KACPc,EAAE+T,OAAS7U,EAAIc,EAAE0M,KACjB1M,EAAE0M,MAAQ1M,EAAE+T,OAAS/T,EAAEoM,OAEzB6G,IAAK,CAACjT,EAAGd,KACPc,EAAE+T,OAAS7U,EAAIc,EAAE0M,KACjB1M,EAAE0M,MAAQ1M,EAAEoM,MAAQpM,EAAE+T,OAAS/T,EAAEoM,MAAQpM,EAAE0M,QAG/C0G,MAAO,CAAC,IAIVzG,QAAS,CACPjU,OAAQ,IAAMqa,GAAO,CACnBphB,MAAOqO,GAAKA,EAAEoM,MAAQpM,EAAE0M,KAAOnN,IAEjC6T,MAAO,CAAC,GACRS,IAAK,CAAC,SAIRjH,SAAU,CACRlU,OAAQ,MACNsZ,KAAOhS,GAAKA,EAAEgU,IAAM,EACpBriB,MAAOqO,GAAKA,EAAEoM,MAAQ,EAAIpM,EAAEgU,KAAOhU,EAAEoM,MAAQ,GAAK7M,EAClDjC,IAAK,CAAC0C,EAAGd,IAAMc,EAAEgU,KAAOhU,EAAE+T,QAAU7U,EAAIc,EAAE0M,MAC1CuG,IAAK,CAACjT,EAAGd,IAAMc,EAAEgU,KAAOhU,EAAE+T,QAAU7U,EAAIc,EAAE0M,QAE5C0G,MAAO,CAAC,GACRS,IAAK,CAAC,SAIRhH,UAAW,CACTnU,OAAQ,IAAMqa,GAAO,CACnBphB,MAAOqO,GAAKA,EAAEoM,MAAQ,EAAIpM,EAAEgU,IAAMhU,EAAEoM,MAAQ7M,IAE9C6T,MAAO,CAAC,GACRS,IAAK,CAAC,aAIR/G,MAAO,CACLpU,OAAQ,IAAMqa,GAAO,CACnBphB,MAAOqO,GAAKA,EAAEoM,MAAQ,EAAIpQ,KAAK8L,KAAK9H,EAAEgU,KAAOhU,EAAEoM,MAAQ,IAAM7M,IAE/D6T,MAAO,CAAC,GACRS,IAAK,CAAC,aAIR9G,OAAQ,CACNrU,OAAQ,IAAMqa,GAAO,CACnBphB,MAAOqO,GAAKA,EAAEoM,MAAQ,EAAIpQ,KAAK8L,KAAK9H,EAAEgU,IAAMhU,EAAEoM,OAAS7M,IAEzD6T,MAAO,CAAC,GACRS,IAAK,CAAC,aAIR5X,IAAK,CACHvD,OAAQ,MACNsZ,KAAOhS,GAAKA,EAAE/D,IAAMsD,EACpB5N,MAAOqO,GAAKA,EAAE/D,IAAO4K,OAAO7F,MAAMhB,EAAE/D,KAAO+D,EAAE2P,KAAK1T,MAAQ+D,EAAE/D,IAC5DqB,IAAK,CAAC0C,EAAGd,MAAYA,EAAIc,EAAE/D,KAAO+D,EAAE/D,MAAQsD,KAAMS,EAAE/D,IAAMiD,IAC1D+T,IAAK,CAACjT,EAAGd,KAAYA,GAAKc,EAAE/D,MAAK+D,EAAE/D,IAAMgY,QAE3Cb,MAAO,CAAC,GACRC,OAAQ,CAAC,cAIXhX,IAAK,CACH3D,OAAQ,MACNsZ,KAAOhS,GAAKA,EAAE3D,IAAMkD,EACpB5N,MAAOqO,GAAKA,EAAE3D,IAAOwK,OAAO7F,MAAMhB,EAAE3D,KAAO2D,EAAE2P,KAAKtT,MAAQ2D,EAAE3D,IAC5DiB,IAAK,CAAC0C,EAAGd,MAAYA,EAAIc,EAAE3D,KAAO2D,EAAE3D,MAAQkD,KAAMS,EAAE3D,IAAM6C,IAC1D+T,IAAK,CAACjT,EAAGd,KAAYA,GAAKc,EAAE3D,MAAK2D,EAAE3D,IAAM4X,QAE3Cb,MAAO,CAAC,GACRC,OAAQ,CAAC,cAIXrG,SAAU,CACRtU,OAASuU,GAAM8F,GAAO,CACpBphB,MAAOqO,GAAKA,EAAE2P,KAAK3C,SAASC,KAE9BmG,MAAO,CAAC,EAAG,GACXS,IAAK,CAAC,cAIR3G,OAAQ,CACNxU,OAAQ,IAAMqa,GAAO,CACnBphB,MAAOqO,GAAKA,EAAE2P,KAAK3C,SAAS,MAE9BoG,MAAO,CAAC,GACRS,IAAK,CAAC,cAIR1G,WAAY,CACVzU,OAAQ,MACNsZ,KAAOhS,IACLA,EAAEkU,IAAMlU,EAAEmU,OAASnU,EAAEoU,OAASpU,EAAEqU,MAAQrU,EAAEsU,MAAQ,GAEpD3iB,MAAOqO,GAAKA,EAAEoM,MAAQ,EAAIpM,EAAEkU,KAAOlU,EAAEoM,MAAQ,GAAK7M,EAClDjC,IAAK,CAAC0C,EAAGuU,EAAGC,KACV,MAAMC,EAAKF,EAAIvU,EAAEmU,OACXO,EAAKF,EAAIxU,EAAEoU,OACjBpU,EAAEmU,QAAUM,EAAKzU,EAAEoM,MACnBpM,EAAEoU,QAAUM,EAAK1U,EAAEoM,MACnB,MAAMuI,EAAMH,EAAIxU,EAAEoU,OAClBpU,EAAEqU,OAASI,GAAMF,EAAIvU,EAAEmU,QACvBnU,EAAEsU,OAASI,EAAKC,EAChB3U,EAAEkU,KAAOO,EAAKE,GAEhB1B,IAAK,CAACjT,EAAGuU,EAAGC,KACV,MAAMC,EAAKF,EAAIvU,EAAEmU,OACXO,EAAKF,EAAIxU,EAAEoU,OACjBpU,EAAEmU,QAAUnU,EAAEoM,MAAQqI,EAAKzU,EAAEoM,MAAQpM,EAAEmU,OACvCnU,EAAEoU,QAAUpU,EAAEoM,MAAQsI,EAAK1U,EAAEoM,MAAQpM,EAAEoU,OACvC,MAAMO,EAAMH,EAAIxU,EAAEoU,OAClBpU,EAAEqU,OAASI,GAAMF,EAAIvU,EAAEmU,QACvBnU,EAAEsU,OAASI,EAAKC,EAChB3U,EAAEkU,KAAOO,EAAKE,KAGlBvB,MAAO,CAAC,IAIV9F,YAAa,CACX5U,OAAQ,IAAMqa,GAAO,CACnBphB,MAAOqO,GAAKA,EAAEoM,MAAQ,EAAIpM,EAAEkU,IAAMlU,EAAEoM,MAAQ7M,IAE9C6T,MAAO,CAAC,GACRS,IAAK,CAAC,eAIRtG,KAAM,CACJ7U,OAAQ,IAAMqa,GAAO,CACnBphB,MAAOqO,GAAKA,EAAEoM,MAAQ,EAClBpM,EAAEkU,KAAOlY,KAAK8L,KAAK9H,EAAEqU,OAASrY,KAAK8L,KAAK9H,EAAEsU,QAC1C/U,IAEN6T,MAAO,CAAC,GACRS,IAAK,CAAC,eAIRrG,KAAM,CACJ9U,OAAQ,CAAC+U,EAASC,EAAMC,EAASrH,IAASyM,GAAO,CAC/CphB,MAAOqO,GGnYE,SAAS/D,EAAKI,EAAKoR,EAAU,GAAIC,GAAO,EAAMC,EAAU,EAAGrH,GACxE,MACMsO,EAAO5Y,KAAK6Y,KAElB,GAAY,MAARvO,EAAc,CAChB,MAAMwO,EAAQ9Y,KAAKuK,KAAKvK,KAAKpB,IAAI6S,GAAWmH,GACtCG,EAAQ1Y,EAAMJ,GAAQD,KAAKgL,IAAI/K,IAAQ,EACvC+Y,EAAM,CAAC,EAAG,GAQhB,IANA1O,EAAOtK,KAAKK,IACVsR,EACA3R,KAAK2L,IAVI,GAUM3L,KAAK4L,MAAM5L,KAAKpB,IAAIma,GAAQH,GAAQE,IAI9C9Y,KAAKuK,KAAKwO,EAAOzO,GAAQmH,GAC9BnH,GAfS,GAmBX,MAAMtM,EAAIgb,EAAI3iB,OACd,IAAK,IAAImF,EAAI,EAAGA,EAAIwC,IAAKxC,EAAG,CAC1B,MAAM0H,EAAIoH,EAAO0O,EAAIxd,GACjB0H,GAAKyO,GAAWoH,EAAO7V,GAAKuO,IAC9BnH,EAAOpH,IAMb,GAAIwO,EAAM,CACR,IAAIxO,EAAIlD,KAAKpB,IAAI0L,GACjB,MAAM2O,EAAY/V,GAAK,EAAI,EAAoB,MAAZA,EAAI0V,GACjCM,EAAMlZ,KAAK2L,IAhCN,IAgCiBsN,EAAY,GACxC/V,EAAIlD,KAAKgH,MAAM/G,EAAMqK,EAAO4O,GAAO5O,EACnCrK,EAAMA,EAAMiD,EAAIA,EAAIoH,EAAOpH,EAC3B7C,EAAML,KAAKuK,KAAKlK,EAAMiK,GAAQA,EAGhC,MAAO,CACLrK,EACAI,IAAQJ,EAAMA,EAAMqK,EAAOjK,EAC3BiK,GHyVckH,CAAKxN,EAAE/D,IAAK+D,EAAE3D,IAAKoR,EAASC,EAAMC,EAASrH,KAEzD8M,MAAO,CAAC,EAAG,GACXS,IAAK,CAAC,MAAO,SI9VjB,MAAMhG,GAAO,CACXnV,SACE,IAAImV,EACJ,MAAO,CACLmE,KAAM,IAAMnE,EAAO,EACnBlc,MAAOwjB,IACL,MAAM3d,EAAI2d,EAAEtjB,MACZ,OAAQ2F,IAAM2d,EAAEC,KAAK5d,GAAOqW,EAAOrW,EAAI,EAAKqW,KAIlDuF,MAAO,IAGHnF,GAAY,CAChBvV,SACE,IAAI2c,EACJ,MAAO,CACLrD,KAAM,IAAMqD,EAAO,EACnB1jB,MAAOwjB,IACL,MAAMtjB,MAAEA,EAAKujB,KAAEA,EAAIhhB,KAAEA,GAAS+gB,EAC9B,IAAI3d,EAAI3F,EACR,GAAIwjB,EAAO7d,EAAG,CACZ,KAAOA,EAAI,EAAIpD,GAAQghB,EAAK5d,EAAI,MAAMA,EACtC6d,EAAO7d,EAET,OAAQ,EAAI6d,GAAQjhB,KAI1Bgf,MAAO,WAMM,CAEbxF,WAAY,CACVlV,OAAM,KACG,CACLsZ,KAAMgB,GACNrhB,MAAOwjB,GAAKA,EAAEtjB,MAAQ,IAG1BuhB,MAAO,IAITvF,KAAAA,GAGAC,SAAU,CACRpV,SACE,IAAI4c,EAAGzH,EACP,MAAO,CACLmE,KAAM,KAAOsD,GAAK,EAAGzH,EAAO,GAC5Blc,MAAOwjB,IACL,MAAM3d,EAAI2d,EAAEtjB,MACZ,GAAI2F,GAAK8d,EAAG,CACV,IAAKzH,EAAOyH,EAAI9d,EAAI,EAAG2d,EAAEC,KAAKE,GAAIzH,KAAUyH,GAC5CzH,GAASyH,EAAI9d,EAEf,OAAOqW,KAIbuF,MAAO,IAITrF,WAAY,CACVrV,SACE,IAAI6c,EACJ,MAAO,CACLvD,KAAM,IAAMuD,EAAQ,EACpB5jB,MAAOwjB,IACL,MAAM3d,EAAI2d,EAAEtjB,MACZ,OAAQ2F,IAAM2d,EAAEC,KAAK5d,KAAQ+d,EAAQA,KAI3CnC,MAAO,IAITpF,aAAc,CACZtV,SACE,MAAMsZ,KAAEA,EAAIrgB,MAAEA,GAAUkc,GAAKnV,SAC7B,MAAO,CACLsZ,KAAAA,EACArgB,MAAOwjB,IAAMxjB,EAAMwjB,GAAK,IAAMA,EAAE/gB,KAAO,KAG3Cgf,MAAO,IAITnF,UAAAA,GAGAC,MAAO,CACLxV,OAAO8R,IACLA,GAAOA,GACK,GAAI7R,EAAM,wCACtB,MAAMqZ,KAAEA,EAAIrgB,MAAEA,GAAUsc,GAAUvV,SAClC,MAAO,CACLsZ,KAAAA,EACArgB,MAAOwjB,GAAKnZ,KAAKuK,KAAKiE,EAAM7Y,EAAMwjB,MAGtC/B,MAAO,CAAC,EAAG,IAIbjF,IAAK,CACHzV,OAAM,CAACqD,EAAQqS,KACbrS,GAAUA,GAAU,EACb,CACLiW,KAAMgB,GACNrhB,MAAO,CAACwjB,EAAG7J,KACT,MAAM9T,EAAI2d,EAAEtjB,MAAQkK,EACpB,OAAOvE,GAAK,EAAI2d,EAAExjB,MAAM6F,EAAG8T,GAAK8C,KAItCgF,MAAO,CAAC,EAAG,IAIb/E,KAAM,CACJ3V,OAAM,CAACqD,EAAQqS,KACbrS,GAAUA,GAAU,EACb,CACLiW,KAAMgB,GACNrhB,MAAO,CAACwjB,EAAG7J,KACT,MAAM9T,EAAI2d,EAAEtjB,MAAQkK,EACpB,OAAOvE,EAAI2d,EAAE/gB,KAAO+gB,EAAExjB,MAAM6F,EAAG8T,GAAK8C,KAI1CgF,MAAO,CAAC,EAAG,IAIb9E,YAAa,CACX5V,OAAM,KACG,CACLsZ,KAAMgB,GACNrhB,MAAO,CAACwjB,EAAG7J,IAAM6J,EAAExjB,MAAMwjB,EAAEK,GAAIlK,KAGnC8H,MAAO,CAAC,IAIV7E,WAAY,CACV7V,OAAM,KACG,CACLsZ,KAAMgB,GACNrhB,MAAO,CAACwjB,EAAG7J,IAAM6J,EAAExjB,MAAMwjB,EAAEM,GAAK,EAAGnK,KAGvC8H,MAAO,CAAC,IAIV5E,UAAW,CACT9V,OAAO0D,KACLA,GAAOA,GACK,GAAIzD,EAAM,4CACf,CACLqZ,KAAMgB,GACNrhB,MAAO,CAACwjB,EAAG7J,KACT,MAAM9T,EAAI2d,EAAEK,IAAMpZ,EAAM,GACxB,OAAO5E,EAAI2d,EAAEM,GAAKN,EAAExjB,MAAM6F,EAAG8T,GAAK/L,KAIxC6T,MAAO,CAAC,EAAG,IAIb3E,UAAW,CACT/V,OAAO0V,GACL,IAAIzc,EACJ,MAAO,CACLqgB,KAAM,IAAMrgB,EAAQyc,EACpBzc,MAAO,CAACwjB,EAAG7J,KACT,MAAMpM,EAAIiW,EAAExjB,MAAMwjB,EAAEtjB,MAAOyZ,GAC3B,OAAOnM,EAAQD,GAAMvN,EAAQuN,EAAKvN,KAIxCyhB,MAAO,CAAC,EAAG,IAIb1E,QAAS,CACPhW,OAAO0V,GACL,IAAIzc,EAAO8L,EACX,MAAO,CACLuU,KAAM,KAAOrgB,EAAQyc,EAAc3Q,GAAO,GAC1C9L,MAAO,CAACwjB,EAAG7J,IAAM6J,EAAEtjB,OAAS4L,EAAM9L,GAC7B8L,EAQb,SAAc0X,EAAG7J,EAAG9T,GAClB,IAAK,MAAMwC,EAAImb,EAAE/gB,KAAMoD,EAAIwC,IAAKxC,EAC9B,GAAI2H,EAAQgW,EAAExjB,MAAM6F,EAAG8T,IAAK,OAAO9T,EAErC,OAAQ,EAZSke,CAAKP,EAAG7J,EAAG6J,EAAEtjB,SAAW,EAAKF,EAAQwjB,EAAExjB,MAAM8L,EAAK6N,IACxD7N,EAAM0X,EAAE/gB,KAAMzC,EAAQyc,KAG/BgF,MAAO,CAAC,EAAG,KCxOR,SAASuC,GAAajc,GAC3B,OAAO4E,EAAIsX,GAAoBlc,GAQ1B,SAASmc,GAAUnc,GACxB,OAAO4E,EAAIwX,GAAiBpc,GAQtB,SAASqc,GAAYrc,GAC3B,OAAO4E,EAAI4N,EAAWxS,IAAkB,eAATA,EAS1B,SAASsc,GAAatc,GAC3B,OAAOic,GAAajc,IAASkc,GAAmBlc,GAS3C,SAASuc,GAAUvc,GACxB,OAAOmc,GAAUnc,IAASoc,GAAgBpc,GCrD5C,SAASwc,GAAQC,EAAMra,EAAI9J,GAEzB,OADAmkB,EAAO,wBAAwBA,KACvBhG,SAAS,KAAM,IAAKgG,EAArB,CAA4Bra,EAAI9J,UAG1B,CACbokB,OAAQ,CAACD,EAAM1K,EAAMzZ,IAAWkkB,GAAQC,EAAM1K,EAAMzZ,GACpDwZ,KAAQ,CAAC2K,EAAMnkB,IAAWkkB,GAAQ,kBAAkBC,IAAQra,EAAI9J,GAChEqkB,MAAQ,CAACF,EAAMnkB,IAAWkkB,GAAQ,0BAA0BC,IAAQra,EAAI9J,GACxE4D,KAAQ,CAACugB,EAAMnkB,IAAWkkB,GAAQ,4BAA4BC,IAAQra,EAAI9J,GAC1EohB,MAAQ,CAAC+C,EAAMnkB,IAAWkkB,GAAQC,EAAMra,EAAI9J,ICT9C,MAAMskB,GAAU,CACd,KAAM,EACN,KAAM,EACN,MAAO,EACP,MAAO,GAYM,YAASvG,EAAKrW,EAAM7H,EAAQ,EAAGgd,EAAKjD,GAMjD,GALAmE,EAAIjT,KAAOL,GACXsT,EAAIrW,KAAOA,EACXqW,EAAIlV,MAAQhJ,EAGR+Z,GAAMiD,GAAOtX,EAAWsX,EAAI0H,QAAS,CAEvC,MAAMC,EAAMF,GAAQ1K,EAAG8D,UACnB9D,EAAG5V,OAAS+Z,EAAMnE,EAAG3V,MAAQ2V,EAAG5V,KAChC4V,EAAGiE,QAA6B,UAAnBjE,EAAGiE,OAAOnW,KACvBkS,EAAGxZ,UAAUwZ,EAAGxZ,UAAU,KAAO2d,EAAM,EAAI,GAC3C,KAGAyG,GAAOA,EAAI1Z,OAASmS,IAQ5B,SAA2BrD,EAAImE,EAAKyG,EAAKzY,GACnCA,EAAM,GAER6N,EAAG9O,KAAOmS,GACVrD,EAAGja,OAAQ,EACXia,EAAGsE,IAAM,UAGTH,EAAIjT,KAAOuS,GAGXmH,EAAI7kB,MAAQoM,EACZyY,EAAItG,IAAMnS,EAAM,IAnBd0Y,CAAkB7K,EAAImE,EAAKyG,EAAK3H,EAAI0H,OAAOC,EAAI7kB,QAInD,OAAOoe,ECpCM,YAASpe,GACtB,OAAOD,EAAQC,GAASA,EACpBoU,EAAMpU,GAASA,EAAMsL,UACrBtL,EAAQuG,OAAO+E,QAAQtL,GACvB,GCCC,MAAM+kB,GAAa,aAEnB,SAASC,GAAoBpH,EAAMqH,GACxCrH,EAAKzS,KbLyB,mBaO9B,MAAMmQ,EAAIsC,EAAK+B,WAAa,GAC5B,IAAK,MAAM3R,KAAQ1C,GAAQ2Z,GAAQ,CACjC,MAAOld,EAAMqE,GAAOrM,EAAQiO,GAAQA,EAAO,CAACA,EAAMA,GAClDsN,EAAErR,KAAK,CACLkB,KAAMsS,GACNrR,IAAK,CAAEjB,KAAMmS,GAASiB,IAAK9E,GAASrN,IACpCpM,MAAOklB,GAAQ,CAAE/G,UAAU,GAAQpW,KAIvC,OAAO6V,EAGF,SAASuH,GAAcF,GAC5B,OAAOG,GAAQJ,GAAoB,GAAIC,IAGlC,SAASI,GAAiBJ,GAC/B,OAAOV,GAAQ1K,KAAKsL,GAAcF,WC5BrB,CAEbK,KAAM,EAENC,KAAM,EAENC,IAAK,EAELC,MAAO,EAEPC,OAAQ,EAERC,KAAM,EAENC,KAAM,EAENC,QAAS,EAET7a,KAAM,EAEN8a,KAAM,EAENC,UAAW,GAEXC,SAAU,GAEVC,KAAM,GAENC,OAAQ,GAERC,MAAO,GAEPC,gBAAiB,GAEjBC,cAAe,GAEfjb,IAAK,GAGLsS,YAAa,EACb4I,MAAO,EACPC,OAAQ,EACRC,OAAQ,EACRC,OAAQ,EACRC,OAAQ,EACRC,QAAS,EACTC,QAAS,EACTC,QAAS,EACTC,SAAU,GACVC,SAAU,GACVC,SAAU,GACVC,SAAU,GACVC,iBAAkB,GAClBC,iBAAkB,GAClBC,sBAAuB,GACvBC,sBAAuB,GACvBC,qBAAsB,GACtBC,YAAa,GACbC,iBAAkB,GAClBC,iBAAkB,GAClBC,gBAAiB,GACjBC,YAAa,GACbC,aAAc,GACdC,iBAAkB,GAClBC,mBAAoB,ICjEf,SAASC,GAAYrnB,EAAQsnB,EAAM,GACxC,OAAWtnB,EAASsnB,EAAO,IAAM,IAAQ,IAAMA,EAG1C,SAAS9f,GAAM+f,EAAMvnB,EAAQsnB,EAAMC,EAAKC,mBAC7C,OAAO,IAAID,EAAKF,GAAYrnB,EAAQsnB,IAG/B,SAASG,GAAU/Y,GACxB,OAAOA,aAAagZ,OAChBhZ,EACAgZ,OAAKxb,IAAIwC,EAAEjE,KAAM,EAAGiE,EAAE1O,OAAQ0O,EAAE+R,MAAO/R,EAAEiZ,QAAS,KAAMjZ,EAAEkZ,MAOzD,MAAMC,GAAU,IAAIC,YAYpB,MAAMC,GAAYF,GAAQG,WAJ1B,SAAoBxiB,EAAM4F,EAAKgI,GACpC,OAAOyU,GAAQG,WAAW5U,EAAK5N,EAAKyiB,SAAS7c,IAAM8c,SAP9C,SAAgB1iB,EAAM4F,EAAKgI,GAChC,MAAM+U,EAAQN,GAAQO,OAAOhV,GAE7B,OADA5N,EAAK4b,IAAI+G,EAAO/c,GACT+c,EAAMnoB,QCvBA,YAASyK,EAAMzK,GAC5B,MAAMwF,EAAOgC,GAAMiD,EAAK4d,UAAWroB,GACnC,MAAO,CACLohB,IAAI9hB,EAAOE,GAASgG,EAAKhG,GAASF,GAClCkG,KAAM,MAASiF,KAAAA,EAAMzK,OAAAA,EAAQ2nB,QAAS,CAAC,KAAMniB,MCJlC,YAASiF,EAAMzK,GAC5B,MAAMwF,EAAOgC,GAAMiD,EAAK4d,UAAWroB,EAAS,GAC5C,MAAO,CACLohB,IAAI9hB,EAAOE,GACLF,IAAOkG,EAAKhG,GAAS,IAAO,GAAMA,EAAQ,IAEhDgG,KAAM,MAASiF,KAAAA,EAAMzK,OAAAA,EAAQ2nB,QAAS,CAAC,KAAMniB,MCNlC,YAASiF,EAAMzK,GAC5B,MAAMwF,EAAOgC,GAAMiD,EAAK4d,UAAWroB,GACnC,MAAO,CACLohB,IAAI9hB,EAAOE,GAASgG,EAAKhG,GAAUF,EAAQ,MAAY,GACvDkG,KAAM,MAASiF,KAAAA,EAAMzK,OAAAA,EAAQ2nB,QAAS,CAAC,KAAMniB,MCJlC,YAASiF,EAAMzK,GAC5B,MAAMwF,EAAOgC,GAAMiD,EAAK4d,UAAWroB,GAAU,GAC7C,MAAO,CACLohB,IAAI9hB,EAAOE,GACT,MAAM2F,EAAI3F,GAAS,EACnBgG,EAAOL,GAAM7F,EAAQ,WAAc,EACnCkG,EAAKL,EAAE,GAAM7F,EAAQ,WAAc,GAErCkG,KAAM,MAASiF,KAAAA,EAAMzK,OAAAA,EAAQ2nB,QAAS,CAAC,KAAMniB,MCPlC,YAASiF,EAAMzK,GAC5B,MAAMF,EAAS,GACT0F,EAAOgC,GAAMiD,EAAKvK,QAAQmoB,UAAWroB,GACrCiB,EAAO4E,OAAOQ,OAAO,MAE3B,IAAIwC,GAAQ,EACRyf,EAAS,EAEb,MAAO,CACLlH,IAAI9hB,EAAOE,GACT,MAAMqN,EAAIwK,OAAO/X,GACjB,IAAI0T,EAAI/R,EAAK4L,QACHV,IAAN6G,IACFsV,GAAUzb,EAAE7M,OACZiB,EAAK4L,GAAKmG,IAAMnK,EAChB/I,EAAOyJ,KAAKsD,IAEdrH,EAAKhG,GAASwT,GAEhBxN,KAAM,MACJiF,KAAAA,EACAzK,OAAAA,EACA2nB,QAAS,CAAC,KAAMniB,GAChBoiB,KAAMW,GAAW9d,EAAK8d,WAAYzoB,EAAQwoB,MAKhD,SAASC,GAAW9d,EAAM3K,EAAQwoB,GAChC,MAAMrf,EC9BO,SAASwB,EAAMzK,EAAQsoB,GACpC,MAAM5e,EAASlC,GAAMghB,WAAYxoB,EAAS,GACpCyoB,EAAMjhB,GAAMkhB,WAAY,EAAIJ,GAElC,IAAIld,EAAM,EAEV,MAAO,CACLgW,IAAI9hB,EAAOE,GACT4L,GAAO2c,GAAUU,EAAKrd,EAAK9L,GAC3BoK,EAAOlK,EAAQ,GAAK4L,GAEtB5F,KAAM,KAEJ,MAAMmjB,EAAOtB,GAAYjc,GACnB5F,EAAOijB,EAAIzoB,OAAS2oB,EAAOF,EAAIR,SAAS,EAAGU,GAAQF,EACzD,MAAO,CAAEhe,KAAAA,EAAMzK,OAAAA,EAAQ2nB,QAAS,CAACje,EAAQlE,MDenCojB,CAAYne,EAAM3K,EAAOE,OAAQsoB,GAE3C,OADAxoB,EAAOuL,QAAQpC,EAAEmY,KLjBZ,SAAqB5b,GAC1B,OAAOqjB,SAAO3c,IAAIub,GAAUjiB,IKiBrBsjB,CAAY7f,EAAEzD,QEzBR,YAASiF,EAAMlF,EAAOwjB,GAAW,GAC9C,IAAIpL,EAEJ,OAAQlT,EAAKue,QACX,KAAKzB,GAAKzC,IACRnH,EAASlT,EAAKwe,SAAW,GAAKC,GAAe,KAC7C,MACF,KAAK3B,GAAKxC,MACRpH,EAASlT,EAAKmY,UAAY,EAAIsG,GAAe,KAC7C,MACF,KAAK3B,GAAKvK,WAGRW,EACElT,EAAK8d,WAAWS,SAAWzB,GAAKtC,MAChCxa,EAAKvK,QAAQ8oB,SAAWzB,GAAKzC,KAC7Bra,EAAKvK,QAAQ+oB,SAAW,GACtBE,GAAoB,KACxB,MACF,KAAK5B,GAAKrC,KACRvH,EAASyL,GACT,MACF,KAAK7B,GAAKjd,KACRqT,EAASlT,EAAK4e,KAAOC,GAAoBC,GAI7C,OAAiB,MAAV5L,EClCM,SAASlT,GACtB,MAAMxB,EAAIugB,UAAQtd,IAAI,CACpBzB,KAAAA,EACAgf,WAAY,CAAC,UAAMtd,GACnBud,cAAe3oB,EAAAA,IAEjB,MAAO,CACLqgB,IAAI9hB,EAAOE,GAASyJ,EAAEmY,IAAI5hB,EAAOF,IACjCkG,KAAM,IAAMyD,EAAE0gB,SAASC,SD0BDC,CAAepf,GACnCse,EEnCS,SAASe,EAAS9pB,GAC/B,MAAM+Z,EAAQvS,GAAMkhB,WAAY1oB,EAAS,GACzC,IAAIygB,EAAQ,EAEZ,MAAO,CACLW,IAAI9hB,EAAOE,GACI,MAATF,IACAmhB,GAEFqJ,EAAQ1I,IAAI9hB,EAAOE,GACnBua,EAAMva,GAAS,IAAO,GAAMA,EAAQ,IAGxCgG,KAAM,KACJ,MAAMkJ,EAAIob,EAAQtkB,OAKlB,OAJIib,IACF/R,EAAE+R,MAAQA,EACV/R,EAAEiZ,QAAQ,GAAK5N,GAEVrL,IFgBIqb,CAAapM,EAAOlT,EAAMlF,GAAQA,GAC7CoY,EAAOlT,EAAMlF,GGtBZ,SAASykB,GAAazkB,EAAOiE,EAAMygB,EAAQxf,EAAMse,GAAW,GACjE,MAAM9f,EAAI6gB,GAAQrf,EAAMlF,EAAOwjB,GAE/B,OADAvf,EAAKygB,EAAQhhB,EAAEmY,KACRqG,GAAUxe,EAAEzD,QCYN,YAASiF,GACtB,GAAIA,aAAgByf,YAAoB,MAARzf,EAC9B,OAAOA,EAGT,OAAQA,GACN,KAAK8c,GAAKvC,OACR,OAAO,IAAIA,SACb,KAAKuC,GAAKrC,KACR,OAAO,IAAIA,OACb,KAAKqC,GAAKhB,QACR,OAAO,IAAIA,UACb,KAAKgB,GAAKf,gBACV,KAAKe,GAAKjd,KACR,OAAO,IAAIkc,kBACb,KAAKe,GAAKvK,WACR,OAAO,IAAIA,aAAW,IAAIiI,OAAQ,IAAIa,SACxC,KAAKyB,GAAKnB,QACR,OAAO,IAAIA,UACb,KAAKmB,GAAKlB,QACR,OAAO,IAAIA,UACb,KAAKkB,GAAKjB,QACV,KAAKiB,GAAKxC,MACR,OAAO,IAAIuB,UACb,KAAKiB,GAAK3B,KACR,OAAO,IAAIA,OACb,KAAK2B,GAAK1B,MACR,OAAO,IAAIA,QACb,KAAK0B,GAAKzB,MACV,KAAKyB,GAAKzC,IACR,OAAO,IAAIgB,QACb,KAAKyB,GAAKxB,MACR,OAAO,IAAIA,QACb,KAAKwB,GAAKJ,gBACR,OAAO,IAAIA,kBACb,KAAKI,GAAKjC,SACV,KAAKiC,GAAKH,kBACR,OAAO,IAAIA,oBACb,KAAKG,GAAK1C,KACR,OAAO,IAAIA,OACb,KAAK0C,GAAKR,gBACR,OAAO,IAAIA,kBACb,KAAKQ,GAAKT,gBACV,KAAKS,GAAKnC,KACR,OAAO,IAAI0B,kBACb,KAAKS,GAAKP,eACR,OAAO,IAAIA,iBACb,KAAKO,GAAKV,WACR,OAAO,IAAIA,aACb,KAAKU,GAAKvB,MACR,OAAO,IAAIA,QACb,KAAKuB,GAAKtB,OACR,OAAO,IAAIA,SACb,KAAKsB,GAAKrB,OACR,OAAO,IAAIA,SACb,KAAKqB,GAAKpB,OACR,OAAO,IAAIA,SACb,KAAKoB,GAAKtC,KACR,OAAO,IAAIA,OACb,QACE3e,EACE,0BAA0ByS,GAAStO,6CCpFpC,SAAS0f,GAAQ3gB,EAAMygB,GAC5B,MAAMrP,EAAIwP,KAEV,OADA5gB,EAAKygB,EAAQrP,EAAE3P,KACR2P,EAGF,SAASwP,KACd,MAAMxP,EAAI,CACRxa,MAAO,EACPqgB,MAAO,EACP4J,MAAO,EACPC,KAAM,EACNC,KAAM,EACNC,QAAS,EACT5gB,IAAK7I,EAAAA,EACLiJ,KAAMjJ,EAAAA,EACN0pB,OAAQ,EACRC,MAAO,EACPC,QAAS,EACTC,QAAS,EACTtC,OAAQ,EACRuC,OAAQ,EACRC,OAAQ/pB,EAAAA,EACRgqB,OAAQ,EACRC,QAAS,EAET/f,IAAI3L,GAEF,KADEsb,EAAExa,MACS,MAATd,EAEF,aADEsb,EAAE6F,MAIN,MAAMhW,SAAcnL,EACpB,GAAa,WAATmL,IACAmQ,EAAEgQ,aACC,GAAa,WAATngB,IACPmQ,EAAE0P,KACAhrB,EAAQsb,EAAEhR,MAAKgR,EAAEhR,IAAMtK,GACvBA,EAAQsb,EAAE5Q,MAAK4Q,EAAE5Q,IAAM1K,GACvBkV,OAAOyW,UAAU3rB,MAAUsb,EAAE2P,UAC5B,GAAa,YAAT9f,IACPmQ,EAAEyP,WACC,GAAa,WAAT5f,EACT,GAAII,EAAOvL,KACPsb,EAAE8P,MCpDe,KADLhc,EDsDKpP,GCrDlBiQ,eACkB,IAAtBb,EAAEc,iBACoB,IAAtBd,EAAEe,iBACyB,IAA3Bf,EAAEgB,wBDmDKkL,EAAE+P,aAED,GAAIpe,EAAYjN,GAAQ,GAC3Bsb,EAAEiQ,OACAvrB,EAAMU,OAAS4a,EAAEkQ,SAAQlQ,EAAEkQ,OAASxrB,EAAMU,QAC1CV,EAAMU,OAAS4a,EAAEmQ,SAAQnQ,EAAEmQ,OAASzrB,EAAMU,QAC9C,MAAMkrB,EAAKtQ,EAAEuQ,aAAevQ,EAAEuQ,WAAaf,MAC3C9qB,EAAM+L,QAAQ6f,EAAGjgB,SACZ,GACH2P,EAAEoQ,QACJ,MAAMI,EAAKxQ,EAAEyQ,cAAgBzQ,EAAEyQ,YAAc,IAC7C,IAAK,MAAM3f,KAAOpM,EAAO,EACZ8rB,EAAG1f,KAAS0f,EAAG1f,GAAO0e,OAC9Bnf,IAAI3L,EAAMoM,SAGC,WAATjB,MACPmQ,EAAE4P,QACAlrB,EAAQsb,EAAEhR,MAAKgR,EAAEhR,IAAMtK,GACvBA,EAAQsb,EAAE5Q,MAAK4Q,EAAE5Q,IAAM1K,IC1EpB,IAASoP,GD6EpBjE,KAAI,IACK6gB,GAOb,SAAe1Q,GACb,MAAMb,EAAQa,EAAExa,MAAQwa,EAAE6F,MAE1B,GAAc,IAAV1G,EACF,OAAOwN,GAAK1C,KAET,GAAIjK,EAAE2P,OAASxQ,EAAO,CACzB,MAAMlN,EAAIlD,KAAKK,IAAIL,KAAKgL,IAAIiG,EAAEhR,KAAO,EAAGgR,EAAE5Q,KAC1C,OAAO4Q,EAAEhR,IAAM,EACXiD,GAAK,GAAK,GAAK0a,GAAKjB,QAClBzZ,MAAe0a,GAAK3B,KAAO/Y,QAAgB0a,GAAK1B,MAAQ0B,GAAKzB,MAC/DjZ,GAAK,GAAK,GAAK0a,GAAKjB,QAClBzZ,MAAe0a,GAAKvB,MAAQnZ,QAAgB0a,GAAKtB,OAASsB,GAAKrB,OAElE,GAAItL,EAAE0P,OAASvQ,EAClB,OAAOwN,GAAKjB,QAET,GAAI1L,EAAE4P,UAAYzQ,EAAO,CAC5B,MAAMlN,GAAK+N,EAAEhR,IAAMgR,EAAE5Q,KAAO4Q,EAAEhR,IAAM,GAAKgR,EAAE5Q,IAC3C,OAAO4Q,EAAEhR,IAAM,EACXiD,EAAI,GAAK,GAAK0a,GAAKxB,MACjBzf,EAAM,2BAA2BuG,KACnC+N,EAAE5Q,IAAM,GAAK,GAAKud,GAAKpB,OACrB7f,EAAM,2BAA2BsU,EAAE5Q,OAEtC,GAAI4Q,EAAEyP,QAAUtQ,EACnB,OAAOwN,GAAKrC,KAET,GAAItK,EAAE+P,UAAY5Q,EACrB,OAAOwN,GAAKhB,QAET,GAAI3L,EAAE8P,QAAU3Q,EACnB,OAAOwN,GAAKf,gBAET,GAAI5L,EAAEiQ,SAAW9Q,EAAO,CAC3B,MAAMtP,EAAO8gB,QAAMrf,IAAI,QAAS0O,EAAEuQ,WAAW1gB,QAAQ,GACrD,OAAOmQ,EAAEkQ,SAAWlQ,EAAEmQ,OAClB,IAAIpF,gBAAc/K,EAAEkQ,OAAQrgB,GAC5B,IAAI8a,OAAK9a,GAEV,GAAImQ,EAAEoQ,UAAYjR,EAAO,CAC5B,MAAMqR,EAAKxQ,EAAEyQ,YACb,OAAO,IAAI7F,SACT3f,OAAO5E,KAAKmqB,GAAIjgB,KAAI9D,GAAQkkB,QAAMrf,IAAI7E,EAAM+jB,EAAG/jB,GAAMoD,QAAQ,MAG5D,GAAImQ,EAAEgQ,QAAU,EACnB,OAAOrD,GAAKvK,WAGZ1W,EAAM,0BAzDeklB,CAAM5Q,KAI7B,OAAOA,EE9EM,YAASpV,EAAM6B,EAAM9B,EAAOiE,EAAMiB,EAAMse,GAAW,GAIhE,KAHAte,EAAO6gB,GAAY7gB,IAGR,CACT,MAAMmQ,EAAIuP,GAAQ3gB,EAAMnC,GACxB0hB,EAAWnO,EAAE6F,MAAQ,EACrBhW,EAAOmQ,EAAEnQ,OAGX,OAAOuf,GAAazkB,EAAOiE,EAAMnC,EAAMoD,EAAMse,GCJhC,YAASvgB,EAAOnB,EAAM9B,EAAOiE,EAAMiB,EAAMse,GAAW,GACjEte,EAAO6gB,GAAY7gB,GACnB,MAAMwf,EAASzhB,EAAMyhB,OAAO5iB,GACtBokB,IAAYjjB,EAAM5B,cAAgB4B,EAAMzB,aAGxC2kB,GA2BapsB,EA3BK2qB,aA4BApB,SAASvpB,EAC7BA,EAAMqsB,kBAAkB9C,SAASvpB,EAAMqsB,OACvC,KAHN,IAAqBrsB,EA1BnB,GAAIosB,GAAOD,GAAWG,GAAeF,EAAIjhB,KAAMA,GAC7C,OAAOihB,EAIT,MAAMlmB,EAAOykB,EAAOzkB,KACpB,GAAIgH,EAAahH,GAAO,CACtB,MAAMqmB,EAyBV,SAAuBrmB,GACrB,MAYM+hB,EAZQ,CACZuE,aAAiBzF,UACjB0F,aAAiBzF,UACjBha,UAAiBsZ,OACjBoG,WAAiBnG,QACjB2C,WAAiB1C,QACjB4C,WAAiB1C,QACjBiG,YAAiBhG,SACjBvd,YAAiBwd,SACjBgG,cAAiBnG,QACjBoG,eAAiBhG,UAEA3gB,EAAK9F,YAAY2H,MACpC,OAAOkgB,EAAO,IAAIA,EAAS,KAvCX6E,CAAc5mB,GAC5B,GAAIimB,GAAWI,GAASD,GAAeC,EAAOphB,GAC5C,OLvBC,SAAuBjD,EAAOiD,GACnC,MAAMzK,EAASwH,EAAMxH,OACf+B,EAAOslB,GAAYrnB,EAAQwH,EAAMggB,mBAEvC,IAAIhiB,EAAOgC,EAMX,OALIxH,IAAW+B,IACbyD,EAAO,IAAIgC,EAAM9H,YAAYqC,GAC7ByD,EAAK4b,IAAI5Z,IAGJigB,GAAU,CAAEhd,KAAAA,EAAMzK,OAAAA,EAAQ2nB,QAAS,CAAC,KAAMniB,KKatC6mB,CAAc7mB,EAAMqmB,GAE3BphB,EAAOA,GAAQohB,EACf9C,GAAW,EAKf,IAAKte,EAAM,CACT,MAAMmQ,EAAIuP,GAAQ3gB,EAAMygB,GACxBlB,EAAWnO,EAAE6F,MAAQ,EACrBhW,EAAOmQ,EAAEnQ,OAGX,OAAOuf,GAAazkB,EAAOiE,EAAMygB,EAAQxf,EAAMse,GA0BjD,SAAS6C,GAAe5iB,EAAGC,GACzB,OAAQD,IAAMC,GAAWD,EAAEsjB,UAAUrjB,GCjEhC,SAASsjB,GAAU/mB,EAAM0C,EAAOwB,GACrC,MAAM/B,EAAIgC,KAAKC,IAAIpE,EAAKxF,OAAQ0J,EAASxB,GACzC,MAAO,CAACb,EAAM4V,KACZ,IAAK,IAAI9X,EAAIuE,EAAQvE,EAAIwC,IAAKxC,EAC5B8X,EAAMzX,EAAKL,GAAGkC,GAAOlC,IAKpB,SAASqnB,GAAUhkB,EAAON,EAAOwB,GACtC,MAAM+iB,EAAqB,IAAX/iB,GAAgBlB,EAAM9B,WAAawB,IAClCM,EAAM5B,eAAiB4B,EAAMzB,YAE9C,MAAO,CAACkjB,EAAQhN,KACd,IAAI9X,GAAK,EACTsnB,GAAWlgB,EAAY0d,EAAOzkB,MAC1BykB,EAAOzkB,KAAK6F,QAAQ4R,GACpBzU,EAAMgB,MACJ5B,GAAOqV,EAAMgN,EAAOxiB,IAAIG,KAAQzC,KAChC,EAAM+C,EAAOwB,IClBhB,SAASlB,KAGd,IACE,OAAOnD,QACP,MAAOqnB,GACPpmB,EACE,2ECyBS,YAASd,EAAMnF,EAAU,IACtC,MAAMssB,MAAEA,EAAQ,IAAOtsB,GACjBusB,SAAEA,EAAQtnB,MAAEA,EAAKC,MAAEA,EAAKiE,KAAEA,GAYlC,SAAchE,EAAMnF,GAClB,MAAMkB,QAAEA,EAAO2G,MAAEA,EAAQnH,EAAAA,EAAQ2I,OAAEA,EAAS,GAAMrJ,EAC5CiF,EAAQJ,EAAW3D,GAAWA,EAAQiE,GACxCnG,EAAQkC,GAAWA,EACnB,KACJ,GAAIlC,EAAQmG,GACV,MAAO,CACLonB,SAAUC,GACVvnB,MAAOA,GAASO,OAAO5E,KAAKuE,EAAK,IACjCD,MAAOoE,KAAKC,IAAI1B,EAAO1C,EAAKxF,OAAS0J,GACrCF,KAAM+iB,GAAU/mB,EAAM0C,EAAOwB,IAE1B,GAYT,SAAiBlE,GACf,OAAOA,GAAQN,EAAWM,EAAKvF,OAbpB6sB,CAAQtnB,GACjB,MAAO,CACLonB,SAAUG,GACVznB,MAAOA,GAASE,EAAK0B,cACrB3B,MAAOoE,KAAKC,IAAI1B,EAAO1C,EAAKkB,UAAYgD,GACxCF,KAAMgjB,GAAUhnB,EAAM0C,EAAOwB,IAG/BpD,EAAM,+BAhCiCqZ,CAAKna,EAAMnF,GACpD,OAAOmI,KAAQ0D,IACb5G,EAAM6F,KAAI9D,IACR,MAAMmV,EAAMoQ,EAASpnB,EAAM6B,EAAM9B,EAAOiE,EAAMmjB,EAAMtlB,IACpD,OAAOmV,EAAIxc,SAAWuF,EAClBiX,EACAlW,EAAM,6BAEZhB,GCfG,SAAS/D,GAAQiH,EAAOlD,GAC7B,OAAOJ,EAAWI,GACdA,EAAMkD,GACNlD,GAASkD,EAAMtB,cAGd,SAAS8lB,GAAQxkB,EAAOlD,EAAOjF,GACpC,MAAM4sB,EAAY5sB,EAAQ6sB,QAAU,GAC9BC,EAAW9sB,EAAQ+sB,OAAS,GAC5BF,EAAS,GACTE,EAAQ,GAQd,OANA9nB,EAAM+F,SAAQhE,IACZ,MAAMgmB,EClCK,SAAS7jB,EAAMnJ,EAAU,IACtC,IAAID,EAAQ,EACRqgB,EAAQ,EACRiK,EAAQ,EACR4C,EAAQ,EACRhD,EAAO,EACPG,EAAS,EA2Bb,OAzBAjhB,GAAKlK,IAEH,KADEc,EACW,MAATd,EAEF,aADEmhB,EAIJ,MAAMhW,SAAcnL,EACpB,GAAa,WAATmL,GAAqBI,EAAOvL,KAC5BorB,EAvBqB,KADLhc,EAyBCpP,GAxBdiQ,eACkB,IAAtBb,EAAEc,iBACoB,IAAtBd,EAAEe,iBACyB,IAA3Bf,EAAEgB,wBAqB0B4d,OACxB,GAAa,WAAT7iB,MACP6f,EACEhrB,GAAUA,IAAmB,EAARA,KAAeA,GAAO,CAC7C,MAAMqO,EAAIrO,EAAQ,GACZsb,EAAIjN,EAAErG,QAAQ,KACpB,GAAIsT,GAAK,EAAG,CACV,MAAMuG,EAAIxT,EAAErG,QAAQ,KACdimB,EAAIpM,EAAI,EAAIA,EAAIxT,EAAE3N,OACxByqB,EAAS9gB,KAAKK,IAAIygB,EAAQ8C,EAAI3S,EAAI,IAlC5C,IAAwBlM,KAwCf,CACL0e,OAAS3M,EAAQ6J,EAAOI,GAAStqB,EAAQ,GAAM,IAAM,IACrD8sB,OAAQ,CACN9e,IAAQsc,IAAU4C,EAClB7C,OAAQ9gB,KAAKC,IAAI6gB,EAAQpqB,EAAQmtB,WAAa,KDHnCC,CAQjB,SAAgBjlB,EAAOrB,GACrB,MAAM8iB,EAASzhB,EAAMyhB,OAAO9iB,GAC5B,OAAOsC,GAAMjB,EAAMgB,MAAK5B,GAAO6B,EAAGwgB,EAAOxiB,IAAIG,MAVlB9H,CAAO0I,EAAOnB,GAAOhH,GAC9C+sB,EAAM/lB,GAAQ8lB,EAAS9lB,IAASgmB,EAAKD,MACrCF,EAAO7lB,GAAQ4lB,EAAU5lB,IAASgmB,EAAKH,UAGlC,CAAEE,MAAAA,EAAOF,OAAAA,GAQX,SAAS1jB,GAAKhB,EAAOlD,EAAO4C,EAAQ,IAAKwB,EAAQgkB,GACtD,MAAMloB,EAAOgD,EAAMhD,OACbmC,EAAIrC,EAAMtF,OAChBwI,EAAMgB,MAAK5B,IACT8lB,EAAI9lB,IAAIA,GACR,IAAK,IAAIzC,EAAI,EAAGA,EAAIwC,IAAKxC,EAAG,CAC1B,MAAMkC,EAAO/B,EAAMH,GACnBuoB,EAAIC,KAAKnoB,EAAKF,EAAMH,IAAIsC,IAAIG,GAAMP,EAAMlC,OAEzC,EAAM+C,EAAOwB,GEjCH,YAASmD,EAAGxM,EAAU,IACnC,GAAI6E,EAAW7E,GACb,OAAOA,EAAQwM,GAAK,GAGtB,MAAMpC,SAAcoC,EAEpB,GAAa,WAATpC,EAAmB,CACrB,GAAII,EAAOgC,GACT,OAAOxM,EAAQ+N,IAAMe,EAActC,GAAK4B,EAAW5B,GAC9C,CACL,MAAMc,EAAI0F,KAAKE,UACb1G,GACA,CAACmG,EAAGnG,IAAML,EAAaK,GAAKzN,MAAM0U,KAAKjH,GAAKA,IAExCke,EAAS1qB,EAAQ0qB,QAAU,GACjC,OAAOpd,EAAE3N,OAAS+qB,EACdpd,EAAE/M,MAAM,EAAG,IAAM,KAAqB,MAAT+M,EAAE,GAAa,IAAM,KAClDA,GAED,GAAa,WAATlD,EAAmB,CAC5B,MAAMggB,EAASpqB,EAAQoqB,QAAU,EACjC,IAAIzhB,EACJ,OAAa,IAAN6D,KAAa7D,EAAIW,KAAKgL,IAAI9H,KAAO,MAAQ7D,EAAIW,KAAK2L,IAAI,IAAKmV,IAC9D5d,EAAE+gB,cAAcnD,GAChB5d,EAAEghB,QAAQpD,GAEd,OAAO5d,EAAI,GC3DA,YAAS1E,EAAKsB,EAAIqkB,EAAS,IACxC,IAAK,MAAMpiB,KAAOvD,EAChB2lB,EAAOpiB,GAAOjC,EAAGtB,EAAIuD,GAAMA,GAE7B,OAAOoiB,EC2DM,YAAStlB,EAAOnI,EAAU,IACvC,MAAMiF,EAAQ/D,GAAQiH,EAAOnI,EAAQkB,UAC/B6rB,MAAEA,EAAKF,OAAEA,GAAWF,GAAQxkB,EAAOlD,EAAOjF,GAC1C0tB,EA4CR,SAAgB1tB,GACd,OAAO2tB,GACL3tB,EAAQ0tB,OACRzuB,GAAS4F,EAAW5F,GAASA,EAAQ,IAAMA,IA/C/B2uB,CAAO5tB,GACf6tB,EAAU7tB,EAAQ8tB,KAMlBC,EAAa,CAAC9uB,EAAOoE,IAAe2qB,GAAY/uB,EAAOoE,GAHvC0U,QAAQ,KAAM,SACjCA,QAAQ,KAAM,QACdA,QAAQ,KAAM,QAEXkW,EAAYJ,EACd,CAAC5uB,EAAOoE,IAAiB,MAATpE,EAAgB4uB,EAAQ5uB,GAAS8uB,EAAW9uB,EAAOoE,GACnE0qB,EAEJ,IAAI9kB,GAAK,EACL8B,GAAO,EAEX,MAAMmjB,EAAM,CAACA,EAAKlnB,EAAMmnB,KACtB,MAAMxlB,EAAIwlB,EAbOxlB,CAAAA,GAAW,MAANA,EAAY,SAAiB,MAANA,EAAY,QAAU,OAa3CylB,CAAWrB,EAAM/lB,IAAS,GAC5CsG,EAAIogB,EAAMQ,IAAQR,EAAMQ,GAAKlnB,EAAM+D,EAAK9B,IAAY,GACpDolB,GAAO1lB,EAAK,eAAeA,MAAQ2E,EAAI,IAAM,IAAO,IAAMA,EAChE,MAAO,IAAI4gB,IAAMG,EAAM,WAAWA,KAAS,OAG7C,IAAIC,EAAOJ,EAAI,SACXA,EAAI,SACJA,EAAI,KAAMjlB,GACVhE,EAAM6F,KAAI9D,GAAQ,GAAGknB,EAAI,KAAMlnB,EAAM,KAAKA,WAAa9D,KAAK,IAC5D,gBACAgrB,EAAI,SAcR,OAZA/kB,GAAKhB,EAAOlD,EAAOjF,EAAQ6H,MAAO7H,EAAQqJ,OAAQ,CAChD9B,IAAIA,GACF0B,EAAI1B,EACJ+mB,MAAWvjB,EAAM,QAAU,IAAMmjB,EAAI,OAEvCZ,KAAKruB,EAAO+H,GACVsnB,GAAQJ,EAAI,KAAMlnB,EAAM,GACpBinB,EAAUhvB,EAAO4tB,EAAO7lB,IACxB,WAIDsnB,EAAO,wBC3GD,YAASrvB,EAAOsvB,GAAY,EAAMC,GAAa,GAC5D,YAAkB1iB,IAAV7M,GAAuBA,EAASsvB,EAAYC,ECwBtD,MAAMC,GAAmBxvB,GAASuL,EAAOvL,GACrC6P,EAAc7P,GAAO,GACrBA,ECzBW,YAAS6L,EAAK4jB,GAC3B,IAAK,MAAOrjB,EAAKpM,KAAUsL,GAAQmkB,GACjC5jB,EAAIiW,IAAI1V,EAAKpM,GAEf,OAAO6L,ECNM,YAASiI,GACtB,OAAOA,EAAIgF,QAAQ,wBAAyB,QCS/B,SAAS4W,GAAQxmB,EAAOymB,EAAK9jB,EAAM,IAAIT,KAepD,OAZIK,EAFJkkB,EAAMhnB,EAASgnB,GAAOzmB,EAAMrB,WAAW8nB,GAAOA,GAG5C9jB,EAAIiW,IAAI6N,EAAKA,GACJ5vB,EAAQ4vB,GACjBA,EAAI5jB,SAAQ/B,GAAK0lB,GAAQxmB,EAAOc,EAAG6B,KAC1BjG,EAAW+pB,GACpBD,GAAQxmB,EAAOymB,EAAIzmB,GAAQ2C,GAClBK,EAASyjB,GAClBC,GAAO/jB,EAAK8jB,GAEZ3oB,EAAM,6BAA6ByS,GAASkW,MAGvC9jB,EAGT,SAASgkB,GAAS7vB,EAAO4Z,GAEvB,OADA5Z,EAAM4Z,SAAWA,EACV5Z,EAGT,SAAS4Z,GAAS5Z,GAChB,OAAOD,EAAQC,GAASA,EAAM6L,IAAI+N,IAC9B5Z,GAASA,EAAM4Z,SAAW5Z,EAAM4Z,WAChC5Z,EAaC,SAAS8vB,KACd,OAAOD,IACL3mB,GAASA,EAAMtB,gBACf,MAASkoB,IAAK,OAWX,SAASC,MAAOC,GAErB,OADAA,EAAYA,EAAUnuB,OACfguB,IACL3mB,IACE,MAAM+mB,EAAOP,GAAQxmB,EAAO8mB,GAC5B,OAAO9mB,EAAMtB,aAAYG,IAASkoB,EAAKtjB,IAAI5E,QAE7C,MAASgoB,IAAKnW,GAASoW,OAUpB,SAASE,GAAM3uB,EAAOC,GAC3B,OAAOquB,IACL3mB,IACE,IAAIrD,EAAI8C,EAASpH,GAASA,EAAQ2H,EAAMpB,YAAYvG,GAChDoiB,EAAIhb,EAASnH,GAAOA,EAAM0H,EAAMpB,YAAYtG,GAChD,GAAImiB,EAAI9d,EAAG,CAAE,MAAM8K,EAAIgT,EAAGA,EAAI9d,EAAGA,EAAI8K,EACrC,OAAOzH,EAAMtB,cAActG,MAAMuE,EAAG8d,EAAI,MAE1C,MAASuM,MAAO,CAAC3uB,EAAOC,OASrB,SAAS2uB,GAAQpX,GAEtB,OADItN,EAASsN,KAAUA,EAAU9N,OAAOmlB,GAAarX,KAC9C8W,IACL3mB,GAASA,EAAMtB,aAAYG,GAAQgR,EAAQnF,KAAK7L,OAChD,MAASooB,QAAS,CAACpX,EAAQ7E,OAAQ6E,EAAQsX,WCjFhC,MAAMC,WAAoBvqB,EAYvCwqB,YAAY/vB,EAAQwF,GAClB,OAAO,IAAIsqB,GAAYE,EAAYhwB,EAAQwF,GAAQA,GAerDuqB,WAAWtuB,EAAS+D,GAClB,GAAI/D,aAAmBquB,GAAa,OAAOruB,EAC3C,MAAMiE,EAAO,GACPvE,EAAO,GACb,IAAK,MAAOyK,EAAKpM,KAAUsL,GAAQrJ,GACjCiE,EAAKkG,GAAOpM,EACZ2B,EAAKsI,KAAKmC,GAEZ,OAAO,IAAIkkB,GAAYpqB,EAAMF,GAASrE,GAYxCvB,YAAY6B,EAAS+D,EAAO7E,EAAQsvB,EAAOrqB,EAAO/F,GAChDquB,GAAUzsB,EAAS8I,EAAsB9I,GAGzCoE,MAFAL,EAAQA,GAASO,OAAO5E,KAAKM,GACf+D,EAAMtF,OAASuB,EAAQ+D,EAAM,IAAItF,OAAS,EACpCuB,EAASd,EAAQsvB,EAAOrqB,EAAO/F,GAWrD0G,QAAOb,KAAEA,EAAIF,MAAEA,EAAK7E,OAAEA,EAAMgF,OAAEA,EAAMC,MAAEA,IACpC,MAAMuT,OAAe9M,IAAX1L,EAAuBA,EAASb,KAAKoH,OAE/C,OAAO,IAAI4oB,GACTpqB,GAAQ5F,KAAKmG,MACbT,IAAWE,EAAqB,KAAd5F,KAAKgG,QACvBqT,OACW9M,IAAX1G,EAAuBA,E9CjFtB,SAAiBA,EAAQhF,GAC9B,IAAKgF,IAAWhF,EAAQ,OAAOgF,EAG/B,MAAMxE,KAAEA,EAAI+uB,KAAEA,EAAIjuB,KAAEA,GAAS0D,EACvB0F,EAAM,IAAIqd,WAAWzmB,GAC3BtB,EAAO+I,MAAK5B,GAAOuD,EAAIlK,EAAK2G,IAAQ,IAGpC,MAAMuS,EAAMhP,EAAIlB,QAAO,CAACkQ,EAAKxO,IAAQwO,EAAMxO,GAAK,GAChD,GAAIwO,IAAQpY,EAAM,OAAO0D,EAGzB,MAAMwqB,EAAQ7wB,MAAM+a,GACpB,IAAI+V,EAAQ,EACZ,IAAK,IAAI/qB,EAAI,EAAGA,EAAIpD,IAAQoD,EACtBgG,EAAIhG,KAAI8qB,EAAM9kB,EAAIhG,GAAK+qB,KAAWF,EAAK7qB,IAI7C,MAAMgrB,EAAQ,IAAIznB,YAAYzH,EAAKjB,QAGnC,OAFAS,EAAO+I,MAAK5B,GAAOuoB,EAAMvoB,GAAOuD,EAAIlK,EAAK2G,MAElC,IAAKnC,EAAQxE,KAAMkvB,EAAOH,KAAMC,EAAOluB,KAAMmuB,G8C0DhBE,CAAQxwB,KAAKuG,OAAQ1F,GAAUwY,QACrD9M,IAAVzG,EAAsBA,EAAQ9F,KAAKwG,OACnCxG,KAAKC,SAaTqvB,UAAU5qB,GACR,MAAMiB,EAAQ3F,KAAK8G,UACb2pB,EAAOzwB,KAAKK,QACZqwB,EAAOC,EAAUF,GAAMrvB,QAAQqvB,EAAK5qB,UAO1C,OANAnB,EAAO+G,SAAQmlB,KACbA,EAAQZ,GAAY1jB,IAAIskB,IACd9pB,YAAcnB,GAAOe,EAAM,mCACrCkqB,EAAQA,EAAMvwB,SACRiH,aAAYG,GAAQipB,EAAKrlB,IAAI5D,EAAMmpB,EAAMvG,OAAO5iB,SAEjDzH,KAAKyG,OAAOiqB,EAAKpkB,OAO1B3K,UACE,OAAO3B,KAAKmG,MAQdkkB,OAAO5iB,GACL,OAAOzH,KAAKmG,MAAMsB,GAQpBopB,SAASjxB,GACP,OAAOI,KAAKmG,MAAMnG,KAAKgG,OAAOpG,IAWhCgI,MAAMH,EAAM3H,EAAcN,OACxB,MAAM6qB,EAASrqB,KAAKqqB,OAAO5iB,GACrBG,EAAQ,IAAI9H,EAAYE,KAAK8G,WACnC,IAAI0E,GAAO,EAEX,OADAxL,KAAK4J,MAAK5B,GAAOJ,IAAQ4D,GAAO6e,EAAOxiB,IAAIG,KAAM,GAC1CJ,EASTC,IAAIJ,EAAMO,EAAM,GACd,MAAMqiB,EAASrqB,KAAKqqB,OAAO5iB,GAC3B,OAAOzH,KAAKgH,cAAgBhH,KAAKmH,YAC7BkjB,EAAOxiB,IAAI7H,KAAKM,UAAU0H,IAC1BqiB,EAAOxiB,IAAIG,GAUjBF,OAAOL,GACL,MAAM4iB,EAASrqB,KAAKqqB,OAAO5iB,GACrBnH,EAAUN,KAAKgH,cAAgBhH,KAAKmH,YAAcnH,KAAKM,UAAY,KACzE,OAAOA,EAAU0H,GAAOqiB,EAAOxiB,IAAIvH,EAAQ0H,IACvCqiB,EAASriB,GAAOqiB,EAAOxiB,IAAIG,GAC3BtB,EAAM,wBAAwBe,KAQpCS,OAAOF,EAAM,GACX,OAAO8oB,GAAc9wB,KAAd8wB,CAAoB9oB,GAQ7BC,QAAQxH,EAAU,IAChB,MAAM+H,QAAEA,EAAOF,MAAEA,EAAKwB,OAAEA,GAAWrJ,EAI7BgG,EAASse,GADDqK,GAAQpvB,KAAMS,EAAQkB,SAAW6tB,OAEzCjnB,EAAM,GAOZ,GANAvI,KAAK4J,MACH,CAAC5B,EAAKpC,IAAS2C,EAAIoB,KAAKlD,EAAOuB,EAAKpC,MACpC,EAAM0C,EAAOwB,GAIXtB,GAAWxI,KAAKkH,YAAa,CAC/B,MAAMsE,EAAM,GAEZ,OADAxL,KAAK4J,MAAK5B,GAAOwD,EAAI7B,KAAK3B,KAAM,EAAMM,EAAOwB,GACtC4S,GAAK1c,KAAMwL,EAAKjD,EAAKC,GAG9B,OAAOD,EAOT,EAAE3B,OAAOuB,YACP,MAAM1B,EAASqqB,GAAc9wB,MACvB+H,EAAI/H,KAAK8G,UACf,IAAK,IAAIvB,EAAI,EAAGA,EAAIwC,IAAKxC,QACjBkB,EAAOlB,GAYjBlF,MAAMC,GACJ,MAAMqF,EAAQrF,EAAUA,EAAQF,OAASJ,KAAK8G,UACxCpB,EAAQ1F,KAAKgG,OACnB,IAAIJ,EAAMC,EAEV,IAAKvF,IAAYN,KAAKmH,YAAa,CACjC,IAAKnH,KAAKgH,aACR,OAAOhH,KACE2F,IAAU3F,KAAKiH,cACxBrB,EAAO5F,KAAK4F,QAIhB,IAAKA,EAAM,CACT,MAAMgE,EAAOtJ,EAAU+Y,GAAK/Y,EAAQmL,QAAQ4N,GAAKA,GAAKrZ,KAAK4J,KAAKyP,GAAG,GAC7D0X,EAAQrrB,EAAMtF,OACpBwF,EAAO,GAEP,IAAK,IAAIL,EAAI,EAAGA,EAAIwrB,IAASxrB,EAAG,CAC9B,MAAMkC,EAAO/B,EAAMH,GACbyrB,EAAOhxB,KAAKqqB,OAAO5iB,GACnBwpB,EAAOrrB,EAAK6B,GAAQ,ICtQzBmF,GADeyd,EDuQyB2G,GCtQpBprB,MAAQykB,EAAOzkB,KAAK9F,YAAcN,ODsQPmG,GAChD,IAAI+D,GAAK,EACTE,GAAK5B,GAAOipB,IAAOvnB,GAAKsnB,EAAKnpB,IAAIG,KAG/BhI,KAAKkH,cACPrB,E9CpOD,SAAiBA,EAAQ+D,EAAM/I,EAAQ8E,GAC5C,MAAMtE,KAAEA,EAAI+uB,KAAEA,EAAIjuB,KAAEA,GAAS0D,EAC7B,IAAIwqB,EAAQD,EACRE,EAAQnuB,EACRoJ,EAAM,KAEV,GAAI1K,EAAQ,CAEV0K,EAAM,IAAIqd,WAAWzmB,GACrByH,GAAK5B,GAAOuD,EAAIlK,EAAK2G,IAAQ,IAG7B,MAAMuS,EAAMhP,EAAIlB,QAAO,CAACkQ,EAAKxO,IAAQwO,EAAMxO,GAAK,GAChD,GAAIwO,IAAQpY,EAAM,CAEhBkuB,EAAQ7wB,MAAM+a,GACd+V,EAAQ,EACR,IAAK,IAAI/qB,EAAI,EAAGA,EAAIpD,IAAQoD,EACtBgG,EAAIhG,KAAI8qB,EAAM9kB,EAAIhG,GAAK+qB,KAAWF,EAAK7qB,KAMjD,IAAImE,GAAK,EACT,MAAM6mB,EAAQ,IAAIznB,YAAYnD,GAM9B,OAFAiE,EAHW0mB,IAAUnuB,EACjB6F,GAAOuoB,IAAQ7mB,GAAK6B,EAAIlK,EAAK2G,IAC7BA,GAAOuoB,IAAQ7mB,GAAKrI,EAAK2G,IAGtB,IAAKnC,EAAQxE,KAAMkvB,EAAOH,KAAMC,EAAOluB,KAAMmuB,G8CqMrCY,CAAQlxB,KAAK6F,SAAU+D,IAAQtJ,EAASqF,IC7Q1C,IAAS0kB,EDiRpB,OAAOrqB,KAAKyG,OAAO,CAAEb,KAAAA,EAAMF,MAAAA,EAAOG,OAAAA,EAAQhF,OAAQ,KAAMiF,MAAO,OAYjEqrB,aAAaC,GACX,OAAOA,EAAW7vB,OAAO8I,QAAO,CAACgG,EAAGgJ,IAAMA,EAAEhJ,IAAIrQ,MAQlDqxB,QAAQ5wB,GACN,OAAO4wB,GAAQrxB,KAAMS,GAQvB6wB,cAAc7wB,GACZ,OAAO4wB,GAAQrxB,KAAMS,GAAS8wB,YAUhCC,MAAM/wB,GACJ,OEhSW,SAASmI,EAAOnI,EAAU,IACvC,MAAMiF,EAAQ/D,GAAQiH,EAAOnI,EAAQkB,SAC/B2rB,EAAS7sB,EAAQ6sB,QAAU,GAC3BjgB,EAAQ5M,EAAQgxB,WAAa,IAC7BC,EAAW,IAAI/mB,OAAO,KAAK0C,UAE3BohB,EAAc/uB,GAAkB,MAATA,EAAgB,GACzCuL,EAAOvL,GAAS6P,EAAc7P,GAAO,GACrCgyB,EAASpe,KAAK5T,GAAS,IAAM,IAAMA,EAAM8Y,QAAQ,KAAM,MAAQ,IAC/D9Y,EAEEmM,EAAOnG,EAAM6F,IAAIkjB,GACvB,IAAIM,EAAO,GAWX,OATAnlB,GAAKhB,EAAOlD,EAAOjF,EAAQ6H,OAASnH,EAAAA,EAAUV,EAAQqJ,OAAQ,CAC5D9B,MACE+mB,GAAQljB,EAAKlI,KAAK0J,GAAS,MAE7B0gB,KAAKruB,EAAO+H,EAAM7H,GAChBiM,EAAKjM,GAAS6uB,EAAYnB,EAAO7lB,GAAQ6lB,EAAO7lB,GAAM/H,GAASA,MAI5DqvB,EAAOljB,EAAKlI,KAAK0J,GFyQfmkB,CAAMxxB,KAAMS,GAQrBkxB,OAAOlxB,GACL,OAAOkxB,GAAO3xB,KAAMS,GAQtBmxB,OAAOnxB,GACL,OJ5SW,SAASmI,EAAOnI,EAAU,IACvC,MAAMoxB,EAASC,GAAYrxB,EAAQoxB,QAC7BvE,EAAS7sB,EAAQ6sB,QAAU,GAC3B5nB,EAAQ/D,GAAQiH,EAAOnI,EAAQkB,SACrC,IAAIotB,EAAO,IAsBX,OApBI8C,IACF9C,GAAQ,sBACJtb,KAAKE,UAAUjO,EAAM6F,KAAI9D,KAAWA,KAAAA,OACpC,cAGN/B,EAAM+F,SAAQ,CAAChE,EAAMlC,KACnBwpB,IAASxpB,EAAI,IAAM,IAAMkO,KAAKE,UAAUlM,GAAQ,KAEhD,MAAM4iB,EAASzhB,EAAMyhB,OAAO5iB,GACtBinB,EAAYpB,EAAO7lB,IAASynB,GAClC,IAAIxlB,GAAK,EACTd,EAAMgB,MAAK5B,IACT,MAAMtI,EAAQ2qB,EAAOxiB,IAAIG,GACzB+mB,MAAWrlB,EAAI,IAAM,IAAM+J,KAAKE,UAAU+a,EAAUhvB,OACnD,EAAMe,EAAQ6H,MAAO7H,EAAQqJ,QAEhCilB,GAAQ,OAGHA,EAAO,KAAO8C,EAAS,IAAM,IIkR3BD,CAAO5xB,KAAMS,GAQtBsxB,WAAWtxB,GACT,OGxTW,SAASmI,EAAOnI,EAAU,IACvC,MAAMiF,EAAQ/D,GAAQiH,EAAOnI,EAAQkB,UAC/B6rB,MAAEA,EAAKF,OAAEA,GAAWF,GAAQxkB,EAAOlD,EAAOjF,GAG1C0jB,EAASpW,GAAKA,EAAEyK,QAAQ,MAAO,OAErC,IAAIuW,EAAO,IACPrpB,EAAM6F,IAAI4Y,GAAQxgB,KAAK,KACvB,OACA+B,EAAM6F,KAAI9D,IAAQonB,MANQ,OAAXzlB,EAMcokB,EAAM/lB,IANH,MAAc,MAAN2B,EAAY,KAAO,KAA5CA,IAAAA,KAM4BzF,KAAK,KAChD,IAWJ,OATAiG,GAAKhB,EAAOlD,EAAOjF,EAAQ6H,MAAO7H,EAAQqJ,OAAQ,CAChD9B,MACE+mB,GAAQ,OAEVhB,KAAKruB,EAAO+H,GACVsnB,GAAQ5K,EAAOsK,GAAY/uB,EAAO4tB,EAAO7lB,KAAU,OAIhDsnB,EAAO,KHkSLgD,CAAW/xB,KAAMS,IAI5B,SAASqwB,GAAcloB,GACrB,IAAIS,EAAIT,EAAMopB,SAEd,IAAK3oB,EAAG,CACN,MAAM5C,EAASse,GAAiBnc,EAAMtB,eAChC1B,EAAOgD,EAAMhD,OACnB,GAAIgD,EAAMzB,aAAeyB,EAAM5B,aAAc,CAC3C,MAAM1G,EAAUsI,EAAMtI,UACtB+I,EAAIrB,GAAOvB,EAAOnG,EAAQ0H,GAAMpC,QAEhCyD,EAAIrB,GAAOvB,EAAOuB,EAAKpC,GAEzBgD,EAAMopB,SAAW3oB,EAGnB,OAAOA,EIxWM,MAAM4oB,GACnBnyB,YAAYoyB,GACVlyB,KAAKmyB,SAAWD,EAGlB/vB,OACE,OAAOnC,KAAKmyB,SAAS/xB,OAGvB8xB,UACE,OAAOlyB,KAAKmyB,SAGdpS,OACE,MAAO,GAGT1U,OAIA2V,OAIAoR,UC5Ba,SAASC,GAAK/U,EAAMwQ,EAAKvQ,EAAU+U,GAChD,MAAMjV,EAAQE,EAASD,EAAKzS,OAAS0S,EAAkB,QACvD,GAAIF,IAAsC,IAA7BA,EAAMC,EAAMwQ,EAAKwE,GAAmB,OAEjD,MAAMC,EAASC,GAAQlV,EAAKzS,MACxB0nB,GAAQA,EAAOjV,EAAMwQ,EAAKvQ,GAGhC,MAAMkV,GAAQ,CAACnV,EAAMwQ,EAAKvQ,KACxB8U,GAAK/U,EAAK0B,SAAU8O,EAAKvQ,EAAUD,IAG/BE,GAAS,CAACF,EAAMwQ,EAAKvQ,KACzB8U,GAAK/U,EAAKvZ,KAAM+pB,EAAKvQ,EAAUD,GAC/B+U,GAAK/U,EAAKtZ,MAAO8pB,EAAKvQ,EAAUD,IAG5BoV,GAAU,CAACpV,EAAMwQ,EAAKvQ,KAC1B8U,GAAK/U,EAAKhK,KAAMwa,EAAKvQ,EAAUD,GAC/B+U,GAAK/U,EAAK4B,WAAY4O,EAAKvQ,EAAUD,GACjCA,EAAK6B,WAAWkT,GAAK/U,EAAK6B,UAAW2O,EAAKvQ,EAAUD,IAGpD9D,GAAO,CAAC8D,EAAMwQ,EAAKvQ,KACvBG,GAAKJ,EAAKvd,OAAQ+tB,EAAKvQ,EAAUD,GACjC+U,GAAK/U,EAAKK,KAAMmQ,EAAKvQ,EAAUD,IAG3BnR,GAAO,CAACmR,EAAMwQ,EAAKvQ,KACvB8U,GAAK/U,EAAKM,OAAQkQ,EAAKvQ,EAAUD,GACjCI,GAAKJ,EAAKnd,UAAW2tB,EAAKvQ,EAAUD,IAGhCI,GAAO,CAACiV,EAAO7E,EAAKvQ,EAAUD,KAClCqV,EAAMlnB,SAAQmnB,GAAQP,GAAKO,EAAM9E,EAAKvQ,EAAUD,MAG5CkV,GAAU,CACdpU,gBAAiB,CAACd,EAAMwQ,EAAKvQ,KAC3BG,GAAKJ,EAAKgB,YAAawP,EAAKvQ,EAAUD,GACtCI,GAAKJ,EAAKe,OAAQyP,EAAKvQ,EAAUD,IAEnCL,iBAAkB,CAACK,EAAMwQ,EAAKvQ,KAC5B8U,GAAK/U,EAAKpV,OAAQ4lB,EAAKvQ,EAAUD,GACjC+U,GAAK/U,EAAKpR,SAAU4hB,EAAKvQ,EAAUD,IAErCkB,eAAgBrS,GAChBsS,cAAetS,GACfuS,gBAAiB,CAACpB,EAAMwQ,EAAKvQ,KAC3BG,GAAKJ,EAAKqB,SAAUmP,EAAKvQ,EAAUD,IAErCsB,qBAAsBpB,GACtBqV,gBAAiBJ,GACjB5T,iBAAkBrB,GAClBsB,kBAAmBtB,GACnBuB,gBAAiB0T,GACjBK,iBAAkBL,GAClBxT,sBAAuByT,GACvBtT,iBAAkB,CAAC9B,EAAMwQ,EAAKvQ,KAC5BG,GAAKJ,EAAK+B,WAAYyO,EAAKvQ,EAAUD,IAEvCH,SAAU,CAACG,EAAMwQ,EAAKvQ,KACpB8U,GAAK/U,EAAKxR,IAAKgiB,EAAKvQ,EAAUD,GAC9B+U,GAAK/U,EAAK5d,MAAOouB,EAAKvQ,EAAUD,IAGlCgC,wBAAyB9F,GACzB+F,mBAAoB/F,GACpBgG,oBAAqBhG,GAErBkG,oBAAqB,CAACpC,EAAMwQ,EAAKvQ,KAC/BG,GAAKJ,EAAKsC,aAAckO,EAAKvQ,EAAUD,IAEzCuC,mBAAoB,CAACvC,EAAMwQ,EAAKvQ,KAC9B8U,GAAK/U,EAAKwC,GAAIgO,EAAKvQ,EAAUD,GAC7B+U,GAAK/U,EAAKyC,KAAM+N,EAAKvQ,EAAUD,IAEjC0C,cAAe,CAAC1C,EAAMwQ,EAAKvQ,KACzB8U,GAAK/U,EAAK0B,SAAU8O,EAAKvQ,EAAUD,IAGrC2C,eAAgB,CAAC3C,EAAMwQ,EAAKvQ,KAC1BG,GAAKJ,EAAKK,KAAMmQ,EAAKvQ,EAAUD,IAEjC6C,oBAAqB,CAAC7C,EAAMwQ,EAAKvQ,KAC/B8U,GAAK/U,EAAK8C,WAAY0N,EAAKvQ,EAAUD,IAEvC+C,YAAaqS,GACbK,aAAc,CAACzV,EAAMwQ,EAAKvQ,KACxB8U,GAAK/U,EAAKyC,KAAM+N,EAAKvQ,EAAUD,GAC/B+U,GAAK/U,EAAKhK,KAAMwa,EAAKvQ,EAAUD,GAC/B+U,GAAK/U,EAAK0V,OAAQlF,EAAKvQ,EAAUD,GACjC+U,GAAK/U,EAAKK,KAAMmQ,EAAKvQ,EAAUD,IAEjC2V,eAAgB,CAAC3V,EAAMwQ,EAAKvQ,KAC1B8U,GAAK/U,EAAKhK,KAAMwa,EAAKvQ,EAAUD,GAC/B+U,GAAK/U,EAAKK,KAAMmQ,EAAKvQ,EAAUD,IAEjC4V,iBAAkB,CAAC5V,EAAMwQ,EAAKvQ,KAC5B8U,GAAK/U,EAAKK,KAAMmQ,EAAKvQ,EAAUD,GAC/B+U,GAAK/U,EAAKhK,KAAMwa,EAAKvQ,EAAUD,IAEjCgD,gBAAiB,CAAChD,EAAMwQ,EAAKvQ,KAC3B8U,GAAK/U,EAAKiD,aAAcuN,EAAKvQ,EAAUD,GACvCI,GAAKJ,EAAKkD,MAAOsN,EAAKvQ,EAAUD,IAElCmD,WAAY,CAACnD,EAAMwQ,EAAKvQ,KAClBD,EAAKhK,MAAM+e,GAAK/U,EAAKhK,KAAMwa,EAAKvQ,EAAUD,GAC9CI,GAAKJ,EAAK4B,WAAY4O,EAAKvQ,EAAUD,IAEvCoD,gBAAiB+R,GAEjB9R,QAAS,CAACrD,EAAMwQ,EAAKvQ,KACnB8U,GAAK/U,EAAKK,KAAK,GAAImQ,EAAKvQ,EAAUD,KC/GtC,SAAS6V,GAAM7V,UACNA,EAAKrc,aACLqc,EAAKpc,WACLoc,EAAK8V,SAGd,SAASC,GAAY/V,GACnB6V,GAAM7V,UACCA,EAAKpV,cACLoV,EAAKpR,gBACLoR,EAAKO,SACPP,EAAK1U,cAAc0U,EAAK1U,MCXxB,SAAS0qB,GAAGzoB,EAAMyS,GACvB,OAAOA,GAAQA,EAAKzS,OAASA,ECIhB,YAASijB,EAAKyF,EAAMxzB,GAC7B+tB,EAAI0F,UAAU9sB,EAHO,8DAMzB,MAAMwd,EAAO,kBACTW,GAAciJ,EAAIllB,MAAMtB,eACxB,MAEJ,MAAO,CAAE6c,OAAQF,GAAQE,OAAOD,GCbVxkB,EDa2B6zB,EAAKha,KCZ/CjU,EAAW5F,GAASA,EAAQ,IAAMA,GDYoBK,ICbhD,IAASL,ECAxB,IAAI+zB,GAAgB,CAClB,EAAG,sNACH,EAAG,+CACH,EAAG,OACHC,OAAQ,yEACRC,WAAY,kBAKVC,GAAuB,8KAEvBC,GAAa,CACf,EAAGD,GACH,UAAWA,GAAuB,iBAClC,EAAGA,GAAuB,4CAGxBE,GAA4B,kBAS5BC,GAA+B,o6BAC/BC,GAA0B,ojBAE1BC,GAA0B,IAAItpB,OAAO,IAAMopB,GAA+B,KAC1EG,GAAqB,IAAIvpB,OAAO,IAAMopB,GAA+BC,GAA0B,KAEnGD,GAA+BC,GAA0B,KASzD,IAAIG,GAA6B,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,IAAI,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,IAAI,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,IAAI,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,GAAG,IAAI,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,IAAI,GAAG,IAAI,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,KAAK,GAAG,GAAG,KAAK,KAAK,IAAI,KAAK,IAAI,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,KAAK,EAAE,KAAK,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,EAAE,IAAI,KAAK,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,KAAK,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,KAAK,GAAG,IAAI,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,GAAG,GAAG,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,GAAG,GAAG,EAAE,EAAE,KAAK,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,KAAK,MAAM,GAAG,KAAK,EAAE,IAAI,EAAE,KAAK,GAAG,KAAK,KAAK,IAAI,KAAK,MAG55CC,GAAwB,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,GAAG,GAAG,EAAE,IAAI,EAAE,GA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"}